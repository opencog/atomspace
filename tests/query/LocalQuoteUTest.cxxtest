/*
 * tests/query/LocalQuoteUTest.cxxtest
 *
 * Copyright (C) 2016 OpenCog Foundation
 * All Rights Reserved
 * Author: Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/execution/Instantiator.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Logger.h>
#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al _as.add_link
#define an _as.add_node

class LocalQuoteUTest: public CxxTest::TestSuite
{
private:
    AtomSpace _as;

	Handle X, P, Q, P_X, Q_X, forall,
		VT, vardecl_var, body_var, rewrite_var,
		vardecl, forall_pattern, forall_get,
		A, P_A, Q_A, CT;

public:
    LocalQuoteUTest()
    {
	    logger().set_level(Logger::DEBUG);
	    logger().set_print_to_stdout_flag(true);
	    logger().set_timestamp_flag(false);
    }

    void setUp();
    void tearDown();

	void test_get();
	void test_put();
	// void test_bind();
};

void LocalQuoteUTest::setUp()
{
	X = an(VARIABLE_NODE, "$X");
	P = an(PREDICATE_NODE, "P");
	Q = an(PREDICATE_NODE, "Q");
	P_X = al(EVALUATION_LINK, P, X);
	Q_X = al(EVALUATION_LINK, Q, X);
	forall = al(FORALL_LINK, X, P_X);
	VT = an(TYPE_NODE, "VariableNode");
	vardecl_var = an(VARIABLE_NODE, "$vardecl");
	body_var = an(VARIABLE_NODE, "$body");
	rewrite_var = an(VARIABLE_NODE, "$rewrite");
	vardecl = al(VARIABLE_LIST,
	             al(TYPED_VARIABLE_LINK, vardecl_var, VT),
	             body_var);
	forall_pattern = al(FORALL_LINK, vardecl_var, body_var);
	forall_get = al(GET_LINK, vardecl, al(LOCAL_QUOTE_LINK, forall_pattern));
	A = an(CONCEPT_NODE, "A");
	CT = an(TYPE_NODE, "ConceptNode");
	P_A = al(EVALUATION_LINK, P, A);
	Q_A = al(EVALUATION_LINK, Q, A);
}

void LocalQuoteUTest::tearDown()
{
}

/**
 * LocalQuoteLink unit test on a ForAll pattern query using Get
 */
void LocalQuoteUTest::test_get()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle result = satisfying_set(&_as, forall_get),
	    expected = al(SET_LINK, al(LIST_LINK, X, P_X));

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/**
 * LocalQuoteLink unit test on a ImplicationScope rewrite using a Put
 */
void LocalQuoteUTest::test_put()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle
		body = al(LOCAL_QUOTE_LINK, al(IMPLICATION_SCOPE_LINK, P_X, P_X)),
		vardecl = al(TYPED_VARIABLE_LINK, X, CT),
		put = al(PUT_LINK, al(LAMBDA_LINK, vardecl, body), A);

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);
	Handle expected = al(IMPLICATION_SCOPE_LINK, P_A, P_A);

	printf("Executing %s\n", put->toString().c_str());
	printf("Expecting %s\n", expected->toString().c_str());
	printf("Got %s\n", putted->toString().c_str());
	TS_ASSERT_EQUALS(putted, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Re-enable this once a solution for the static checking of no
// variables in clause has been fixed.
//
// /**
//  * LocalQuoteLink unit test on a ImplicationScope rewrite using a Bind
//  */
// void LocalQuoteUTest::test_bind()
// {
// 	logger().info("BEGIN TEST: %s", __FUNCTION__);

// 	// Meta rule, given an ImplicationScopeLink creates a
// 	// corresponding BindLink
// 	Handle bl = al(BIND_LINK,
// 	               al(LOCAL_QUOTE_LINK,
// 	                  al(IMPLICATION_SCOPE_LINK,
// 	                     vardecl_var, body_var, rewrite_var)),
// 	               al(LOCAL_QUOTE_LINK,
// 	                  al(BIND_LINK,
// 	                     vardecl_var, body_var, rewrite_var)));

// 	// Implication to serve as grounding for the meta rule
// 	Handle impl = al(IMPLICATION_SCOPE_LINK,
// 	                 al(TYPED_VARIABLE_LINK, X, CT), P_X, Q_X);

// 	// Result
// 	Handle result = bindlink(&_as, bl),
// 		expected = al(SET_LINK,
// 		              al(BIND_LINK,
// 		                 al(TYPED_VARIABLE_LINK,
// 		                    an(VARIABLE_NODE, "$X"),
// 		                    an(TYPE_NODE, "ConceptNode")),
// 		                 al(EVALUATION_LINK,
// 		                    an(PREDICATE_NODE, "P"),
// 		                    an(VARIABLE_NODE, "$X")),
// 		                 al(EVALUATION_LINK,
// 		                    an(PREDICATE_NODE, "Q"),
// 		                    an(VARIABLE_NODE, "$X"))));

// 	printf("Meta-rule %s\n", bl->toString().c_str());
// 	printf("Expecting %s\n", expected->toString().c_str());
// 	printf("Got %s\n", result->toString().c_str());
// 	TS_ASSERT_EQUALS(result, expected);

// 	logger().info("END TEST: %s", __FUNCTION__);
// }

#undef al
#undef an
