/*
 * tests/query/ChoiceLinkUTest.cxxtest
 *
 * Copyright (C) 2015 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class ChoiceLinkUTest: public CxxTest::TestSuite
{
private:
	AtomSpace *as;
	SchemeEval* eval;

public:
	ChoiceLinkUTest(void)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);

		as = new AtomSpace();
		eval = new SchemeEval(as);
		eval->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");

	}

	~ChoiceLinkUTest()
	{
		delete eval;
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().get_filename().c_str());
	}

	void setUp(void);
	void tearDown(void);

	void test_basic_or(void);
	void test_embed_or(void);
	void test_nest_or(void);
	void test_top_nest_or(void);
	void test_nest_bad_or(void);
	void test_top_nest_bad_or(void);
	void test_top_disco(void);
	void test_embed_disco(void);
	void test_double_or(void);
	void test_unary(void);
	void test_typed(void);
	void test_nodes(void);
};

void ChoiceLinkUTest::tearDown(void)
{
	as->clear();
}

void ChoiceLinkUTest::setUp(void)
{
	as->clear();
	eval->eval("(use-modules (opencog exec))");
}

#define getarity(hand) hand->get_arity()

/*
 * ChoiceLink most basic unit test.
 */
void ChoiceLinkUTest::test_basic_or(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/choice-link.scm\")");

	Handle items = eval->eval_h("(cog-execute! (basic))");

	TS_ASSERT_EQUALS(2, getarity(items));
}

/*
 * ChoiceLink embeded unit test.
 */
void ChoiceLinkUTest::test_embed_or(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/choice-embed.scm\")");

	Handle items = eval->eval_h("(cog-execute! (embed))");

	TS_ASSERT_EQUALS(2, getarity(items));
}

/*
 * ChoiceLink nested embeded unit test.
 */
void ChoiceLinkUTest::test_nest_or(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/choice-nest.scm\")");

	Handle items = eval->eval_h("(cog-execute! (nest))");

	printf ("Nest found:\n%s\n", items->to_short_string().c_str());
	TS_ASSERT_EQUALS(5, getarity(items));
}

/*
 * ChoiceLink top-level nested unit test.
 */
void ChoiceLinkUTest::test_top_nest_or(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/choice-top-nest.scm\")");

	Handle items = eval->eval_h("(cog-execute! (top-nest))");

	printf ("Top-nest found:\n%s\n", items->to_short_string().c_str());
	TS_ASSERT_EQUALS(5, getarity(items));
}

/*
 * ChoiceLink bad nested embeded unit test.
 */
void ChoiceLinkUTest::test_nest_bad_or(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/choice-nest.scm\")");

	Handle items = eval->eval_h("(cog-execute! (nest-bad))");

	printf ("Nest-bad found:\n%s\n", items->to_short_string().c_str());
	TS_ASSERT_EQUALS(4, getarity(items));
}

/*
 * ChoiceLink bad nested embeded unit test.
 */
void ChoiceLinkUTest::test_top_nest_bad_or(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/choice-top-nest.scm\")");

	Handle items = eval->eval_h("(cog-execute! (top-nest-bad))");

	printf ("Top-nest-bad found:\n%s\n", items->to_short_string().c_str());
	TS_ASSERT_EQUALS(4, getarity(items));
}

/*
 * ChoiceLink disconnected unit test.
 */
void ChoiceLinkUTest::test_top_disco(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/choice-disconnected.scm\")");

	Handle items = eval->eval_h("(cog-execute! (top-disco))");

	printf ("Top-disco found:\n%s\n", items->to_short_string().c_str());
	TS_ASSERT_EQUALS(2, getarity(items));

	Handle wrap = eval->eval_h("(cog-execute! (wrapped-disco))");

	printf ("Top-wrapped-disco found:\n%s\n", wrap->to_short_string().c_str());
	TS_ASSERT_EQUALS(2, getarity(wrap));
}

/*
 * ChoiceLink disconnected-embeded unit test.
 * (Well, its not really disconnected, it just sort-of looks that way.)
 */
void ChoiceLinkUTest::test_embed_disco(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/choice-embed-disco.scm\")");

	Handle items = eval->eval_h("(cog-execute! (embed-disco))");

	printf ("Embed pseudo-disco found:\n%s\n", items->to_short_string().c_str());
	TS_ASSERT_EQUALS(2, getarity(items));
}

/*
 * double ChoiceLink unit test.
 */
void ChoiceLinkUTest::test_double_or(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/choice-double.scm\")");

	Handle items = eval->eval_h("(cog-execute! (double))");

	TS_ASSERT_EQUALS(3, getarity(items));
}

/*
 * unary ChoiceLink unit test.
 */
void ChoiceLinkUTest::test_unary(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/choice-unary.scm\")");

	// Needed to define cog-execute!
	eval->eval("(use-modules (opencog exec))");

	Handle doors = eval->eval_h("(cog-execute! (get-a))");

	printf("unary door-a found:\n%s\n", doors->to_string().c_str());
	TS_ASSERT_EQUALS(1, getarity(doors));

	doors = eval->eval_h("(cog-execute! (get-bc))");

	printf("unary door-bc found:\n%s\n", doors->to_string().c_str());
	TS_ASSERT_EQUALS(4, getarity(doors));
}

/*
 * ChoiceLinks with typed ariables in them.
 */
void ChoiceLinkUTest::test_typed(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/choice-typed.scm\")");

	// Needed to define cog-execute!
	eval->eval("(use-modules (opencog exec))");

	Handle rules = eval->eval_h("(cog-execute! get-nodes1)");

	printf("typed get-nodes found:\n%s\n", rules->to_string().c_str());
	TS_ASSERT_EQUALS(2, getarity(rules));
}

/*
 * ChoiceLink with nodes in it
 */
void ChoiceLinkUTest::test_nodes(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/choice-nodes.scm\")");

	// Needed to define cog-execute!
	eval->eval("(use-modules (opencog exec))");

	Handle result = eval->eval_h("(cog-execute! query)");

	printf("typed get-nodes found:\n%s\n", result->to_string().c_str());
	TS_ASSERT_EQUALS(1, getarity(result));
}
