/*
 * tests/query/ConstantClausesUTest.cxxtest
 *
 * Copyright (C) 2017 OpenCog Foundation
 * All Rights Reserved
 * Author: Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Logger.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al as.add_link
#define an as.add_node

class DontExecUTest: public CxxTest::TestSuite
{
private:
	AtomSpace as;
	SchemeEval eval;

public:
	DontExecUTest() : eval(&as)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_sync_flag(true);
		logger().set_print_to_stdout_flag(true);

		eval.eval("(add-to-load-path \"..\")");
		eval.eval("(add-to-load-path \"../../..\")");
	}

	~DontExecUTest()
	{
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().get_filename().c_str());
		int rc = CxxTest::TestTracker::tracker().suiteFailed();
		_exit(rc); // XXX hack to avoid double-free in __run_exit_handlers
	}

	void setUp();
	void tearDown();

	void test_DontExecLink_consumption();
};

void DontExecUTest::tearDown()
{
}

void DontExecUTest::setUp()
{
}

/**
 * Test that DontExecLink are properly consumed when executed.
 */
void DontExecUTest::test_DontExecLink_consumption()
{
	eval.eval("(load-from-path \"tests/query/dont-exec.scm\")");

	Handle bl = eval.eval_h("bl");
	Handle result = bindlink(&as, bl);
	Handle simple_bl = eval.eval_h("simple-bl");
	Handle expected = al(SET_LINK, al(DONT_EXEC_LINK, simple_bl));

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);
}

#undef al
#undef an
