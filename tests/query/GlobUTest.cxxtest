/*
 * tests/query/GlobUTest.cxxtest
 *
 * Copyright (C) 2015, 2016 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class GlobUTest: public CxxTest::TestSuite
{
private:
	AtomSpace *as;
	SchemeEval* eval;

public:
	GlobUTest(void)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);

		as = new AtomSpace();
		eval = new SchemeEval(as);
		eval->eval("(add-to-load-path \"..\")");
		eval->eval("(add-to-load-path \"../../..\")");
		eval->eval("(use-modules (opencog query))");
	}

	~GlobUTest()
	{
		delete eval;
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
int rc = CxxTest::TestTracker::tracker().suiteFailed();
_exit(rc); // XXX hack to avoid double-free in __run_exit_handlers
	}

	void setUp(void);
	void tearDown(void);

	void test_glob_middle(void);
	void test_glob_final(void);
	void test_glob_type(void);
	void test_glob_interval(void);
	void test_glob_typeset(void);
	void test_glob_three_globs(void);
};

void GlobUTest::tearDown(void)
{
	as->clear();
}

void GlobUTest::setUp(void)
{
	as->clear();
	eval->eval("(load-from-path \"tests/query/test_types.scm\")");
}

/*
 * Test a glob in the middle of a list.
 */
void GlobUTest::test_glob_middle(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/glob-basic.scm\")");

	Handle love = eval->eval_h("(cog-execute! glob-you)");
	printf("glob-you %s\n", love->toString().c_str());
	TS_ASSERT_EQUALS(2, love->getArity());

	Handle response = eval->eval_h(
		"(SetLink"
		"  (ListLink"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"love\")"
		"    (ConceptNode \"you\")"
		"    (ConceptNode \"too\"))"
		"  (ListLink"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"really\")"
		"    (ConceptNode \"totally\")"
		"    (ConceptNode \"need\")"
		"    (ConceptNode \"you\")"
		"    (ConceptNode \"too\")))"
	);
	TS_ASSERT_EQUALS(love, response);

	// ----
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Test a glob at the end of a list.
 */
void GlobUTest::test_glob_final(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/glob-basic.scm\")");

	Handle love = eval->eval_h("(cog-execute! love-glob)");
	printf("love-glob %s\n", love->toString().c_str());
	TS_ASSERT_EQUALS(3, love->getArity());

	Handle response = eval->eval_h(
		"(SetLink"
		"  (ListLink"
		"    (ConceptNode \"Hey!\")"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"like\")"
		"    (NumberNode  42)"
		"    (ConceptNode \"also\"))"
		"  (ListLink"
		"    (ConceptNode \"Hey!\")"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"like\")"
		"    (ConceptNode \"you\")"
		"    (ConceptNode \"also\"))"
		"  (ListLink"
		"    (ConceptNode \"Hey!\")"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"like\")"
		"    (ConceptNode \"teddy\")"
		"    (ConceptNode \"bears\")"
		"    (ConceptNode \"a\")"
		"    (ConceptNode \"lot\")"
		"    (ConceptNode \"also\")))"
	);
	TS_ASSERT_EQUALS(love, response);

	// ----
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Test a glob with type restrictions
 */
void GlobUTest::test_glob_type(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/glob-basic.scm\")");

	Handle love = eval->eval_h("(cog-execute! love-type-glob)");
	printf("love-type-glob %s\n", love->toString().c_str());
	TS_ASSERT_EQUALS(1, love->getArity());

	Handle response = eval->eval_h(
		"(SetLink"
		"  (ListLink"
		"    (ConceptNode \"Hey!\")"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"like\")"
		"    (NumberNode  42)"
		"    (ConceptNode \"also\")))"
	);
	TS_ASSERT_EQUALS(love, response);

	// ----
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Test a glob with interval restrictions
 */
void GlobUTest::test_glob_interval(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/glob-basic.scm\")");

	Handle love = eval->eval_h("(cog-execute! love-interval-glob)");
	printf("love-interval-glob %s\n", love->toString().c_str());
	TS_ASSERT_EQUALS(2, love->getArity());

	Handle response = eval->eval_h(
		"(SetLink"
		"  (ListLink"
		"    (ConceptNode \"Hey!\")"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"like\")"
		"    (NumberNode  42)"
		"    (ConceptNode \"also\"))"
		"  (ListLink"
		"    (ConceptNode \"Hey!\")"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"like\")"
		"    (Concept \"you\")"
		"    (ConceptNode \"also\")))"
	);
	TS_ASSERT_EQUALS(love, response);

	// ----
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Test a glob with both type and interval restrictions
 */
void GlobUTest::test_glob_typeset(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/glob-basic.scm\")");

	Handle love = eval->eval_h("(cog-execute! love-typeset-glob)");
	printf("love-typeset-glob %s\n", love->toString().c_str());
	TS_ASSERT_EQUALS(2, love->getArity());

	Handle response = eval->eval_h(
		"(SetLink"
		"  (ListLink"
		"    (ConceptNode \"Hey!\")"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"like\")"
		"    (ConceptNode \"teddy\")"
		"    (ConceptNode \"bears\")"
		"    (ConceptNode \"a\")"
		"    (ConceptNode \"lot\")"
		"    (ConceptNode \"also\"))"
		"  (ListLink"
		"    (ConceptNode \"Hey!\")"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"like\")"
		"    (Concept \"you\")"
		"    (ConceptNode \"also\")))"
	);
	TS_ASSERT_EQUALS(love, response);

	// ----
	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * A slightly more complicated case
 */
void GlobUTest::test_glob_three_globs(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/glob-basic.scm\")");

	Handle love = eval->eval_h("(cog-execute! love-three-globs)");
	printf("love-three-globs %s\n", love->toString().c_str());
	TS_ASSERT_EQUALS(3, love->getArity());

	Handle response = eval->eval_h(
		"(SetLink"
		"  (ListLink"
		"    (ConceptNode \"Hey!\")"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"hate\")"
		"    (Concept \"you\")"
		"    (ConceptNode \"also\"))"
		"  (ListLink"
		"    (ConceptNode \"Hey!\")"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"need\")"
		"    (Concept \"you\")"
		"    (ConceptNode \"also\"))"
		"  (ListLink"
		"    (ConceptNode \"Hey!\")"
		"    (ConceptNode \"I\")"
		"    (ConceptNode \"love\")"
		"    (Concept \"you\")"
		"    (ConceptNode \"also\")))"
	);
	TS_ASSERT_EQUALS(love, response);

	// ----
	logger().debug("END TEST: %s", __FUNCTION__);
}
