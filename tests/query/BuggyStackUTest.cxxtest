/*
 * tests/query/BuggyStackUTest.cxxtest
 *
 * Copyright (C) 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Logger.h>

#include "test-types.h"

using namespace opencog;

class BuggyStackUTest :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;
		Handle restrict;

	public:

		BuggyStackUTest(void)
		{
			logger().set_level(Logger::DEBUG);
			logger().set_print_to_stdout_flag(true);

#include "test-types.cc"
		}

		~BuggyStackUTest()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().get_filename().c_str());
		}

		void setUp(void);

		void tearDown(void) { }

		void test_exec(void);
};

/*
 * This function sets up an implication link, and some data.
 */
#define an as->add_node
#define al as->add_link
#define getarity(hand) hand->getArity()
#define getlink(hand,pos) hand->getOutgoingAtom(pos)

void BuggyStackUTest::setUp(void)
{
	as = new AtomSpace();
	SchemeEval* eval = new SchemeEval(as);
	eval->eval("(add-to-load-path \"..\")");
	eval->eval("(add-to-load-path \"../../..\")");
	eval->eval("(load-from-path \"tests/query/test_types.scm\")");
	eval->eval("(load-from-path \"tests/query/buggy-stack.scm\")");

	// Create an implication link that will be tested.
	restrict = eval->apply("impy", Handle::UNDEFINED);
	delete eval;
}

/*
 * Basic implication link test.
 */
void BuggyStackUTest::test_exec(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != restrict);

	// Result should be a ListLink w/ one solution
	Handle result = bindlink(as, restrict);
#ifdef HAVE_GUILE
	logger().debug("result is %s\n", SchemeSmob::to_string(result).c_str());
#endif 
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	logger().debug("END TEST: %s", __FUNCTION__);
}
