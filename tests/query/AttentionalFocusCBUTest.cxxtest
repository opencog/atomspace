/*
 * AttentionalFocusCBUTest.cxxtest
 *
 * Copyright (C) 2014 Misgana Bayetta
 *
 * Author: Misgana Bayetta <misgana.bayetta@gmail.com>  July 2014
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/attentionbank/AttentionBank.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class AttentionalFocusCBUTest: public CxxTest::TestSuite {
private:
	AtomSpace * as;
	SchemeEval * eval;
public:
	AttentionalFocusCBUTest(void)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);

		as = new AtomSpace();
		eval = new SchemeEval(as);
		eval->eval("(add-to-load-path \"..\")");
		eval->eval("(add-to-load-path \"../../..\")");
	}

	~AttentionalFocusCBUTest()
	{
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp(void);
	void tearDown(void);
	void test_af_bindlink(void);
};

void AttentionalFocusCBUTest::tearDown(void)
{
}

void AttentionalFocusCBUTest::setUp(void)
{
}

#define getarity(hand) hand->getArity()

void AttentionalFocusCBUTest::test_af_bindlink(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	attentionbank(as).setAttentionalFocusBoundary(20); //for test purpose
	eval->eval("(load-from-path \"tests/query/af-filtering-test.scm\")");

	Handle findMan = eval->eval_h("find-man");
	// Test PatternMatch::af_bindlink, which should only return the
	// first match
	Handle answersSingle = af_bindlink(as, findMan);
	TS_ASSERT_EQUALS(1, getarity(answersSingle));
	TS_ASSERT_EQUALS(20, attentionbank(as).getAttentionalFocusBoundary());
}
