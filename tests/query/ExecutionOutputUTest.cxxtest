/*
 * tests/query/ExecutionOutputUTest.cxxtest
 *
 * Copyright (C) 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atoms/base/Link.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Logger.h>

#include "imply.h"

using namespace opencog;

class ExecutionOutputUTest :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;

	public:

		ExecutionOutputUTest(void)
		{
			logger().set_level(Logger::DEBUG);
			logger().set_print_to_stdout_flag(true);
		}

		~ExecutionOutputUTest()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().get_filename().c_str());
		}

		void setUp(void);
		void tearDown(void);

		void test_exec(void);
		void test_varsub(void);
};

#define an as->add_node
#define al as->add_link
#define getarity(hand) hand->getArity()
#define getlink(hand,pos) hand->getOutgoingAtom(pos)

void ExecutionOutputUTest::tearDown(void)
{
	delete as;
}
void ExecutionOutputUTest::setUp(void)
{
	as = new AtomSpace();
}

/*
 * preposition reasoning test.
 *
 * Expect to get the following result, given the above data:
 *
 *    EvaluationLink
 *       DefinedLinguisticRelationshipNode "capital_of"
 *       ListLink
 *          WordNode "capital"
 *          DefinedLinguisticRelationshipNode "of"
 */

void ExecutionOutputUTest::test_exec(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	/*
	 * Create an implication link that will be tested.
	 * This sets up the following structures:
	 *  # IF _obj(be, $var1) ^
	 *       $prep($var1, $var2)
	 *      THEN %ExecutionOutputLink("make-it", $var1, $prep)
	 */
	Handle clauses =
		al(AND_LINK,
			al(EVALUATION_LINK,
				an(PREDICATE_NODE, "_obj"),
				al(LIST_LINK,
					an(CONCEPT_NODE, "be"),
					an(VARIABLE_NODE, "$var1")
				)
			),
			al(EVALUATION_LINK,
				an(VARIABLE_NODE, "$prep"),
				al(LIST_LINK,
					an(VARIABLE_NODE, "$var1"),
					an(VARIABLE_NODE, "$var2")
				)
			)
		);
	Handle implicand =
		al(EXECUTION_OUTPUT_LINK,
			an(GROUNDED_SCHEMA_NODE, "scm:make-verb-prep"),
			al(LIST_LINK,
				an(VARIABLE_NODE, "$var1"),
				an(VARIABLE_NODE, "$prep")
			)
		);

	Handle hcapital;
	// Create data on which the above pattern should match
	al(EVALUATION_LINK,
		an(PREDICATE_NODE, "_obj"),
		al(LIST_LINK,
			an(CONCEPT_NODE, "be"),
			hcapital = an(CONCEPT_NODE, "capital")
		)
	)->setTruthValue(TruthValue::TRUE_TV());

	Handle hprep;
	al(EVALUATION_LINK,
		hprep = an(PREDICATE_NODE, "of"),
		al(LIST_LINK,
			an(CONCEPT_NODE, "capital"),
			an(CONCEPT_NODE, "Spain")
		)
	)->setTruthValue(TruthValue::TRUE_TV());

	const char * str =
	"(define (make-verb-prep verb prep) \n"
	"	(cog-new-link 'EvaluationLink \n"
	"		(cog-new-node 'ConceptNode \n"
	"			(string-append (cog-name verb) \"_\" (cog-name prep)) \n"
	"		) \n"
	"		(cog-new-link 'ListLink \n"
	"			(cog-new-node 'ConceptNode (cog-name verb)) \n"
	"			(cog-new-node 'PredicateNode (cog-name prep)) \n"
	"		) \n"
	"	) \n"
	")";
	SchemeEval* ev = new SchemeEval(as);
	ev->eval(str);
	delete ev;

	// Result should be a ListLink
	Handle result = imply(as, clauses, implicand);

	// There should be only one solution: the Berlin one.
	// The Madrid graph should be rejected because of the
	// NOT definite link.
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	// Then, evaluationLink, as above.
	Handle heval = getlink(result, 0);
	Handle vcap_of = getlink(heval, 0);
	Handle hlist = getlink(heval, 1);
	Handle vcapital = getlink(hlist, 0);
	Handle vprep = getlink(hlist, 1);

	TSM_ASSERT_EQUALS("incorrect capital", hcapital, vcapital);
	TSM_ASSERT_EQUALS("incorrect prep", hprep, vprep);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Test execution of variables.
 * During pattern matching, variables can bind to ExecutionOutputLinks
 * If they are then repeated in the implcand, the ExecutionOutputLink
 * must be exeucted there, with the resulting answer returned.
 *
 * Err. XXX maybe. Shouldn't the ExecutionOutputLink be executed when
 * its found??  Well, for now, we're doing what we do here. This may need
 * to change.
 */
void ExecutionOutputUTest::test_varsub(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	const char * str =
	"(define (retarg x) x)\n";
	SchemeEval* ev = new SchemeEval(as);
	ev->eval(str);
	delete ev;

	Handle resolution;
	// Raw data
	al(CONTEXT_LINK,
		an(CONCEPT_NODE, "situation"),
		al(EXECUTION_OUTPUT_LINK,
			an(GROUNDED_SCHEMA_NODE, "scm: retarg"),
			al(LIST_LINK,
				resolution = an(CONCEPT_NODE, "resolution")
			)
		)
	);

	Handle deliverance;
	al(CONTEXT_LINK,
		an(CONCEPT_NODE, "predicament"),
		al(EXECUTION_OUTPUT_LINK,
			an(GROUNDED_SCHEMA_NODE, "scm: retarg"),
			al(LIST_LINK,
				deliverance = an(CONCEPT_NODE, "deliverance")
			)
		)
	);


	Handle situ =
	al(BIND_LINK,
	   al(CONTEXT_LINK,
	      an(CONCEPT_NODE, "situation"),
	      an(VARIABLE_NODE, "$action")
	      ),
	   an(VARIABLE_NODE, "$action")
	);
	BindLinkPtr situation(createBindLink(*LinkCast(situ)));

	Handle pred =
	al(BIND_LINK,
	   al(CONTEXT_LINK,
	      an(CONCEPT_NODE, "predicament"),
	      an(VARIABLE_NODE, "$action")
	      ),
	   an(VARIABLE_NODE, "$action")
	);
	BindLinkPtr predicament(createBindLink(*LinkCast(pred)));

   // Now perform the search.
   DefaultImplicator simpl(as);
   simpl.implicand = situation->get_implicand();
   situation->imply(simpl);

   // The result_list contains a list of the grounded expressions.
   Handle res = simpl.get_result_list()[0];
	printf("res is %s\n", res->toShortString().c_str());
	TSM_ASSERT_EQUALS("incorrect resolution", res, resolution);

   // Now perform the search.
   DefaultImplicator pimpl(as);
   pimpl.implicand = predicament->get_implicand();
   predicament->imply(pimpl);

   // The result_list contains a list of the grounded expressions.
   Handle del = pimpl.get_result_list()[0];
	printf("del is %s\n", del->toShortString().c_str());
	TSM_ASSERT_EQUALS("incorrect delivarance", del, deliverance);

	logger().debug("END TEST: %s", __FUNCTION__);
}
