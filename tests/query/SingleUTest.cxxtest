/*
 * tests/query/SingleUTest.cxxtest
 *
 * Copyright (C) 2014 Cosmo Harrigan
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class SingleUTest: public CxxTest::TestSuite
{
private:
    AtomSpace *as;
    SchemeEval* eval;

public:
    SingleUTest(void)
    {
        logger().set_level(Logger::DEBUG);
        logger().set_print_to_stdout_flag(true);

        as = new AtomSpace();
        eval = new SchemeEval(as);
        eval->eval("(use-modules (opencog exec) (opencog query))");
        eval->eval("(add-to-load-path \"..\")");
        eval->eval("(add-to-load-path \"../../..\")");
    }

    ~SingleUTest()
    {
        delete eval;
        delete as;
        // Erase the log file if no assertions failed.
        if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
int rc = CxxTest::TestTracker::tracker().suiteFailed();
_exit(rc); // XXX hack to avoid double-free in __run_exit_handlers
    }

    void setUp(void);
    void tearDown(void);

    void test_single_bindlink(void);
};

void SingleUTest::tearDown(void)
{
}

void SingleUTest::setUp(void)
{
}

#define getarity(hand) hand->getArity()

/*
 * Basic SingleLink unit test. Defines 3 inheritance relationships,
 * and then tests that PatternMatch::bindlink finds all of them, and that
 * PatternMatch::single_bindlink only finds the first result and then stops
 * searching.
 */
void SingleUTest::test_single_bindlink(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    eval->eval("(load-from-path \"tests/query/single.scm\")");

    // First, get all the solutions. There should be 3 of them:
    // Socrates, Einstein and Peirce all inherit from man
    Handle answersAll = eval->eval_h("(cog-bind find-man)");
    TS_ASSERT_EQUALS(3, getarity(answersAll));

    // Test PatternMatch::single_bindlink, which should only return the
    // first match
    Handle answersSingle = eval->eval_h("(cog-bind-single find-man)");
    TS_ASSERT_EQUALS(1, getarity(answersSingle));
}
