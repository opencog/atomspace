/*
 * tests/query/SudokuUTest.cxxtest
 *
 * Copyright (C) 2009, 2013, 2014 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/query/BindLinkAPI.h>
#include <opencog/util/Logger.h>

#include "test-types.h"

using namespace opencog;

class SudokuPuzzle :  public CxxTest::TestSuite
{
	private:
		AtomSpace* as;
		SchemeEval* eval;

	public:

		SudokuPuzzle(void)
		{
			logger().set_level(Logger::DEBUG);
			logger().set_print_to_stdout_flag(true);

			as = new AtomSpace();
			eval = new SchemeEval(as);
			eval->eval("(add-to-load-path \"..\")");
			eval->eval("(add-to-load-path \"../../..\")");
			eval->eval("(use-modules (opencog query))");
		}

		~SudokuPuzzle()
		{
			delete eval;
			delete as;

			// Erase the log file if no assertions failed.
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().get_filename().c_str());
int rc = CxxTest::TestTracker::tracker().suiteFailed();
_exit(rc); // XXX hack to avoid double-free in __run_exit_handlers
		}

		void setUp(void);

		void tearDown(void) { }

		void test_2x2_puzzle(void);
		void xtest_2x2_any(void);
		void test_3x3_puzzle(void);
		void xxx_borken_test_puzzle(void);
};

/*
 * Clear the atomspace, load various atom types.
 */
#define an as->add_node
#define al as->add_link
void SudokuPuzzle::setUp(void)
{
	as->clear();
}

#define getlink(hand,pos) hand->getOutgoingAtom(pos)
#define getarity(hand) hand->getArity()

/* ========================================================================
 * Extremely simple 2x2 puzzle solver
 */
void SudokuPuzzle::test_2x2_puzzle(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/sudoku-simple.scm\")");

	// Create an implication link that will be tested.
	Handle puzzle = eval->eval_h("(x2-puzzle)");

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != puzzle);
	logger().debug("puzzle is:\n%s\n", SchemeSmob::to_string(puzzle).c_str());

	// Solve the puzzle
	// Handle puzzle_solution = bindlink(as, puzzle);
	Handle puzzle_solution = eval->eval_h("(cog-bind (x2-puzzle))");
	logger().debug("puzzle solution is %s\n", SchemeSmob::to_string(puzzle_solution).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(puzzle_solution));

	logger().debug("END TEST: %s", __FUNCTION__);
}

/* ========================================================================
 * Extremely simple 2x2 puzzle solver
 */
// XXX FIXME The current unordered set solver is broken on this test :-(
// XXX this is as of 5 November 2014 
void SudokuPuzzle::xtest_2x2_any(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/sudoku-simple.scm\")");

	// Create an implication link that will be tested.
	Handle puzzle = eval->eval_h("(x2-any)");

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != puzzle);
	logger().debug("puzzle is:\n%s\n", SchemeSmob::to_string(puzzle).c_str());

	// Solve the puzzle. Expect 2 solutions, as there are no
	// fixed cells here.
	Handle puzzle_solution = bindlink(as, puzzle);
	logger().debug("puzzle solution is %s\n", SchemeSmob::to_string(puzzle_solution).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 2, getarity(puzzle_solution));

	logger().debug("END TEST: %s", __FUNCTION__);
}

/* ========================================================================
 * Extremely simple 3x3 puzzle solver -- currently broken
 */
void SudokuPuzzle::test_3x3_puzzle(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/sudoku-simple.scm\")");

	// Create an implication link that will be tested.
	Handle puzzle = eval->eval_h("(x3-puzzle)");

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != puzzle);
	logger().debug("puzzle is:\n%s\n", SchemeSmob::to_string(puzzle).c_str());

	// Solve the puzzle
	// Handle puzzle_solution = bindlink(as, puzzle);
	Handle puzzle_solution = eval->eval_h("(cog-bind (x3-puzzle))");
	logger().debug("puzzle solution is %s\n", SchemeSmob::to_string(puzzle_solution).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 4, getarity(puzzle_solution));

	logger().debug("END TEST: %s", __FUNCTION__);
}

/* ========================================================================
 * Full 9x9 Puzzle solver
 * Does not currently work correctly, see below.  (18 October 2014)
 */
void SudokuPuzzle::xxx_borken_test_puzzle(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/sudoku-rules.scm\")");
	eval->eval("(load-from-path \"tests/query/sudoku-puzzle.scm\")");

	// Create an implication link that will be tested.
	Handle puzzle = eval->eval_h("(puzzle)");

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != puzzle);
	logger().debug("puzzle is:\n%s\n", SchemeSmob::to_string(puzzle).c_str());

	// Solve the puzzle
// XXX Right now this test simply does not work.  There's probably
// a bug in the pattern matcher.  It is probably not handling a full
// exploration of the unordered links correctly.  Who knows.
// A simpler but more extended test of unordered links is needed.
	Handle puzzle_solution = bindlink(as, puzzle);
	logger().debug("puzzle solution is %s\n", SchemeSmob::to_string(puzzle_solution).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(puzzle_solution));

	logger().debug("END TEST: %s", __FUNCTION__);
}
