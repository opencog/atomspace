/*
 * tests/scm/MultiAtomSpace.cxxtest
 *
 * Copyright (C) 2009, 2011, 2014 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class MultiAtomSpace :  public CxxTest::TestSuite
{
	private:
		AtomSpace* main_as;
		SchemeEval* evaluator;
		Handle disorder;
		Handle disordered;
		Handle disor_more;

	public:

		MultiAtomSpace(void)
		{
			logger().set_level(Logger::DEBUG);
			logger().set_print_to_stdout_flag(true);
		}

		~MultiAtomSpace()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().get_filename().c_str());
		}

		void setUp(void);
		void tearDown(void);

		void test_two_scm(void);
		void test_three(void);
		void test_load(void);
		void test_nest(void);
		void test_nest_scm(void);
		void test_arg_scm(void);
};

/*
 * This function sets up .. whatever.
 */
#define an as->add_node
#define al as->add_link
void MultiAtomSpace::setUp(void)
{
	main_as = new AtomSpace();
	evaluator = new SchemeEval(main_as);
	evaluator->eval("(add-to-load-path \"..\")");
	evaluator->eval("(add-to-load-path \"../../..\")");
}

void MultiAtomSpace::tearDown(void)
{
	delete evaluator;
	evaluator = NULL;
	delete main_as;
	main_as = NULL;
}

#define CHKERR \
	TSM_ASSERT("Caught scm error during eval", \
		(false == evaluator->eval_error()));
/*
 * Test two atomspaces, both accessed from one evaluator.
 */
void MultiAtomSpace::test_two_scm(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Define an alternate atomspace
	evaluator->eval("(define alt-as (cog-new-atomspace))");
	std::string msg = evaluator->eval("alt-as");
	printf("New atomspace is: %s\n", msg.c_str());

	// Define a function that performs a thunk in the alternate atomspace.
	evaluator->eval("(define (alt-env f) "
   	"(let ((curr-as (cog-set-atomspace! alt-as)) "
		"      (result (f))) "
   	"   (cog-set-atomspace! curr-as) result))");

	msg = evaluator->eval("(cog-atomspace)");
	printf("Primary atomspace is: %s\n", msg.c_str());

	msg = evaluator->eval("(alt-env cog-atomspace)");
	printf("Alternate atomspace is: %s\n", msg.c_str());

	// Populate atomspace with some misc junk
	evaluator->eval("(NumberNode \"42\")");
	evaluator->eval("(VariableNode \"$var\")");

	Handle h1 = evaluator->eval_h("(ConceptNode \"stuff\")");
	CHKERR;

	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h1);
	TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, h1->getType());

	// Create the 'same' ConceptNode in a different atomspace
	Handle h2 = evaluator->eval_h(
		"(alt-env (lambda () (ConceptNode \"stuff\")))");
	CHKERR;

	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h2);
	TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, h2->getType());

	printf ("h1 = %lu %p\n", h1.value(), h1.operator->());
	printf ("h2 = %lu %p\n", h2.value(), h2.operator->());

	// h1 and h2 had better be different.
	TSM_ASSERT("Wrong handles", h1 != h2);

	logger().debug("END TEST: %s", __FUNCTION__);
}

#define CHKEV(ev) \
	TSM_ASSERT("Caught scm error during eval", \
		(false == ev->eval_error()));

void MultiAtomSpace::test_three(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	AtomSpace* as1 = new AtomSpace();
	AtomSpace* as2 = new AtomSpace();
	AtomSpace* as3 = new AtomSpace();
	SchemeEval* ev1 = new SchemeEval(as1);
	SchemeEval* ev2 = new SchemeEval(as2);
	SchemeEval* ev3 = new SchemeEval(as3);

	Handle h1 = ev1->eval_h("(cog-new-node 'ConceptNode \"stuff\")");
	CHKEV(ev1);
	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h1);
	Handle h2 = ev2->eval_h("(cog-new-node 'ConceptNode \"stuff\")");
	CHKEV(ev2);
	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h2);
	Handle h3 = ev3->eval_h("(cog-new-node 'ConceptNode \"stuff\")");
	CHKEV(ev3);
	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h3);

	// We expect the handles to be all different, because they are
	// each in a different atomspace.
	TSM_ASSERT("Bad handles", h1 != h2);
	TSM_ASSERT("Bad handles", h1 != h3);
	TSM_ASSERT("Bad handles", h2 != h3);

	// The cogserver atomspace is a fourth place ...
	Handle h4 = evaluator->eval_h("(ConceptNode \"stuff\")");
	CHKERR;
	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h4);
	TSM_ASSERT("Bad handles", h1 != h4);
	TSM_ASSERT("Bad handles", h2 != h4);
	TSM_ASSERT("Bad handles", h3 != h4);

	Handle h5 = ev2->eval_h("(cog-new-node 'ConceptNode \"solitary\")");
	CHKEV(ev2);
	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != h5);

	// We expect to not be able to find solitary anywhere but in as2
	Handle h6 = ev1->eval_h("(cog-node 'ConceptNode \"solitary\")");
	CHKEV(ev1);
	TSM_ASSERT("Did not expect to find atom", Handle::UNDEFINED == h6);

	Handle h7 = ev3->eval_h("(cog-node 'ConceptNode \"solitary\")");
	CHKEV(ev3);
	TSM_ASSERT("Did not expect to find atom", Handle::UNDEFINED == h7);

	Handle h8 = evaluator->eval_h("(cog-node 'ConceptNode \"solitary\")");
	CHKERR;
	TSM_ASSERT("Did not expect to find atom", Handle::UNDEFINED == h8);

	Handle h9 = ev2->eval_h("(cog-node 'ConceptNode \"solitary\")");
	CHKEV(ev2);
	TSM_ASSERT("Expect to find atom", h5 == h9);

	delete ev3;
	delete ev2;
	delete ev1;
	delete as3;
	delete as2;
	delete as1;
	logger().debug("END TEST: %s", __FUNCTION__);
}

void MultiAtomSpace::test_load(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	AtomSpace* as1 = new AtomSpace();
	AtomSpace* as2 = new AtomSpace();

	SchemeEval* ev1 = new SchemeEval(as1);
	SchemeEval* ev2 = new SchemeEval(as2);
	ev1->eval("(load-from-path \"tests/scm/utils-test.scm\")");
	ev2->eval("(load-from-path \"tests/scm/utils-test.scm\")");

	// The below is a complicated multi-atom-space version of part of 
	// the SCMUtilsUTest suite.  Different atoms in different spaces...
	// Increment a count tv in atomspace 1 ---------------------------------
	ev1->eval("(set! counter (ConceptNode \"asdf\"))");
	Handle counter1 = ev1->eval_h("counter");
	CHKEV(ev1);
	printf ("counter1 = %lu %p\n", counter1.value(), counter1.operator->());

	TSM_ASSERT("Failed to find atom", Handle::UNDEFINED != counter1);
	TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, counter1->getType());

	ev1->eval("(test-incr-cnt)");
	CHKEV(ev1);
	ev1->eval("(test-incr-cnt)");
	CHKEV(ev1);
	ev1->eval("(test-incr-cnt)");
	CHKEV(ev1);
	ev1->eval("(test-incr-cnt)");
	CHKEV(ev1);
	TruthValuePtr tv1 = counter1->getTruthValue();

	TSM_ASSERT_EQUALS("Wrong truth value type", COUNT_TRUTH_VALUE, tv1->getType());
	TSM_ASSERT_EQUALS("wrong count found", 4, (int)(tv1->getCount()));

	// Count tv in atomspace2 should be unscathed. ----------------------------
	ev2->eval("(set! counter (ConceptNode \"asdf\"))");
	Handle counter2 = ev2->eval_h("counter");
	CHKEV(ev2);
	printf ("counter2 = %lu %p\n", counter2.value(), counter2.operator->());

	TSM_ASSERT("Failed to find atom", Handle::UNDEFINED != counter2);
	TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, counter2->getType());

	TSM_ASSERT("Atoms fail to differ", counter1 != counter2);

	ev2->eval("(test-incr-cnt)");
	CHKEV(ev2);

	TruthValuePtr tv2 = counter2->getTruthValue();

	TSM_ASSERT_EQUALS("Wrong truth value type", COUNT_TRUTH_VALUE, tv2->getType());
	TSM_ASSERT_EQUALS("wrong count found", 1, (int)(tv2->getCount()));

	// Count tv in atomspace1 should be unscathed. ----------------------------
	ev1->eval("(set! counter (ConceptNode \"asdf\"))");
	Handle counter3 = ev1->eval_h("counter");
	CHKEV(ev1);
	printf ("counter3 = %lu %p\n", counter3.value(), counter3.operator->());

	TSM_ASSERT("Failed to find atom", Handle::UNDEFINED != counter3);
	TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, counter3->getType());

	TSM_ASSERT("Atoms should be same", counter1 == counter3);

	TruthValuePtr tv3 = counter3->getTruthValue();

	TSM_ASSERT_EQUALS("Wrong truth value type", COUNT_TRUTH_VALUE, tv3->getType());
	TSM_ASSERT_EQUALS("wrong count found", 4, (int)(tv3->getCount()));

	delete ev1;
	delete ev2;
	delete as1;
	delete as2;
	logger().debug("END TEST: %s", __FUNCTION__);
}

// Test the operation of nested atomspaces
void MultiAtomSpace::test_nest(void)
{
	main_as->clear();
	AtomSpace* locas = new AtomSpace(main_as);
	SchemeEval* lev = new SchemeEval(locas);

	// Push some atoms into the main space
	Handle ha = evaluator->eval_h("(ConceptNode \"aaa\")");
	Handle hb = evaluator->eval_h("(ConceptNode \"bbb\")");

	evaluator->eval("(define a (ConceptNode \"aaa\"))");
	evaluator->eval("(define b (ConceptNode \"bbb\"))");

	// Put a link into the local space
	Handle hl = lev->eval_h("(ListLink a b)");

	// The atomspace sizes should be as expected ...
	TSM_ASSERT("Expect two atoms in main atomspace", 2 == main_as->get_size());
	TSM_ASSERT("Expect two nodes in main atomspace", 2 == main_as->get_num_nodes());
	TSM_ASSERT("Expect zero links in main atomspace", 0 == main_as->get_num_links());

	TSM_ASSERT("Expect one atoms in local atomspace", 1 == locas->get_size());
	TSM_ASSERT("Expect zero nodes in local atomspace", 0 == locas->get_num_nodes());
	TSM_ASSERT("Expect one link in local atomspace", 1 == locas->get_num_links());

	// The outgoing set should not be copied, but should be the original.
	TSM_ASSERT("Expect atom a in position 0", ha == hl->getOutgoingAtom(0));
	TSM_ASSERT("Expect atom b in position 1", hb == hl->getOutgoingAtom(1));

	delete lev;
	delete locas;

	// Above deletion should not affect the main atomspace
	TSM_ASSERT("Still two atoms in main atomspace", 2 == main_as->get_size());
	TSM_ASSERT("Still two nodes in main atomspace", 2 == main_as->get_num_nodes());
	TSM_ASSERT("Still zero links in main atomspace", 0 == main_as->get_num_links());

	// The pointer hl should still be alive, even though the atomspace
	// is gone.
	TSM_ASSERT("Still atom a in position 0", ha == hl->getOutgoingAtom(0));
	TSM_ASSERT("Still atom b in position 1", hb == hl->getOutgoingAtom(1));
}

void MultiAtomSpace::test_nest_scm(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Define an alternate atomspace
	evaluator->eval("(define nest-as (cog-new-atomspace (cog-atomspace)))");
	std::string msg = evaluator->eval("nest-as");
	printf("Nested atomspace is: %s\n", msg.c_str());

	// Define a function that performs a thunk in the nested atomspace.
	evaluator->eval("(define (nest-env f) "
   	"(let ((curr-as (cog-set-atomspace! nest-as)) "
		"      (result (f))) "
   	"   (cog-set-atomspace! curr-as) result))");

	msg = evaluator->eval("(cog-atomspace)");
	printf("Primary atomspace is: %s\n", msg.c_str());

	msg = evaluator->eval("(nest-env cog-atomspace)");
	printf("Check nested atomspace is: %s\n", msg.c_str());

	// Populate atomspace with some misc junk
	Handle ha = evaluator->eval_h("(ConceptNode \"aaa-stuff\")");
	CHKERR;
	Handle hb = evaluator->eval_h("(ConceptNode \"bbb-stuff\")");
	CHKERR;

	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != ha);
	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != hb);
	TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, ha->getType());
	TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, hb->getType());

	// Get these same atoms in the nested space
	Handle hna = evaluator->eval_h(
		"(nest-env (lambda () (ConceptNode \"aaa-stuff\")))");
	CHKERR;
	Handle hnb = evaluator->eval_h(
		"(nest-env (lambda () (ConceptNode \"bbb-stuff\")))");
	CHKERR;
	TSM_ASSERT_EQUALS("Expect the same atom", ha, hna);
	TSM_ASSERT_EQUALS("Expect the same atom", hb, hnb);

	// Create a link in the nested atomspace
	Handle hl = evaluator->eval_h(
		"(nest-env (lambda () (ListLink "
		"	(ConceptNode \"aaa-stuff\")"
		"	(ConceptNode \"bbb-stuff\")"
		")))");
	CHKERR;

	// Get these same atoms, again in the nested space
	Handle hpa = evaluator->eval_h(
		"(nest-env (lambda () (ConceptNode \"aaa-stuff\")))");
	CHKERR;
	Handle hpb = evaluator->eval_h(
		"(nest-env (lambda () (ConceptNode \"bbb-stuff\")))");
	CHKERR;
	TSM_ASSERT_EQUALS("Expect the same atom", ha, hpa);
	TSM_ASSERT_EQUALS("Expect the same atom", hb, hpb);

	// The Link should NOT be in the primary atomspace.
	Handle hnol = evaluator->eval_h(
		"(cog-link 'ListLink "
		"	(ConceptNode \"aaa-stuff\")"
		"	(ConceptNode \"bbb-stuff\")"
		")");
	CHKERR;
	TSM_ASSERT_EQUALS("Expect undefined handle", hnol, Handle::UNDEFINED);

	// The Link should be in the nested atomspace.
	Handle hnestl = evaluator->eval_h(
		"(nest-env (lambda () "
		"(cog-link 'ListLink "
		"	(ConceptNode \"aaa-stuff\")"
		"	(ConceptNode \"bbb-stuff\")"
		")))");
	CHKERR;
	TSM_ASSERT_EQUALS("Expect list handle", hnestl, hl);

	// The Link should STILL NOT be in the primary atomspace.
	Handle hsil = evaluator->eval_h(
		"(cog-link 'ListLink "
		"	(ConceptNode \"aaa-stuff\")"
		"	(ConceptNode \"bbb-stuff\")"
		")");
	CHKERR;
	TSM_ASSERT_EQUALS("Expect undefined handle", hsil, Handle::UNDEFINED);

	logger().debug("END TEST: %s", __FUNCTION__);
}

// Very similar to above, but the al atomspace is specified explicitly
// as arg.
void MultiAtomSpace::test_arg_scm(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// Define an alternate atomspace
	evaluator->eval("(define arg-as (cog-new-atomspace (cog-atomspace)))");
	std::string msg = evaluator->eval("arg-as");
	printf("Arg atomspace is: %s\n", msg.c_str());

	// Define a function that performs a thunk in the nested atomspace.
	evaluator->eval("(define (arg-env f) "
   	"(let ((curr-as (cog-set-atomspace! arg-as)) "
		"      (result (f))) "
   	"   (cog-set-atomspace! curr-as) result))");

	msg = evaluator->eval("(cog-atomspace)");
	printf("Primary atomspace is: %s\n", msg.c_str());

	msg = evaluator->eval("(arg-env cog-atomspace)");
	printf("Check arg atomspace is: %s\n", msg.c_str());

	// Populate atomspace with some misc junk
	Handle ha = evaluator->eval_h("(ConceptNode \"aaa-arg-stuff\")");
	CHKERR;
	Handle hb = evaluator->eval_h("(ConceptNode \"bbb-arg-stuff\")");
	CHKERR;

	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != ha);
	TSM_ASSERT("Failed to create atom", Handle::UNDEFINED != hb);
	TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, ha->getType());
	TSM_ASSERT_EQUALS("Wrong atom type", CONCEPT_NODE, hb->getType());

	// Create a link in the arg atomspace
	Handle hl = evaluator->eval_h(
		"(ListLink "
		"	(ConceptNode \"aaa-arg-stuff\")"
		"	(ConceptNode \"bbb-arg-stuff\")"
		"	arg-as)");
	CHKERR;

	// Get these same atoms, again in the nested space
	Handle hpa = evaluator->eval_h(
		"(arg-env (lambda () (ConceptNode \"aaa-arg-stuff\")))");
	CHKERR;
	Handle hpb = evaluator->eval_h(
		"(arg-env (lambda () (ConceptNode \"bbb-arg-stuff\")))");
	CHKERR;
	TSM_ASSERT_EQUALS("Expect the same atom", ha, hpa);
	TSM_ASSERT_EQUALS("Expect the same atom", hb, hpb);

	// The Link should NOT be in the primary atomspace.
	Handle hnol = evaluator->eval_h(
		"(cog-link 'ListLink "
		"	(ConceptNode \"aaa-arg-stuff\")"
		"	(ConceptNode \"bbb-arg-stuff\")"
		")");
	CHKERR;
	TSM_ASSERT_EQUALS("Expect undefined handle", hnol, Handle::UNDEFINED);

	// The Link should be in the nested atomspace.
	Handle hnestl = evaluator->eval_h(
		"(cog-link 'ListLink "
		"	(ConceptNode \"aaa-arg-stuff\")"
		"	(ConceptNode \"bbb-arg-stuff\")"
		"	arg-as)");
	CHKERR;
	TSM_ASSERT_EQUALS("Expect list handle", hnestl, hl);

	// The Link should STILL NOT be in the primary atomspace.
	Handle hsil = evaluator->eval_h(
		"(cog-link 'ListLink "
		"	(ConceptNode \"aaa-arg-stuff\")"
		"	(ConceptNode \"bbb-arg-stuff\")"
		")");
	CHKERR;
	TSM_ASSERT_EQUALS("Expect undefined handle", hsil, Handle::UNDEFINED);

	logger().debug("END TEST: %s", __FUNCTION__);
}

