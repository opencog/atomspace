/*
 * tests/persist/sql/postgres/PersistPGSQLUTest.cxxtest
 *
 * Test AtomSpace persistance.  Assumes BasicSaveUTest is passing.
 *
 * If this test is failing for you, then be sure to read the README in
 * this directory, and also ../../opencong/persist/README, and then
 * create and configure the SQL database as described there. Next,
 * edit ../../lib/test-opencog.conf to add the database credentials
 * (the username and passwd).
 *
 * Copyright (C) 2008, 2009, 2013 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <sys/resource.h>

#include <opencog/atoms/base/Atom.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atoms/base/Node.h>
#include <opencog/truthvalue/SimpleTruthValue.h>
#include <opencog/atomspaceutils/TLB.h>
#include <opencog/atoms/base/atom_types.h>
#include <opencog/persist/sql/postgres/PGAtomStorage.h>
#include <opencog/persist/sql/postgres/PGSQLPersistSCM.h>

#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>

#include <cstdio>

using namespace opencog;

#define HUGE_LINK_SIZE  100000
#define DEEP_LINK_SIZE  1000
#define DEGENERATE_LINK_SIZE  20

class PersistUTest :  public CxxTest::TestSuite
{
    private:
        AtomSpace *_as;
        PGSQLPersistSCM *_pm;
        const char * dbname;
        const char * username;
        const char * passwd;

        NodePtr n1[10];
        NodePtr n2[10];
        NodePtr n3[10];
        NodePtr n4[10];
        LinkPtr l1[10];
        LinkPtr l2[10];
        LinkPtr l3[10];
        Handle h1[10];
        Handle h2[10];
        Handle h3[10];
        Handle h4[10];
        Handle hl1[10];
        Handle hl2[10];
        Handle hl3[10];

    public:

        PersistUTest();
        ~PersistUTest()
        {
            // erase the log file if no assertions failed
            if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().get_filename().c_str());
        }

        void setUp();
        void tearDown();
        void kill_data();

        void friendlyFailMessage()
        {
            TS_FAIL("The PersistUTest failed.\n"
                "This is probably because you do not have SQL installed\n"
                "or configured the way that OpenCog expects.\n\n"
                "SQL persistance is optional for OpenCog, so if you don't\n"
                "want it or need it, just ignore this test failure.\n"
                "Otherwise, please be sure to read opencong/persist/sql/README,\n"
                "and create/configure the SQL database as described there.\n"
                "Next, edit lib/atomspace-test.conf appropriately, so as\n"
                "to indicate the location of your database. If this is\n"
                "done correctly, then this test will pass.\n");
            exit(1);
        }

        void add_to_space(int, AtomSpace *, std::string id);
        void check_space(int, AtomSpace *);
        void check_empty(int, AtomSpace *);

        void test_atomspace();
        void test_huge_links();
        void test_degenerate_deep_links();
        void test_many_deep_links();
};

PersistUTest:: PersistUTest()
{
    try
    {
        config().load("atomspace-test.conf");
    }
    catch (RuntimeException &e)
    {
        std::cerr << e.get_message() << std::endl;
    }
    logger().set_level(Logger::DEBUG);
    logger().set_print_to_stdout_flag(true);

    try {
        // Get the database logins & etc from the config file.
        dbname = config()["TEST_DB_NAME"].c_str();
        username = config()["TEST_DB_USERNAME"].c_str();
        passwd = config()["TEST_DB_PASSWD"].c_str();
    }
    catch (InvalidParamException &e)
    {
        friendlyFailMessage();
    }
}

/*
 * This is called once before each test, for each test (!!)
 */
void PersistUTest::setUp()
{
    _as = new AtomSpace();
    _pm = new PGSQLPersistSCM(_as);

    try {
        _pm->do_open(dbname, username, passwd);
    }
    catch (RuntimeException &e)
    {
        logger().info("setUp: PGSQLPersistSCM cannot connect to database");
        logger().info("  used db = %s, user = %s, passwd = %s", dbname,
                 username, passwd);
        friendlyFailMessage();
        exit(1);
    };

    kill_data();

    // Turn on testing mode. This will cause collisions at a random but
    // fairly frequent interval to test the collision handling as part
    // of this unit test since in the real world, we may never see a
    // collision over 64-bit hashes with our datasets.
    _pm->enable_testing_mode();
}

void PersistUTest::tearDown()
{
    /* Orderly shutdown avoids warning in Potgres log file */
    _pm->do_close();

    delete _pm;
    delete _as;

    kill_data();
}

// ============================================================

void PersistUTest::kill_data()
{
    PGAtomStorage* astore = new PGAtomStorage(dbname, username, passwd);
    if (!astore->connected())
    {
        logger().info("setUp: PGAtomStorage cannot connect to database");
        friendlyFailMessage();
        exit(1);
    }
    logger().info("Connect to \"%s\" as \"%s\" passwd \"%s\"", dbname, username, passwd);

    // Trash the contents of the database.
    astore->kill_data();

    // Destructor also logs out of database (avoid warning in DB log file)
    delete astore;
}

// ============================================================
#define BUFFER_SIZE 240
static void atomCompare(AtomPtr a, AtomPtr b, const char* where)
{
    fprintf(stderr, "Testing at %s\n", where);
    if (NULL == b)
    {
        char error[BUFFER_SIZE];
        snprintf(error, BUFFER_SIZE, "atomCompare - no atom found: %s", where);
        TSM_ASSERT(error, b != NULL);
        return;
    }

    TSM_ASSERT_EQUALS("Type mismatch", a->getType(), b->getType());

    NodePtr na(NodeCast(a));
    NodePtr nb(NodeCast(b));
    if (na and nb)
    {
        TSM_ASSERT_EQUALS("Name mismatch", na->getName(), nb->getName());
    }

    LinkPtr la(LinkCast(a));
    LinkPtr lb(LinkCast(b));
    if (la and lb)
    {
        TSM_ASSERT_EQUALS("Arity mismatch", la->getArity(), lb->getArity());
        if (*la != *lb)
        {
            printf("Mismatching la = %s\n", la->toString().c_str());
            printf("Mismatching lb = %s\n", lb->toString().c_str());
            TSM_ASSERT_EQUALS("Link mis-match", la, lb);
        }
    }

    TruthValuePtr ta = a->getTruthValue();
    TruthValuePtr tb = b->getTruthValue();
    if (ta or tb)
    {
        TSM_ASSERT("Missing truth value", ta);
        TSM_ASSERT("Missing truth value", tb);
        if (ta and tb)
        {
            TSM_ASSERT("Truth value miscompare", (*ta)==(*tb));

            if (not ((*ta) == (*tb)))
            {
                fprintf(stderr, "Error, truth value miscompare, "
                    "ma=%f mb=%f ca=%f cb=%f\n",
                    ta->getMean(), tb->getMean(), ta->getCount(), tb->getCount());
            }
        }
    }
}

// ============================================================

void PersistUTest::add_to_space(int idx, AtomSpace *as, std::string id)
{
    // Create an atom ...
    TruthValuePtr stv(SimpleTruthValue::createTV(0.11, 100+idx));
    h1[idx] = as->add_node(SCHEMA_NODE, id + "fromNode");
    h1[idx]->setTruthValue(stv);
    n1[idx] = NodeCast(h1[idx]);

    TruthValuePtr stv2(SimpleTruthValue::createTV(0.22, 200+idx));
    h2[idx] = as->add_node(SCHEMA_NODE, id + "toNode");
    h2[idx]->setTruthValue(stv2);
    n2[idx] = NodeCast(h2[idx]);

    TruthValuePtr stv3(SimpleTruthValue::createTV(0.33, 300+idx));
    h3[idx] = as->add_node(SCHEMA_NODE, id + "third wheel");
    h3[idx]->setTruthValue(stv3);
    n3[idx] = NodeCast(h3[idx]);

    // The NumberNode will go through the AtomTable clone factory
    // and should thus elicit any errors in clone uuid handling.
    char buf[40]; sprintf(buf, "%f", idx+0.14159265358979);
    h4[idx] = as->add_node(NUMBER_NODE, buf);
    TruthValuePtr stv4(SimpleTruthValue::createTV(0.44, 400+idx));
    h4[idx]->setTruthValue(stv4);
    n4[idx] = NodeCast(h4[idx]);

    HandleSeq hvec;
    hvec.push_back(h1[idx]);
    hvec.push_back(h2[idx]);
    hvec.push_back(h3[idx]);
    hvec.push_back(h4[idx]);

    hl1[idx] = as->add_link(SET_LINK, hvec);
    l1[idx] = LinkCast(hl1[idx]);

    hl2[idx] = as->add_link(LIST_LINK, hl1[idx], h2[idx]);
    l2[idx] = LinkCast(hl2[idx]);

    hl3[idx] = as->add_link(EVALUATION_LINK, h1[idx], hl2[idx], h3[idx]);
    l3[idx] = LinkCast(hl3[idx]);
}

void PersistUTest::check_space(int idx, AtomSpace *space)
{
    Handle hb1 = space->get_handle(n1[idx]->getType(), n1[idx]->getName());
    atomCompare(h1[idx], hb1, "check_space hb1");

    Handle hb2 = space->get_handle(n2[idx]->getType(), n2[idx]->getName());
    atomCompare(h2[idx], hb2, "check_space hb2");

    Handle hb3 = space->get_handle(n3[idx]->getType(), n3[idx]->getName());
    atomCompare(h3[idx], hb3, "check_space hb3");

    Handle hb4 = space->get_handle(n4[idx]->getType(), n4[idx]->getName());
    atomCompare(h4[idx], hb4, "check_space hb4");

    HandleSeq hv1;
    hv1.push_back(hb1);
    hv1.push_back(hb2);
    hv1.push_back(hb3);
    hv1.push_back(hb4);

    //_pm->setPrintStatements();
    //_pm->setPrintStatementsOff();

    Handle hlb1 = space->get_handle(hl1[idx]->getType(), hv1);
    atomCompare(hl1[idx], hlb1, "check_space hlb1");

    HandleSeq hv2({hlb1, hb2});
    Handle hlb2 = space->get_handle(hl2[idx]->getType(), hv2);
    atomCompare(hl2[idx], hlb2, "check_space hlb2");

    HandleSeq hv3({hb1, hlb2, hb3});
    Handle hlb3 = space->get_handle(hl3[idx]->getType(), hv3);
    atomCompare(hl3[idx], hlb3, "check_space hlb3");
}

void PersistUTest::check_empty(int idx, AtomSpace *space)
{
    Handle hb1 = space->get_handle(n1[idx]->getType(), n1[idx]->getName());
    TSM_ASSERT("Should not find this atom", hb1 == Handle::UNDEFINED);

    Handle hb2 = space->get_handle(n2[idx]->getType(), n2[idx]->getName());
    TSM_ASSERT("Should not find this atom", hb2 == Handle::UNDEFINED);

    Handle hb3 = space->get_handle(n3[idx]->getType(), n3[idx]->getName());
    TSM_ASSERT("Should not find this atom", hb3 == Handle::UNDEFINED);

    Handle hb4 = space->get_handle(n4[idx]->getType(), n4[idx]->getName());
    TSM_ASSERT("Should not find this atom", hb4 == Handle::UNDEFINED);

    HandleSeq hvec;
    hvec.push_back(h1[idx]);
    hvec.push_back(h2[idx]);
    hvec.push_back(h3[idx]);
    hvec.push_back(h4[idx]);

    Handle hlb = space->get_handle(hl1[idx]->getType(), hvec);
    TSM_ASSERT("Should not find this atom", hlb == Handle::UNDEFINED);
}

// ============================================================

void PersistUTest::test_atomspace()
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    TSM_ASSERT("Persist Module not loaded", _pm);

    int idx = 0;
    add_to_space(idx++, _as, "AA-aa-wow ");
    add_to_space(idx++, _as, "BB-bb-wow ");
    add_to_space(idx++, _as, "CC-cc-wow ");
    add_to_space(idx++, _as, "DD-dd-wow ");
    add_to_space(idx++, _as, "EE-ee-wow ");

    /* Make sure UTF-8 works fine */
    add_to_space(idx++, _as, "Попытка выбраться вызвала слабый стон ");
    add_to_space(idx++, _as, "はにがうりだそうであってるのかはち ");

    /* Verify that the atoms were added */
    idx = 0;
    check_space(idx++, _as);
    check_space(idx++, _as);
    check_space(idx++, _as);
    check_space(idx++, _as);
    check_space(idx++, _as);

    /* Push all atoms out to the SQL DB */
    _pm->do_store();

    /* Extract atoms from the AtomSpace. This does not delete them from
     * the SQL storage, though; to do that, they must be deleted, not
     * extracted.
     */
    _as->barrier();
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

    /* Verify that the atoms can still be fetched from storage. */
    idx = 0;
    check_space(idx++, _as);
    check_space(idx++, _as);
    check_space(idx++, _as);
    check_space(idx++, _as);
    check_space(idx++, _as);

    /* Do it again, for good luck.  */
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

    /* Verify that the atoms can still be fetched from storage. */
    idx = 0;
    check_space(idx++, _as);
    check_space(idx++, _as);
    check_space(idx++, _as);
    check_space(idx++, _as);
    check_space(idx++, _as);

    /* Kill data for good */
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());
    kill_data();

    /* Verify that the atoms no longer being found. */
    idx = 0;
    check_empty(idx++, _as);
    check_empty(idx++, _as);
    check_empty(idx++, _as);
    check_empty(idx++, _as);
    check_empty(idx++, _as);

    logger().debug("END TEST: %s", __FUNCTION__);
}


void PersistUTest::test_huge_links()
{
return;

    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    TSM_ASSERT("Persist Module not loaded", _pm);

    fprintf(stderr, "testing_huge_links\n");

    fprintf(stderr, "creating nodes\n");
    HandleSeq outgoing;
    outgoing.reserve(HUGE_LINK_SIZE);
    std::string node_prefix("huge out node ");
    for (int node_index = 0; node_index < HUGE_LINK_SIZE; node_index++)
    {
        // Create the name
        std::string node_name = node_prefix;
        node_name += std::to_string(node_index);

        // Now add the outoing node.
        Handle out_node = _as->add_node(SCHEMA_NODE, node_name);
        outgoing.push_back(out_node);
        TSM_ASSERT("Huge link node add failed", out_node);
    }

    fprintf(stderr, "outgoing = ");

    // Make a copy of the uuids.
    std::vector<UUID> outgoing_uuds;
    for (auto& atom : outgoing)
        outgoing_uuds.push_back(TLB::addAtom(atom, TLB::INVALID_UUID));

    // Create the huge list link.
    Handle huge_link = _as->add_link(LINK, outgoing);
    TSM_ASSERT("huge_list_link add failed", huge_link);
    TLB::addAtom(huge_link, TLB::INVALID_UUID);

    // Push all atoms out to the SQL DB
    _pm->do_store();

    // Purge atoms from the AtomSpace.
    _as->barrier();
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

    // Make sure we can reload the large link.

    // Verify that the link can be fetched from storage by the uuid.
    Handle huge_loaded_link = _as->fetch_atom(huge_link);
    TSM_ASSERT("Huge link didn't load by fetch_atom", huge_loaded_link);

    // Purge atoms from the AtomSpace again.
    _as->barrier();
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

    // Now let's try loading by type and outgoing set.

    // Now rebuild the outgoing handles list.
    HandleSeq loaded_outgoing;
    for (auto& uuid : outgoing_uuds)
    {
        Handle outgoing_node = _as->fetch_atom(TLB::getAtom(uuid));
        loaded_outgoing.push_back(outgoing_node);
    }

    // Now verify that the link can be fetched using get_link.
    huge_loaded_link = _as->get_link(LINK, loaded_outgoing);
    TSM_ASSERT("Huge link didn't load by get_link", huge_loaded_link);

    // Kill data for good
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());
    kill_data();

    logger().debug("END TEST: %s", __FUNCTION__);
}


void PersistUTest::test_degenerate_deep_links()
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    TSM_ASSERT("Persist Module not loaded", _pm);

    fprintf(stderr, "test_degenerate_deep_links - depth: %d\n", DEGENERATE_LINK_SIZE);

    fprintf(stderr, "creating nodes\n");

    // Create some nodes to prime level zero.
    Handle node_1 = _as->add_node(SCHEMA_NODE, "deep test depth 0 - 1");
    Handle node_2 = _as->add_node(SCHEMA_NODE, "deep test depth 0 - 2");
    Handle first_out = node_1;
    Handle second_out = node_2;

    HandleSeq links;
    links.reserve(DEGENERATE_LINK_SIZE);
    _pm->resetQueryCount();
    for (int depth = 0; depth < DEGENERATE_LINK_SIZE; depth++)
    {
        fprintf(stderr, "  creating node at depth %d\n", depth);

        // Now add the link chaining the last two links together.
        Handle link = _as->add_link(LINK, first_out, second_out);
        TSM_ASSERT("Many deep links add_link failed", link);
        links.emplace_back(link);

        // Chain the links
        second_out = first_out;
        first_out = link;
    }

    fprintf(stderr, "after create - query count: %d \n", _pm->queryCount());

    TLB::addAtom(first_out, TLB::INVALID_UUID);

    // Make a copy of the uuids.
    std::vector<UUID> link_uuds;
    for (auto& atom : links)
        link_uuds.push_back(TLB::addAtom(atom, TLB::INVALID_UUID));

    // Push all atoms out to the SQL DB
    _pm->resetQueryCount();
    _pm->do_store();
    fprintf(stderr, "storing nodes - query count: %d \n", _pm->queryCount());

    // Purge atoms from the AtomSpace.
    _as->barrier();
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

    // Just for sanity. Show the normal load.
    _pm->resetQueryCount();
    _pm->do_load();
    fprintf(stderr, "load optimized - query count: %d \n", _pm->queryCount());

    // Purge atoms from the AtomSpace.
    _as->barrier();
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

    // Now let's try loading all the links recursively by just
    // fetching the last one.
    _pm->resetQueryCount();
    Handle link = _as->fetch_atom(first_out);
    TSM_ASSERT("Many deep links fetch_atom for last link failed", link);
    fprintf(stderr, "fetch last node - query count: %d \n", _pm->queryCount());

    // Purge atoms from the AtomSpace.
    _as->barrier();
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

    // Now let's try loading all the links one by one.

    // Fetch each of the links by UUID.
    _pm->resetQueryCount();
    for (auto& uuid : link_uuds)
    {
        Handle link = _as->fetch_atom(TLB::getAtom(uuid));
        TSM_ASSERT("Many deep links fetch_atom failed", link);
    }
    fprintf(stderr, "fetch all nodes - query count: %d \n", _pm->queryCount());

    logger().debug("END TEST: %s", __FUNCTION__);
}


void PersistUTest::test_many_deep_links()
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    TSM_ASSERT("Persist Module not loaded", _pm);

    fprintf(stderr, "test_many_deep_links - depth: %d\n", DEEP_LINK_SIZE);

    fprintf(stderr, "creating nodes\n");

    // Create some nodes to prime level zero.
    Handle node_1 = _as->add_node(SCHEMA_NODE, "deep test depth 0 - 1");
    Handle node_2 = _as->add_node(SCHEMA_NODE, "deep test depth 0 - 2");
    Handle first_out = node_1;

    HandleSeq links;
    links.reserve(DEEP_LINK_SIZE);
    _pm->resetQueryCount();
    for (int depth = 0; depth < DEEP_LINK_SIZE; depth++)
    {
        // Now add the link chaining the last link together with node 2.
        Handle link = _as->add_link(LINK, first_out, node_2);
        TSM_ASSERT("Many deep links add_link failed", link);
        links.emplace_back(link);

        // Chain the links
        first_out = link;
    }

    fprintf(stderr, "after create - query count: %d \n", _pm->queryCount());

    TLB::addAtom(first_out, TLB::INVALID_UUID);

    // Make a copy of the uuids.
    std::vector<UUID> link_uuds;
    for (auto& atom : links)
        link_uuds.push_back(TLB::addAtom(atom, TLB::INVALID_UUID));

    // Push all atoms out to the SQL DB
    _pm->resetQueryCount();
    _pm->do_store();
    fprintf(stderr, "storing nodes - query count: %d \n", _pm->queryCount());

    // Purge atoms from the AtomSpace.
    _as->barrier();
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

    // Just for sanity. Show the normal load.
    _pm->resetQueryCount();
    _pm->do_load();
    fprintf(stderr, "load optimized - query count: %d \n", _pm->queryCount());

    // Purge atoms from the AtomSpace.
    _as->barrier();
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

    // Now let's try loading all the links recursively by just
    // fetching the last one.
    _pm->resetQueryCount();
    Handle link = _as->fetch_atom(first_out);
    TSM_ASSERT("Many deep links fetch_atom for last link failed", link);
    fprintf(stderr, "fetch last node - query count: %d \n", _pm->queryCount());

    // Purge atoms from the AtomSpace.
    _as->barrier();
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

    // Now let's try loading all the links one by one.

    // Fetch each of the links by UUID.
    _pm->resetQueryCount();
    for (auto& uuid : link_uuds)
    {
        Handle link = _as->fetch_atom(TLB::getAtom(uuid));
        TSM_ASSERT("Many deep links fetch_atom failed", link);
    }
    fprintf(stderr, "fetch all nodes - query count: %d \n", _pm->queryCount());

    logger().debug("END TEST: %s", __FUNCTION__);
}


/* ============================= END OF FILE ================= */
