/*
 * tests/persist/sql/multi-driver/BasicSaveUTest.cxxtest
 *
 * Most basic, simplest sniff test, saves and restores a few atoms.
 *
 * If this test is failing for you, then be sure to read the README in
 * this directory, and also ../../opencong/persist/README, and then
 * create and configure the SQL database as described there. Next,
 * edit ../../lib/test-opencog.conf to add the database credentials
 * (the username and passwd).
 *
 * Copyright (C) 2008, 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#include <cstdio>

#include <opencog/atoms/base/Atom.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atoms/base/Node.h>
#include <opencog/atoms/atom_types/atom_types.h>
#include <opencog/atoms/truthvalue/SimpleTruthValue.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/persist/sql/multi-driver/SQLAtomStorage.h>

#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>

#include "mkuri.h"

using namespace opencog;

class BasicSaveUTest :  public CxxTest::TestSuite
{
    private:
        std::string uri;
        const char * dbname;
        const char * username;
        const char * passwd;

        Handle n1[10];
        Handle n2[10];
        Handle n3[10];
        Handle n4[10];
        Handle   l[10];
        AtomPtr a1[10];
        AtomPtr a2[10];
        AtomPtr a3[10];
        AtomPtr a4[10];
        AtomPtr al[10];

    public:

        BasicSaveUTest(void)
        {
            try
            {
                config().load("atomspace-test.conf");
            }
            catch (RuntimeException &e)
            {
                std::cerr << e.get_message() << std::endl;
            }

            logger().set_level(Logger::DEBUG);
            logger().set_print_to_stdout_flag(true);

            try {
                // Get the database logins & etc from the config file.
                dbname = config().get("TEST_DB_NAME", "opencog_test").c_str();
                username = config().get("TEST_DB_USERNAME", "opencog_tester").c_str();
                passwd = config().get("TEST_DB_PASSWD", "cheese").c_str();
            }
            catch (InvalidParamException &e)
            {
                friendlyFailMessage(false);
            }
        }

        ~BasicSaveUTest()
        {
            // erase the log file if no assertions failed
            if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().get_filename().c_str());
        }

        void setUp(void);
        void tearDown(void);

        void friendlyFailMessage(bool ts)
        {
            const char * fail = "The BasicSaveUTest failed.\n"
                "This is probably because you do not have SQL installed\n"
                "or configured the way that OpenCog expects.\n\n"
                "SQL persistence is optional for OpenCog, so if you don't\n"
                "want it or need it, just ignore this test failure.\n"
                "Otherwise, please be sure to read opencong/persist/sql/README,\n"
                "and create/configure the SQL database as described there.\n"
                "Next, edit lib/atomspace-test.conf appropriately, so as\n"
                "to indicate the location of your database. If this is\n"
                "done correctly, then this test will pass.\n";

            if (ts)
                TS_FAIL(fail);
            else
                fprintf(stderr, "%s", fail);
            exit(1);
        }

        SQLAtomStorage *astore;
        void single_atom_save_restore(std::string id);
        void add_to_table(int, AtomTable *, std::string id);
        void check_table(int, AtomTable *, std::string id);

        void do_test_single_atom(void);
        void do_test_fresh_atom(void);
        void do_test_table(void);

        void test_pq_single_atom(void);
        void test_pq_fresh_atom(void);
        void test_pq_table(void);

        void test_odbc_single_atom(void);
        void test_odbc_fresh_atom(void);
        void test_odbc_table(void);
};

/*
 * This is called once before each test, for each test (!!)
 */
void BasicSaveUTest::setUp(void)
{
}

void BasicSaveUTest::tearDown(void)
{
}

void BasicSaveUTest::test_odbc_single_atom(void)
{
#if HAVE_ODBC_STORAGE
	uri = mkuri("odbc", dbname, username, passwd);
	do_test_single_atom();
#endif
}
void BasicSaveUTest::test_odbc_fresh_atom(void)
{
#if HAVE_ODBC_STORAGE
	uri = mkuri("odbc", dbname, username, passwd);
	do_test_fresh_atom();
#endif
}
void BasicSaveUTest::test_odbc_table(void)
{
#if HAVE_ODBC_STORAGE
	uri = mkuri("odbc", dbname, username, passwd);
	do_test_table();
#endif
}

void BasicSaveUTest::test_pq_single_atom(void)
{
#if HAVE_PGSQL_STORAGE
	uri = mkuri("postgres", dbname, username, passwd);
	do_test_single_atom();
#endif // HAVE_PGSQL_STORAGE
}
void BasicSaveUTest::test_pq_fresh_atom(void)
{
#if HAVE_PGSQL_STORAGE
	uri = mkuri("postgres", dbname, username, passwd);
	do_test_fresh_atom();
#endif // HAVE_PGSQL_STORAGE
}
void BasicSaveUTest::test_pq_table(void)
{
#if HAVE_PGSQL_STORAGE
	uri = mkuri("postgres", dbname, username, passwd);
	do_test_table();
#endif // HAVE_PGSQL_STORAGE
}

// ============================================================

static void atomCompare(AtomPtr a, AtomPtr b, const char* where)
{
    printf("Testing at %s\n", where);
    TSM_ASSERT("No atom found", b != NULL);
    if (NULL == b) return;

    TSM_ASSERT_EQUALS("Type mismatch", a->get_type(), b->get_type());

    NodePtr na(NodeCast(a));
    NodePtr nb(NodeCast(b));
    if (na and nb)
    {
        TSM_ASSERT_EQUALS("Name mismatch", na->get_name(), nb->get_name());
    }

    LinkPtr la(LinkCast(a));
    LinkPtr lb(LinkCast(b));
    if (la and lb)
    {
        TSM_ASSERT_EQUALS("Arity mismatch", la->get_arity(), lb->get_arity());
        if (*la != *lb)
        {
            printf("Mismatching la = %s\n", la->to_string().c_str());
            printf("Mismatching lb = %s\n", lb->to_string().c_str());
            TSM_ASSERT_EQUALS("Link mis-match", la, lb);
        }
    }

    TruthValuePtr ta = a->getTruthValue();
    TruthValuePtr tb = b->getTruthValue();
    if (ta or tb)
    {
        TSM_ASSERT("Missing truth value", ta);
        TSM_ASSERT("Missing truth value", tb);
        if (ta and tb)
        {
            TSM_ASSERT("Truth value miscompare", (*ta)==(*tb));

            if (not ((*ta) == (*tb)))
            {
                fprintf(stderr, "Error, truth value miscompare, "
                    "ma=%f mb=%f ca=%f cb=%f\n",
                    ta->get_mean(), tb->get_mean(), ta->get_count(), tb->get_count());
            }
        }
    }
}

// ============================================================
/**
 * A simple test case that tests the save and restore of
 * a couple of nodes and a link. Does not test atomtable/atomspace at all.
 */
void BasicSaveUTest::single_atom_save_restore(std::string id)
{
    SQLAtomStorage *store = new SQLAtomStorage(uri);
    store->open();
    if (!store->connected())
    {
        logger().debug("single_atom_save_restore: cannot connect to db");
        return;
    }

    // Create an atom ...
    AtomPtr a(createNode(SCHEMA_NODE, id + "someNode"));
    TruthValuePtr stv(SimpleTruthValue::createTV(0.55, 0.6));
    a->setTruthValue(stv);

    Handle h = a->get_handle();

    TSM_ASSERT("Bad Handle", nullptr != h);

    // Store the atom ...
    store->storeAtom(h, true);
    store->barrier();

    // Fetch it back ...
    std::string nam = id + "someNode";
    Handle b = store->getNode(SCHEMA_NODE, nam.c_str());

    // Are they equal ??
    atomCompare(a, b, "Single node save-restore");

    // Create a second atom, connect it to the first
    // with a link. Save it, fetch it ... are they equal?
    AtomPtr a2(createNode(SCHEMA_NODE, id + "otherNode"));
    store->storeAtom(a2->get_handle(), true);

    HandleSeq hvec;
    hvec.push_back(a->get_handle());
    hvec.push_back(a2->get_handle());

    Handle l(createLink(hvec, LIST_LINK));
    store->storeAtom(l->get_handle(), true);
    store->barrier();

    Handle hl = store->getLink(LIST_LINK, hvec);
    atomCompare(l, hl, "Single link save-restore");

    store->kill_data();
    delete store;
}

// ============================================================

void BasicSaveUTest::add_to_table(int idx, AtomTable *table, std::string id)
{
    // Create an atom ...
    n1[idx] = createNode(SCHEMA_NODE, id + "fromNode");
    TruthValuePtr stv(SimpleTruthValue::createTV(0.11, 1.0/(100.0+idx)));
    n1[idx]->setTruthValue(stv);
    n1[idx] = table->add(n1[idx]);
    a1[idx] = n1[idx];

    n2[idx] = createNode(SCHEMA_NODE, id + "toNode");
    TruthValuePtr stv2(SimpleTruthValue::createTV(0.22, 1.0/(200.0+idx)));
    n2[idx]->setTruthValue(stv2);
    n2[idx] = table->add(n2[idx]);
    a2[idx] = n2[idx];

    // ODBC fails when there is a question mark in the text.
    // Sad but painfully true.
    std::string qmark = "? ";
    n3[idx] = createNode(SCHEMA_NODE, qmark + id + "third ? wheel");

    // We need to test crazy-large and crazy-small float point values.
    TruthValuePtr stv3(SimpleTruthValue::createTV(1.0e33/3.0, (1.0e-30)/(300.0+idx)));
    n3[idx]->setTruthValue(stv3);
    n3[idx] = table->add(n3[idx]);
    a3[idx] = n3[idx];

    // The NumberNode will go through the AtomTable clone factory
    // and should thus elicit any errors in clone uuid handling.
    char buf[40]; sprintf(buf, "%f", idx+0.14159265358979);
    n4[idx] = createNode(NUMBER_NODE, buf);

    // We need to test crazy-large and crazy-small float point values.
    TruthValuePtr stv4(SimpleTruthValue::createTV((4.0e-200)/9.0, 1.0e40/(400.0+idx)));
    n4[idx]->setTruthValue(stv4);
    n4[idx] = table->add(n4[idx]);
    a4[idx] = n4[idx];

    HandleSeq hvec;
    hvec.push_back(a1[idx]->get_handle());
    hvec.push_back(a2[idx]->get_handle());
    hvec.push_back(a3[idx]->get_handle());
    hvec.push_back(a4[idx]->get_handle());

    l[idx] = createLink(hvec, SET_LINK);
    l[idx] = table->add(l[idx]);
    al[idx] = l[idx];
}

void BasicSaveUTest::check_table(int idx, AtomTable *table, std::string id)
{
    Handle hb1 = table->getHandle(Handle(n1[idx]));
    atomCompare(a1[idx], hb1, "check_table hb1");

    Handle hb2 = table->getHandle(Handle(n2[idx]));
    atomCompare(a2[idx], hb2, "check_table hb2");

    Handle hb3 = table->getHandle(Handle(n3[idx]));
    atomCompare(a3[idx], hb3, "check_table hb3");

    Handle hb4 = table->getHandle(Handle(n4[idx]));
    atomCompare(a4[idx], hb4, "check_table hb4");

    HandleSeq hvec;
    hvec.push_back(hb1);
    hvec.push_back(hb2);
    hvec.push_back(hb3);
    hvec.push_back(hb4);

    Handle lb(createLink(hvec, SET_LINK));
    Handle hlb = table->getHandle(lb);
    atomCompare(al[idx], hlb, "check_table hlb");
}

// ============================================================

void BasicSaveUTest::do_test_single_atom(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    astore = new SQLAtomStorage(uri);
    astore->open();
    if (!astore->connected())
    {
        logger().info("setUp: cannot connect to database");
        friendlyFailMessage(true);
        exit(1);
    }
    logger().info("Connecting to \"%s\"", uri.c_str());

    // Trash the contents of the database.
    astore->kill_data();
    single_atom_save_restore("aaa ");
    single_atom_save_restore("bbb ");
    single_atom_save_restore("ccc ");
    single_atom_save_restore("ddd ");
    single_atom_save_restore("eee ");
    single_atom_save_restore("$$$ ");

    astore->kill_data();
    delete astore;
    logger().debug("END TEST: %s", __FUNCTION__);
}

void BasicSaveUTest::do_test_fresh_atom(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    SQLAtomStorage *store = new SQLAtomStorage(uri);
    store->open();
    if (!store->connected())
    {
        logger().debug("test_fresh_atom: cannot connect to db");
        return;
    }

    Handle ha(createNode(CONCEPT_NODE, "electrical"));
    Handle hb(createNode(CONCEPT_NODE, "energy"));

    // Store a ListLink with stuff in it.
    Handle lf(createLink(LIST_LINK, ha, hb));
    lf->setTruthValue(SimpleTruthValue::createTV(0.55, 0.6));
    store->storeAtom(lf, true);

    // Store an empty ListLink.
    Handle le(createLink(HandleSeq(), LIST_LINK));
    le->setTruthValue(SimpleTruthValue::createTV(0.1, 0.9));
    store->storeAtom(le, true);
    store->barrier();

    // Now get them back.  Get empty after full.
    Handle hf(store->getLink(LIST_LINK, {ha, hb}));
    atomCompare(lf, hf, "Fully Fresh");

    Handle he(store->getLink(LIST_LINK, HandleSeq()));

    printf("Expecting %s\n", le->to_string().c_str());

    if (he) printf("Got %s\n", he->to_string().c_str());
    atomCompare(le, he, "Empty Fresh");

    store->kill_data();
    delete store;

    logger().debug("END TEST: %s", __FUNCTION__);
}

void BasicSaveUTest::do_test_table()
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    SQLAtomStorage *store = new SQLAtomStorage(uri);
    store->open();
    if (!store->connected())
    {
        logger().debug("test_table: cannot connect to db");
        return;
    }

    AtomTable *table1 = new AtomTable();
    int idx = 0;
    add_to_table(idx++, table1, "AA-aa-wow ");
    add_to_table(idx++, table1, "BB-bb-wow ");
    add_to_table(idx++, table1, "CC-cc-wow ");
    add_to_table(idx++, table1, "DD-dd-wow ");
    add_to_table(idx++, table1, "EE-ee-wow ");

    store->storeAtomSpace(*table1);
    // table1->print();
    delete store;
    delete table1;

    // Reopen connection, and load the atom table.
    store = new SQLAtomStorage(uri);
    store->open();
    TSM_ASSERT("Not connected to database", store->connected());

    AtomTable *table2 = new AtomTable();

    store->loadAtomSpace(*table2);
    store->barrier();
    // table2->print();

    idx = 0;
    check_table(idx++, table2, "aaa ");
    check_table(idx++, table2, "bbb ");
    check_table(idx++, table2, "ccc ");
    check_table(idx++, table2, "ddd ");
    check_table(idx++, table2, "eee ");

    store->kill_data();
    delete store;
    delete table2;
    logger().debug("END TEST: %s", __FUNCTION__);
}

/* ============================= END OF FILE ================= */
