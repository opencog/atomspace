/*
 * tests/persist/sql/multi-driver/FetchUTest.cxxtest
 *
 * Test atom fetch semantics.  Assumes PersistUTest is passing.
 *
 * If this test is failing for you, then be sure to read the README in
 * this directory, and also ../../opencong/persist/README, and then
 * create and configure the SQL database as described there. Next,
 * edit ../../lib/test-opencog.conf to add the database credentials
 * (the username and passwd).
 *
 * Copyright (C) 2017 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cstdio>

#include <opencog/atoms/base/atom_types.h>
#include <opencog/atoms/base/Atom.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/persist/sql/multi-driver/SQLAtomStorage.h>
#include <opencog/truthvalue/SimpleTruthValue.h>

#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>

#include "mkuri.h"

using namespace opencog;

class FetchUTest :  public CxxTest::TestSuite
{
	private:
		std::string uri;
		const char * dbname;
		const char * username;
		const char * passwd;
		std::string sql_open;

		AtomSpace *_as;
		SchemeEval *eval;

	public:

		FetchUTest(void);
		~FetchUTest()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().get_filename().c_str());
		}

		void setUp(void);
		void tearDown(void);
		void kill_data(void);

		void friendlyFailMessage()
		{
			TS_FAIL("The FetchUTest failed.\n"
				"This is probably because you do not have SQL installed\n"
				"or configured the way that OpenCog expects.\n\n"
				"SQL persistance is optional for OpenCog, so if you don't\n"
				"want it or need it, just ignore this test failure.\n"
				"Otherwise, please be sure to read opencong/persist/sql/README,\n"
				"and create/configure the SQL database as described there.\n"
				"Next, edit lib/atomspace-test.conf appropriately, so as\n"
				"to indicate the location of your database. If this is\n"
				"done correctly, then this test will pass.\n");
			exit(1);
		}

		void atomCompare(AtomPtr, AtomPtr, std::string);
		void test_stuff(void);
};

FetchUTest::FetchUTest(void)
{
	try
	{
		config().load("atomspace-test.conf");
	}
	catch (RuntimeException &e)
	{
		std::cerr << e.get_message() << std::endl;
	}
	logger().set_level(Logger::DEBUG);
	logger().set_print_to_stdout_flag(true);

	try {
		// Get the database logins & etc from the config file.
      dbname = config().get("TEST_DB_NAME", "opencog_test").c_str();
      username = config().get("TEST_DB_USERNAME", "opencog_tester").c_str();
      passwd = config().get("TEST_DB_PASSWD", "cheese").c_str();

		// use postgres preferentially, unless its missing.
#ifdef HAVE_ODBC_STORAGE
		uri = mkuri("odbc", dbname, username, passwd);
#endif
#ifdef HAVE_PGSQL_STORAGE
		uri = mkuri("postgres", dbname, username, passwd);
#endif

		sql_open = "(sql-open \"" + uri + "\")\n";
	}
	catch (InvalidParamException &e)
	{
		friendlyFailMessage();
	}
}

/*
 * This is called once before each test, for each test (!!)
 */
void FetchUTest::setUp(void)
{
	_as = new AtomSpace();
	eval = SchemeEval::get_evaluator(_as);
	kill_data();

	// eval->eval(R"((add-to-load-path "/usr/local/share/opencog/scm"))");
	// eval->eval("(use-modules (opencog))");

	// WTF ... Module loading fails without this; but why is this
	// even needed ???
   eval->eval(R"((setenv "LTDL_LIBRARY_PATH" (if (getenv "LTDL_LIBRARY_PATH") (string-append (getenv "LTDL_LIBRARY_PATH") ":/usr/local/lib/opencog") "/usr/local/lib/opencog")))");

}

void FetchUTest::tearDown(void)
{
	delete _as;
	// kill_data();
}

// ============================================================

void FetchUTest::kill_data(void)
{
	SQLAtomStorage* astore = new SQLAtomStorage(uri);
	if (!astore->connected())
	{
		logger().info("setUp: SQLAtomStorage cannot connect to database");
		friendlyFailMessage();
		exit(1);
	}
	logger().info("Delete data in \"%s\" as \"%s\" passwd \"%s\"", dbname, username, passwd);

	// Trash the contents of the database.
	astore->kill_data();

	// Destructor also logs out of database (avoid warning in DB log file)
	delete astore;
}

// ============================================================

void FetchUTest::atomCompare(AtomPtr a, AtomPtr b, std::string where)
{
	printf("Check %s expect %s\n", where.c_str(), a->toString().c_str());
	TSM_ASSERT("No atom found", b != nullptr);

	if (nullptr == b) return;

	TSM_ASSERT_EQUALS("Type mismatch", a->getType(), b->getType());

	NodePtr na(NodeCast(a));
	NodePtr nb(NodeCast(b));
	if (na and nb)
	{
		TSM_ASSERT_EQUALS("Name mismatch", na->getName(), nb->getName());
	}

	LinkPtr la(LinkCast(a));
	LinkPtr lb(LinkCast(b));
	if (la and lb)
	{
		TSM_ASSERT_EQUALS("Arity mismatch", la->getArity(), lb->getArity());
		if (*la != *lb)
		{
			printf("Mismatching la = %s\n", la->toString().c_str());
			printf("Mismatching lb = %s\n", lb->toString().c_str());
			TSM_ASSERT_EQUALS("Link mis-match", la, lb);
		}
	}

	TruthValuePtr ta = a->getTruthValue();
	TruthValuePtr tb = b->getTruthValue();
	if (ta or tb)
	{
		TSM_ASSERT("Missing truth value", ta);
		TSM_ASSERT("Missing truth value", tb);
		if (ta and tb)
		{
			TSM_ASSERT("Truth value miscompare", (*ta)==(*tb));

			if (not ((*ta) == (*tb)))
			{
				fprintf(stderr, "Error, truth value miscompare, "
					"ma=%f mb=%f ca=%f cb=%f\n",
					ta->getMean(), tb->getMean(), ta->getCount(), tb->getCount());
			}
		}
	}
}

// ============================================================

void FetchUTest::test_stuff(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// First, initialize the database
	eval->eval("(use-modules (opencog persist) (opencog persist-sql))");
	eval->eval(sql_open);
	eval->eval(R"((cog-set-tv! (Concept "AAA") (stv 0.1 0.11)))");
	eval->eval(R"((cog-set-tv! (Concept "BBB") (stv 0.2 0.22)))");
	eval->eval("(sql-store)");
	eval->eval("(sql-close)");

	delete _as;
	_as = new AtomSpace();
	eval = SchemeEval::get_evaluator(_as);
	eval->eval(sql_open);
	eval->eval(R"((fetch-atom (List (Concept "AAA") (Concept "BBB"))))");

	// The above should NOT update the TV of (Concept "AAA")
	TruthValuePtr tv = eval->eval_tv(R"((cog-tv (Concept "AAA")))");
	printf("Expecting default, got %s\n", tv->toString().c_str());
	TruthValuePtr dtv = TruthValue::DEFAULT_TV();
	TS_ASSERT((*tv) == (*dtv));

	// If we fetch the TV explicitly, then we should get the
	// value from the database.
	eval->eval(R"((fetch-atom (Concept "AAA")))");
	tv = eval->eval_tv(R"((cog-tv (Concept "AAA")))");
	TruthValuePtr etv = SimpleTruthValue::createTV(0.1, 0.11);
	TS_ASSERT((*tv) == (*etv));

	// Update A.
	eval->eval(R"((cog-set-tv! (Concept "AAA") (stv 0.3 0.33)))");

	// Saving everything should not crash.  It should, however,
	// change the TV on (Concept "BBB") back to DEFAULT_TV.
	eval->eval("(sql-store)");
	eval->eval("(sql-close)");

	delete _as;
	_as = new AtomSpace();
	eval = SchemeEval::get_evaluator(_as);
	eval->eval(sql_open);

	// AAA should have been update, as above.
	eval->eval(R"((fetch-atom (Concept "AAA")))");
	tv = eval->eval_tv(R"((cog-tv (Concept "AAA")))");
	etv = SimpleTruthValue::createTV(0.3, 0.33);
	TS_ASSERT((*tv) == (*etv));

	// BBB should have been clobbered.
	eval->eval(R"((fetch-atom (Concept "BBB")))");
	tv = eval->eval_tv(R"((cog-tv (Concept "BBB")))");
	TS_ASSERT((*tv) == (*dtv));
	printf("Expecting %s\n", dtv->toString().c_str());
	printf("Got %s\n", tv->toString().c_str());

	logger().debug("END TEST: %s", __FUNCTION__);
}

/* ============================= END OF FILE ================= */
