/*
 * tests/persist/sql/multi-driver/PersistUTest.cxxtest
 *
 * Test AtomSpace persistance.  Assumes BasicSaveUTest is passing.
 *
 * If this test is failing for you, then be sure to read the README in
 * this directory, and also ../../opencong/persist/README, and then
 * create and configure the SQL database as described there. Next,
 * edit ../../lib/test-opencog.conf to add the database credentials
 * (the username and passwd).
 *
 * Copyright (C) 2008, 2009, 2013 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cstdio>

#include <opencog/atoms/base/atom_types.h>
#include <opencog/atoms/base/Atom.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atoms/base/Node.h>
#include <opencog/truthvalue/SimpleTruthValue.h>
#include <opencog/persist/sql/multi-driver/SQLAtomStorage.h>
#include <opencog/persist/sql/multi-driver/SQLPersistSCM.h>

#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>

#include "mkuri.h"

using namespace opencog;

class PersistUTest :  public CxxTest::TestSuite
{
    private:
        AtomSpace *_as;
        std::string uri;
        const char * dbname;
        const char * username;
        const char * passwd;

        NodePtr n1[10];
        NodePtr n2[10];
        NodePtr n3[10];
        NodePtr n4[10];
        LinkPtr l[10];
        LinkPtr l2[10];
        LinkPtr l3[10];
        Handle h1[10];
        Handle h2[10];
        Handle h3[10];
        Handle h4[10];
        Handle hl[10];
        Handle hl2[10];
        Handle hl3[10];

    public:

        PersistUTest(void);
        ~PersistUTest()
        {
            // erase the log file if no assertions failed
            if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().get_filename().c_str());
        }

        void setUp(void);
        void tearDown(void);
        void kill_data(void);

        void friendlyFailMessage()
        {
            TS_FAIL("The PersistUTest failed.\n"
                "This is probably because you do not have SQL installed\n"
                "or configured the way that OpenCog expects.\n\n"
                "SQL persistance is optional for OpenCog, so if you don't\n"
                "want it or need it, just ignore this test failure.\n"
                "Otherwise, please be sure to read opencong/persist/sql/README,\n"
                "and create/configure the SQL database as described there.\n"
                "Next, edit lib/atomspace-test.conf appropriately, so as\n"
                "to indicate the location of your database. If this is\n"
                "done correctly, then this test will pass.\n");
            exit(1);
        }

        void add_to_space(int, AtomSpace *, std::string id);
        void fetch_space(int, AtomSpace *);
        void check_space(int, AtomSpace *, std::string dbgmsg);
        void check_empty(int, AtomSpace *);
        void atomCompare(AtomPtr, AtomPtr, std::string);

        void do_test_atomspace(void);
        void test_odbc_atomspace(void);
        void test_pq_atomspace(void);
};

PersistUTest:: PersistUTest(void)
{
    try
    {
        config().load("atomspace-test.conf");
    }
    catch (RuntimeException &e)
    {
        std::cerr << e.get_message() << std::endl;
    }
    logger().set_level(Logger::DEBUG);
    logger().set_print_to_stdout_flag(true);

    try {
        // Get the database logins & etc from the config file.
        dbname = config().get("TEST_DB_NAME", "opencog_test").c_str();
        username = config().get("TEST_DB_USERNAME", "opencog_tester").c_str();
        passwd = config().get("TEST_DB_PASSWD", "cheese").c_str();
    }
    catch (InvalidParamException &e)
    {
        friendlyFailMessage();
    }
}

/*
 * This is called once before each test, for each test (!!)
 */
void PersistUTest::setUp(void)
{
    _as = new AtomSpace();
}

void PersistUTest::tearDown(void)
{
    delete _as;

    kill_data();
}

// ============================================================

void PersistUTest::kill_data(void)
{
#if HAVE_ODBC_STORAGE
    if ("" == uri) uri = mkuri("odbc", dbname, username, passwd);
#endif
#if HAVE_PGSQL_STORAGE
    if ("" == uri) uri = mkuri("postgres", dbname, username, passwd);
#endif
    SQLAtomStorage* astore = new SQLAtomStorage(uri);
    if (!astore->connected())
    {
        logger().info("setUp: SQLAtomStorage cannot connect to database");
        friendlyFailMessage();
        exit(1);
    }
    logger().info("Delete data in \"%s\" as \"%s\" passwd \"%s\"", dbname, username, passwd);

    // Trash the contents of the database.
    astore->kill_data();

    // Destructor also logs out of database (avoid warning in DB log file)
    delete astore;
}

// ============================================================

void PersistUTest::atomCompare(AtomPtr a, AtomPtr b, std::string where)
{
    printf("Check %s expect %s\n", where.c_str(), a->toString().c_str());
    TSM_ASSERT("No atom found", b != nullptr);

    if (nullptr == b) return;

    TSM_ASSERT_EQUALS("Type mismatch", a->getType(), b->getType());

    NodePtr na(NodeCast(a));
    NodePtr nb(NodeCast(b));
    if (na and nb)
    {
        TSM_ASSERT_EQUALS("Name mismatch", na->getName(), nb->getName());
    }

    LinkPtr la(LinkCast(a));
    LinkPtr lb(LinkCast(b));
    if (la and lb)
    {
        TSM_ASSERT_EQUALS("Arity mismatch", la->getArity(), lb->getArity());
        if (*la != *lb)
        {
            printf("Mismatching la = %s\n", la->toString().c_str());
            printf("Mismatching lb = %s\n", lb->toString().c_str());
            TSM_ASSERT_EQUALS("Link mis-match", la, lb);
        }
    }

    TruthValuePtr ta = a->getTruthValue();
    TruthValuePtr tb = b->getTruthValue();
    if (ta or tb)
    {
        TSM_ASSERT("Missing truth value", ta);
        TSM_ASSERT("Missing truth value", tb);
        if (ta and tb)
        {
            TSM_ASSERT("Truth value miscompare", (*ta)==(*tb));

            if (not ((*ta) == (*tb)))
            {
                fprintf(stderr, "Error, truth value miscompare, "
                    "ma=%f mb=%f ca=%f cb=%f\n",
                    ta->getMean(), tb->getMean(), ta->getCount(), tb->getCount());
            }
        }
    }
}

// ============================================================

void PersistUTest::add_to_space(int idx, AtomSpace *as, std::string id)
{
    // Create an atom ...
    TruthValuePtr stv(SimpleTruthValue::createTV(0.11, 100+idx));
    h1[idx] = as->add_node(SCHEMA_NODE, id + "fromNode");
    h1[idx]->setTruthValue(stv);
    n1[idx] = NodeCast(h1[idx]);

    TruthValuePtr stv2(SimpleTruthValue::createTV(0.22, 200+idx));
    h2[idx] = as->add_node(SCHEMA_NODE, id + "toNode");
    h2[idx]->setTruthValue(stv2);
    n2[idx] = NodeCast(h2[idx]);

    TruthValuePtr stv3(SimpleTruthValue::createTV(0.33, 300+idx));
    h3[idx] = as->add_node(SCHEMA_NODE, id + "third wheel");
    h3[idx]->setTruthValue(stv3);
    n3[idx] = NodeCast(h3[idx]);

    // The NumberNode will go through the AtomTable clone factory
    // and should thus elicit any errors in clone uuid handling.
    char buf[40]; sprintf(buf, "%f", idx+0.14159265358979);
    h4[idx] = as->add_node(NUMBER_NODE, buf);
    TruthValuePtr stv4(SimpleTruthValue::createTV(0.44, 400+idx));
    h4[idx]->setTruthValue(stv4);
    n4[idx] = NodeCast(h4[idx]);

    HandleSeq hvec;
    hvec.push_back(h1[idx]);
    hvec.push_back(h2[idx]);
    hvec.push_back(h3[idx]);
    hvec.push_back(h4[idx]);

    // Note that SetLink is an unordered link.
    hl[idx] = as->add_link(SET_LINK, hvec);
    l[idx] = LinkCast(hl[idx]);

    hl2[idx] = as->add_link(LIST_LINK, hl[idx], h2[idx]);
    l2[idx] = LinkCast(hl2[idx]);

    hl3[idx] = as->add_link(EVALUATION_LINK, h1[idx], hl2[idx], h3[idx]);
    l3[idx] = LinkCast(hl3[idx]);
}

void PersistUTest::fetch_space(int idx, AtomSpace *space)
{
    AtomPtr ab1 = createNode(n1[idx]->getType(), n1[idx]->getName());
    Handle hb1(ab1->getHandle());
    space->fetch_atom(hb1);

    AtomPtr ab2 = createNode(n2[idx]->getType(), n2[idx]->getName());
    Handle hb2(ab2->getHandle());
    space->fetch_atom(hb2);

    AtomPtr ab3 = createNode(n3[idx]->getType(), n3[idx]->getName());
    Handle hb3(ab3->getHandle());
    space->fetch_atom(hb3);

    AtomPtr ab4 = createNode(n4[idx]->getType(), n4[idx]->getName());
    Handle hb4(ab4->getHandle());
    space->fetch_atom(hb4);

    HandleSeq hvec;
    hvec.push_back(hb1);
    hvec.push_back(hb2);
    hvec.push_back(hb3);
    hvec.push_back(hb4);

    AtomPtr alb = createLink(hvec, hl[idx]->getType());
    Handle hlb(alb->getHandle());
    space->fetch_atom(hlb);

    HandleSeq hv2({hlb, hb2});
    AtomPtr alb2 = createLink(hv2, hl2[idx]->getType());
    Handle hlb2(alb2->getHandle());
    space->fetch_atom(hlb2);

    HandleSeq hv3({hb1, hlb2, hb3});
    AtomPtr alb3 = createLink(hv3, hl3[idx]->getType());
    Handle hlb3(alb3->getHandle());
    space->fetch_atom(hlb3);
}

void PersistUTest::check_space(int idx, AtomSpace *space, std::string dbgmsg)
{
    Handle hb1 = space->get_handle(n1[idx]->getType(), n1[idx]->getName());
    atomCompare(h1[idx], hb1, dbgmsg + "-hb1");

    Handle hb2 = space->get_handle(n2[idx]->getType(), n2[idx]->getName());
    atomCompare(h2[idx], hb2, dbgmsg + "-hb2");

    Handle hb3 = space->get_handle(n3[idx]->getType(), n3[idx]->getName());
    atomCompare(h3[idx], hb3, dbgmsg + "-hb3");

    Handle hb4 = space->get_handle(n4[idx]->getType(), n4[idx]->getName());
    atomCompare(h4[idx], hb4, dbgmsg + "-hb4");

    HandleSeq hvec;
    hvec.push_back(hb1);
    hvec.push_back(hb2);
    hvec.push_back(hb3);
    hvec.push_back(hb4);

    Handle hlb = space->get_handle(hl[idx]->getType(), hvec);
    atomCompare(hl[idx], hlb, dbgmsg + "-hlinkb");

    HandleSeq hv2({hlb, hb2});
    Handle hlb2 = space->get_handle(hl2[idx]->getType(), hv2);
    atomCompare(hl2[idx], hlb2, dbgmsg + "-hlinkb2");

    HandleSeq hv3({hb1, hlb2, hb3});
    Handle hlb3 = space->get_handle(hl3[idx]->getType(), hv3);
    atomCompare(hl3[idx], hlb3, dbgmsg + "-hlinkb3");
}

void PersistUTest::check_empty(int idx, AtomSpace *space)
{
    Handle hb1 = space->get_handle(n1[idx]->getType(), n1[idx]->getName());
    TSM_ASSERT("Should not find this atom", hb1 == Handle::UNDEFINED);

    Handle hb2 = space->get_handle(n2[idx]->getType(), n2[idx]->getName());
    TSM_ASSERT("Should not find this atom", hb2 == Handle::UNDEFINED);

    Handle hb3 = space->get_handle(n3[idx]->getType(), n3[idx]->getName());
    TSM_ASSERT("Should not find this atom", hb3 == Handle::UNDEFINED);

    Handle hb4 = space->get_handle(n4[idx]->getType(), n4[idx]->getName());
    TSM_ASSERT("Should not find this atom", hb4 == Handle::UNDEFINED);

    HandleSeq hvec;
    hvec.push_back(h1[idx]);
    hvec.push_back(h2[idx]);
    hvec.push_back(h3[idx]);
    hvec.push_back(h4[idx]);

    Handle hlb = space->get_handle(hl[idx]->getType(), hvec);
    TSM_ASSERT("Should not find this atom", hlb == Handle::UNDEFINED);
}

// ============================================================

void PersistUTest::test_odbc_atomspace(void)
{
#ifdef HAVE_ODBC_STORAGE
    uri = mkuri("odbc", dbname, username, passwd);
    do_test_atomspace();
#endif
}

void PersistUTest::test_pq_atomspace(void)
{
#ifdef HAVE_PGSQL_STORAGE
    uri = mkuri("postgres", dbname, username, passwd);
    do_test_atomspace();
#endif
}

void PersistUTest::do_test_atomspace(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    SQLPersistSCM* _pm = new SQLPersistSCM(_as);
    TSM_ASSERT("Persist Module not loaded", _pm);

    try {
        _pm->do_open(uri);
    }
    catch (RuntimeException &e)
    {
        logger().info("setUp: SQLPersistSCM cannot connect to database");
        friendlyFailMessage();
        exit(1);
    };

    kill_data();

    int idx = 0;
    add_to_space(idx++, _as, "AA-aa-wow ");
    add_to_space(idx++, _as, "BB-bb-wow ");
    add_to_space(idx++, _as, "CC-cc-wow ");
    add_to_space(idx++, _as, "DD-dd-wow ");
    add_to_space(idx++, _as, "EE-ee-wow ");

    /* Make sure UTF-8 works fine. */
    add_to_space(idx++, _as, "Попытка выбраться вызвала слабый стон ");
    add_to_space(idx++, _as, "はにがうりだそうであってるのかはち ");
    add_to_space(idx++, _as, "係拉丁字母");

    /* Verify that the atoms were added */
    int i;
    for (i=0; i<idx; i++)
        check_space(i, _as, "verify-add");

    /* Push all atoms out to the SQL DB */
    _pm->do_store();

    /* Extract atoms from the AtomSpace. This does not delete them from
     * the SQL storage, though; to do that, they must be deleted, not
     * extracted.
     */
    _as->barrier();
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

    /* Verify that the atoms can still be fetched from storage. */
    for (i=0; i<idx; i++) {
        fetch_space(i, _as);
        check_space(i, _as, "verify-fetch");
    }

    /* Do it again, for good luck.  */
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

    /* Verify that the atoms can still be fetched from storage. */
    for (i=0; i<idx; i++) {
        fetch_space(i, _as);
        check_space(i, _as, "ver-again");
    }

    /* Kill data for good */
    _as->clear();
    TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());
    kill_data();

    /* Verify that the atoms are no longer being found. */
    for (i=0; i<idx; i++)
        check_empty(i, _as);

    /* Orderly shutdown avoids warning in Postgres log file. */
    _pm->do_close();

    delete _pm;
    logger().debug("END TEST: %s", __FUNCTION__);
}

/* ============================= END OF FILE ================= */
