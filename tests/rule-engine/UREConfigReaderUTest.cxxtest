#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>

#include <opencog/rule-engine/UREConfigReader.h>

using namespace opencog;

class UREConfigReaderUTest : public CxxTest::TestSuite {
private:
	AtomSpace _as;
	SchemeEval _eval;

public:
	UREConfigReaderUTest() : _eval(&_as)
	{
		// Module loading is borked from the C++ environment, so
		// add the following paths so that utilities.scm is found.
		_eval.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "/opencog/scm\")");
		_eval.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "/opencog/scm/opencog\")");
		_eval.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "/opencog/scm/opencog/rule-engine\")");

		_eval.eval("(add-to-load-path \"..\")");
		_eval.eval("(add-to-load-path \"../../..\")");
		_eval.eval("(use-modules (opencog) (opencog query))");

		// Load the simple crisp system example to test it
		std::string eval_output =
			_eval.eval("(load \"" PROJECT_SOURCE_DIR
			           "/tests/rule-engine/fc.scm\")");
		std::cout << "eval_output = " << eval_output << std::endl;

		std::cout << "AtomSpace = " << _as << std::endl;
	}

	~UREConfigReaderUTest()
	{
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
int rc = CxxTest::TestTracker::tracker().suiteFailed();
_exit(rc); // XXX hack to avoid double-free in __run_exit_handlers
	}

	void test_read_config()
	{
		// Get the ConceptNode corresponding to the rule-based system
		// to test
		Handle rbs = _as.get_node(CONCEPT_NODE, "fc-rule-base");

		UREConfigReader cr(_as, rbs);

		TS_ASSERT_EQUALS(cr.get_rules().size(), 2);
		TS_ASSERT_EQUALS(cr.get_attention_allocation(), false);
		TS_ASSERT_EQUALS(cr.get_maximum_iterations(), 20);
	}
};
