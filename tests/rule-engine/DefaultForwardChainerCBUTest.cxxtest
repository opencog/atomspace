#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>
#include <opencog/rule-engine/forwardchainer/FCMemory.h>
#include <opencog/rule-engine/URECommons.h>
#include <opencog/rule-engine/UREConfigReader.h>
#include <opencog/rule-engine/forwardchainer/DefaultForwardChainerCB.h>

using namespace opencog;

class DefaultForwardChainerCBUTest: public CxxTest::TestSuite {
private:
    AtomSpace as;
    SchemeEval eval;

public:
    DefaultForwardChainerCBUTest(void) : eval(&as)
    {
        config().set("SCM_PRELOAD", "opencog/atomspace/core_types.scm, "
                     "opencog/scm/utilities.scm, opencog/scm/av-tv.scm");
        load_scm_files_from_config(as);

        eval.eval("(load-from-path \"" PROJECT_SOURCE_DIR
                  "/tests/rule-engine/bc-config-2.scm\")");
    }

    void setUp(void);
    void tearDown(void);
    void test_choose_rule(void);
    void test_choose_source(void);
    void test_apply_rule(void);
};

void DefaultForwardChainerCBUTest::setUp()
{
}

void DefaultForwardChainerCBUTest::tearDown()
{
}

void DefaultForwardChainerCBUTest::test_choose_rule(void)
{
    logger().setPrintToStdoutFlag(true);
    logger().setLevel(Logger::DEBUG);

    Handle top_rbs = as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
    UREConfigReader cr(as, top_rbs);

    FCMemory fcmem(&as);
    fcmem.set_rules(cr.get_rules());
    TS_ASSERT_EQUALS(2, fcmem.get_rules().size());
    Handle h = eval.eval_h(
	    "(InheritanceLink (ConceptNode \"cat\")(ConceptNode \"animal\"))");
    TS_ASSERT_DIFFERS(h, Handle::UNDEFINED);
    fcmem.set_source(h);
    DefaultForwardChainerCB dfcb(as);
    vector<Rule*> rule = dfcb.choose_rules(fcmem);
    TS_ASSERT_EQUALS(2, rule.size()); //since bc-modus-ponens variables are untyped, they are matched to h
    HandleSeq bindlinks;
    as.get_handles_by_type(back_inserter(bindlinks), BIND_LINK);
    auto it = find(bindlinks.begin(), bindlinks.end(), rule[0]->get_handle());
    TS_ASSERT_DIFFERS(it, bindlinks.end());
}

void DefaultForwardChainerCBUTest::test_choose_source(void)
{
    config().set("SCM_PRELOAD", "tests/rule-engine/simple-assertions.scm");
    load_scm_files_from_config(as);

    Handle source = eval.eval_h("(ConceptNode \"Einstein\")");
    FCMemory fcmem(&as);
    fcmem.set_source(source);
    DefaultForwardChainerCB dfcb(as);
    HandleSeq hs = dfcb.choose_premises(fcmem);
    TS_ASSERT(5 == hs.size());
}

void DefaultForwardChainerCBUTest::test_apply_rule(void)
{
    //Apply rule x and see if all the inferences made
    //are a direct result of source being part of input/premise
    config().set(
            "SCM_PRELOAD",
            "tests/rule-engine/bc-deduction.scm,"
            "tests/rule-engine/simple-assertions.scm");
    load_scm_files_from_config(as);

    Handle rule_handle = eval.eval_h("(MemberLink"
                                     "   pln-rule-deduction-name"
                                     "   (ConceptNode \"URE\"))");
    vector<Rule*> rules { new Rule(rule_handle) };
    Handle source = eval.eval_h(R"((ConceptNode "Socrates"))");

    FCMemory fcmem(&as);
    fcmem.set_search_in_af(false);
    fcmem.set_rules(rules);
    fcmem.set_cur_rule(rules[0]);
    fcmem.set_source(source);

    DefaultForwardChainerCB dfcb(as);
    HandleSeq hs = dfcb.apply_rule(fcmem);

    TS_ASSERT_EQUALS(1,hs.size());

    URECommons urec(as);
    TS_ASSERT(urec.exists_in(hs[0],source));

}
