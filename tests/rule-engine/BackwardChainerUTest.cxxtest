/*
 * BackwardChainerUTest.cxxtest
 *
 *  Created on: Oct 20, 2014
 *      Authors: misgana
 ^             : Nil Geisweiller (2015-2016)
 */
#include <opencog/rule-engine/backwardchainer/BackwardChainer.h>
#include <opencog/rule-engine/backwardchainer/BackwardChainerPMCB.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/pattern/PatternLink.h>
#include <opencog/util/mt19937ar.h>

#include <cxxtest/TestSuite.h>

using namespace std;
using namespace opencog;

//#define DEBUG 1

#define al _as.add_link
#define an _as.add_node

class BackwardChainerUTest: public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _eval;
	BackwardChainer* _bc;

	void reset_bc();

public:
	BackwardChainerUTest() : _eval(&_as)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_timestamp_flag(false);
		// logger().set_sync_flag(true);
		// logger().set_print_to_stdout_flag(true);
		randGen().seed(0);
	}

	void setUp();
	void tearDown();

	void test_select_rule_1();
	void test_select_rule_2();
	void test_select_rule_3();
	void test_deduction();
	void test_deduction_tv_query();
	void test_modus_ponens_tv_query();
	void test_conjunction_fuzzy_evaluation_tv_query();
	void test_conditional_instantiation_1();
	void test_conditional_instantiation_2();
	void test_conditional_instantiation_tv_query();
	void test_conditional_partial_instantiation();
	void test_impossible_criminal();
	void test_criminal();
	void test_criminal_trace();
	// TODO: re-enable the following tests
	void test_induction();
	void test_focus_set();
};

void BackwardChainerUTest::setUp()
{
	string cur_pp_dir = string(PROJECT_SOURCE_DIR),
		cur_p_dir = cur_pp_dir + "/tests",
		cur_dir = cur_p_dir + "/rule-engine";
	vector<string> load_paths = {cur_pp_dir, cur_p_dir, cur_dir};
	for (string& p : load_paths)
	{
		string eval_str = string("(add-to-load-path \"") + p + string("\")");
		_eval.eval(eval_str);
	}
	_eval.eval("(use-modules (opencog))");
	_eval.eval("(use-modules (opencog rule-engine))");
	_eval.eval("(use-modules (opencog logger))");
}

void BackwardChainerUTest::tearDown()
{
	_as.clear();
}

void BackwardChainerUTest::reset_bc()
{
	delete(_bc);
	_as.clear();

	string eval_result =
		_eval.eval("(load-from-path \"tests/rule-engine/bc-config.scm\")");

	// std::cout << "eval_result = " << eval_result << std::endl;

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	_bc = new BackwardChainer(_as, top_rbs, Handle::UNDEFINED);
}

// Test select rule with a target with no variable
void BackwardChainerUTest::test_select_rule_1()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	reset_bc();

	Handle target_h = _eval.eval_h("(Inheritance"
	                               "   (Concept \"A\")"
	                               "   (Concept \"B\"))");
	BITNode target(target_h);

	RuleTypedSubstitutionPair selected_rule = _bc->select_rule(target);

	TS_ASSERT_EQUALS(selected_rule.first.get_name(), "bc-deduction-rule");
}

// Test select rule with a target with variables
void BackwardChainerUTest::test_select_rule_2()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	reset_bc();

	Handle target_h = _eval.eval_h("(Inheritance"
	                               "   (Concept \"A\")"
	                               "   (Variable \"$X\"))");
	BITNode target(target_h);

	RuleTypedSubstitutionPair selected_rule = _bc->select_rule(target);

	TS_ASSERT_EQUALS(selected_rule.first.get_name(), "bc-deduction-rule");
}

// Test select rule with a target with variables with the same name as
// the variable in the rule.
void BackwardChainerUTest::test_select_rule_3()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	reset_bc();

	Handle target_h = _eval.eval_h("(Variable \"$C\")"),
		vardecl_h = _eval.eval_h("(TypedVariable"
		                         "   (Variable \"$C\")"
		                         "   (Type \"InheritanceLink\"))");
	BITNode target(target_h);

	RuleTypedSubstitutionPair selected_rule = _bc->select_rule(target, vardecl_h);

	TS_ASSERT_EQUALS(selected_rule.first.get_name(), "bc-deduction-rule");
}

void BackwardChainerUTest::test_deduction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/bc-deduction-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/bc-transitive-closure.scm\")");
	randGen().seed(0);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	Handle X = an(VARIABLE_NODE, "$X"),
		D = an(CONCEPT_NODE, "D"),
		target = al(INHERITANCE_LINK, X, D);

	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(10);
	bc.do_chain();

	Handle results = bc.get_results(),
		A = an(CONCEPT_NODE, "A"),
		B = an(CONCEPT_NODE, "B"),
		C = an(CONCEPT_NODE, "C"),
		CD = al(INHERITANCE_LINK, C, D),
		BD = al(INHERITANCE_LINK, B, D),
		AD = al(INHERITANCE_LINK, A, D),
		expected = al(SET_LINK, CD, BD, AD);

	logger().debug() << "results = " << results->toString();
	logger().debug() << "expected = " << expected->toString();

	TS_ASSERT_EQUALS(results, expected);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_deduction_tv_query()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/bc-deduction-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/bc-transitive-closure.scm\")");
	randGen().seed(0);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	Handle target = _eval.eval_h("(Inheritance"
	                             "   (Concept \"A\")"
	                             "   (Concept \"D\"))");

	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(10);
	bc.do_chain();

	TS_ASSERT_DELTA(target->getTruthValue()->getMean(), 1, 1e-10);
	TS_ASSERT_DELTA(target->getTruthValue()->getConfidence(), 1, 1e-10);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_modus_ponens_tv_query()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/bc-modus-ponens-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/modus-ponens-example.scm\")");
	randGen().seed(0);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	Handle target = an(PREDICATE_NODE, "T");

	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(40);
	bc.do_chain();

	TS_ASSERT_DELTA(target->getTruthValue()->getMean(), 1, 1e-10);
	TS_ASSERT_DELTA(target->getTruthValue()->getConfidence(), 1, 1e-10);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_conjunction_fuzzy_evaluation_tv_query()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	string result = _eval.eval("(load-from-path \"tests/rule-engine/fuzzy-conjunction-introduction-config.scm\")");
	logger().debug() << "result = " << result;
	result = _eval.eval("(load-from-path \"tests/rule-engine/simple-conjunction.scm\")");
	randGen().seed(0);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle P = an(PREDICATE_NODE, "P"),
		Q = an(PREDICATE_NODE, "Q"),
		A = an(CONCEPT_NODE, "A"),
		B = an(CONCEPT_NODE, "B"),
		P_A = al(EVALUATION_LINK, P, A),
		Q_B = al(EVALUATION_LINK, Q, B),
		target = al(AND_LINK, P_A, Q_B);

	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(2);
	bc.do_chain();

	TS_ASSERT_DELTA(target->getTruthValue()->getMean(), 0.4, 1e-6);
	TS_ASSERT_DELTA(target->getTruthValue()->getConfidence(), 0.2, 1e-6);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_conditional_instantiation_1()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	string result = _eval.eval("(load-from-path \"tests/rule-engine/conditional-instantiation-config.scm\")");

	logger().debug() << "result = " << result;

	result = _eval.eval("(load-from-path \"tests/rule-engine/friends.scm\")");
	randGen().seed(0);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle are_friends = an(PREDICATE_NODE, "are-friends"),
		john = an(CONCEPT_NODE, "John"),
		mary = an(CONCEPT_NODE, "Mary"),
		edward = an(CONCEPT_NODE, "Edward"),
		cyril = an(CONCEPT_NODE, "Cyril");
	auto friend_with_john = [&](const Handle& h) {
		return al(EVALUATION_LINK, are_friends, al(LIST_LINK, h, john));
	};
	Handle target_var = an(VARIABLE_NODE, "$who"),
		target = friend_with_john(target_var),
		vardecl = al(VARIABLE_LIST,
		             al(TYPED_VARIABLE_LINK,
		                target_var, an(TYPE_NODE, "ConceptNode")));

	BackwardChainer bc(_as, top_rbs, target, vardecl);
	bc.get_config().set_maximum_iterations(40);
	bc.do_chain();

	Handle results = bc.get_results(),
		expected = al(SET_LINK,
		              friend_with_john(mary),
		              friend_with_john(edward),
		              friend_with_john(cyril));

	logger().debug() << "results = " << results->toString();
	logger().debug() << "expected = " << expected->toString();

	TS_ASSERT_EQUALS(results, expected);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_conditional_instantiation_2()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	string result = _eval.eval("(load-from-path \"tests/rule-engine/conditional-instantiation-config.scm\")");
	logger().debug() << "result = " << result;
	_eval.eval("(load-from-path \"tests/rule-engine/animals.scm\")");
	randGen().seed(0);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle green = an(CONCEPT_NODE, "green"),
		Fritz = an(CONCEPT_NODE, "Fritz"),
		what = an(VARIABLE_NODE, "$what"),
		target = al(INHERITANCE_LINK, what, green),
		concept = an(TYPE_NODE, "ConceptNode"),
		vardecl = al(TYPED_VARIABLE_LINK, what, concept);

	BackwardChainer bc(_as, top_rbs, target, vardecl);
	bc.get_config().set_maximum_iterations(20);
	bc.do_chain();

	Handle results = bc.get_results(),
		expected = al(SET_LINK, al(INHERITANCE_LINK, Fritz, green));

	logger().debug() << "results = " << results->toString();
	logger().debug() << "expected = " << expected->toString();

	TS_ASSERT_EQUALS(results, expected);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_conditional_instantiation_tv_query()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/conditional-instantiation-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/animals.scm\")");
	randGen().seed(500);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle target =
	    _eval.eval_h("(InheritanceLink"
	                 "   (ConceptNode \"Fritz\")"
	                 "   (ConceptNode \"green\"))");

	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(20);
	bc.do_chain();

	TS_ASSERT_DELTA(target->getTruthValue()->getMean(), 1, .1);
	TS_ASSERT_DELTA(target->getTruthValue()->getConfidence(), 1, .1);

	logger().debug("END TEST: %s", __FUNCTION__);
}

// This test is for rules that requires the pattern matcher to look
// inside a variable declaration, to for instance extract the type of
// some variable. For instance if you have the grounded data
//
// ImplicationScopeLink
//   VariableList
//     TypedVariable
//       Variable "$X"
//       Type "ConceptNode"
//     TypedVariable
//       Variable "$Y"
//       Type "PredicateNode"
//   <implicant>
//   <implicand>
//
// the conditional-partial-instantiation-meta-rule will want to look
// inside the scope link's vardecl and know that $X is of type
// ConceptNode and $Y is of type PredicateNode. In order to do that it
// requires to write a pattern describing the variable declaration,
// thus having the type itself be a variable, like
//
// BindLink
//   VariableList
//     TypedVariable
//       Variable "$XVar"
//       Type "VariableNode"
//     TypedVariable
//       Variable "$XType"
//       Type "TypeNode"
//   Quote
//     ScopeLink
//       Unquote
//         VariableList
//           TypedVariable
//             Variable "$XVar"
//             Variable "$XType"
//         ...
void BackwardChainerUTest::test_conditional_partial_instantiation()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	string result = _eval.eval("(load-from-path \"tests/rule-engine/conditional-partial-instantiation-config.scm\")");

	logger().debug() << "result = " << result;

	result = _eval.eval("(load-from-path \"tests/rule-engine/friends.scm\")");
	randGen().seed(0);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle target = _eval.eval_h("(ImplicationScope"
	                             "   (TypedVariable"
	                             "      (Variable \"$X\")"
	                             "      (Type \"ConceptNode\"))"
	                             "   (And"
	                             "      (Evaluation"
	                             "         (Predicate \"are-friends\")"
	                             "         (List"
	                             "            (Variable \"$X\")"
	                             "            (Concept \"John\")))"
	                             "      (Evaluation"
	                             "         (Predicate \"are-friends\")"
	                             "         (List"
	                             "            (Concept \"John\")"
	                             "            (Concept \"Mary\")))"
	                             "      (Evaluation"
	                             "         (Predicate \"is-musician\")"
	                             "         (Variable \"$X\"))"
	                             "      (Evaluation"
	                             "         (Predicate \"is-musician\")"
	                             "         (Concept \"John\"))"
	                             "      (Evaluation"
	                             "         (Predicate \"is-musician\")"
	                             "         (Concept \"Mary\")))"
	                             "   (Evaluation"
	                             "      (Predicate \"are-friends\")"
	                             "      (List"
	                             "         (Variable \"$X\")"
	                             "         (Concept \"Mary\"))))");

	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(5);
	bc.do_chain();

	TS_ASSERT_DELTA(target->getTruthValue()->getMean(), 1, 1e-10);
	TS_ASSERT_DELTA(target->getTruthValue()->getConfidence(), 1, 1e-10);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_impossible_criminal()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/bc-criminal-without-deduction-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/criminal.scm\")");
	randGen().seed(0);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle target =
	    _eval.eval_h("(InheritanceLink"
	                 "   (VariableNode \"$who\")"
	                 "   (ConceptNode \"criminal\"))");
	Handle vardecl =
	    _eval.eval_h("(TypedVariable"
	                 "   (VariableNode \"$who\")"
	                 "   (Type \"ConceptNode\"))");
	Handle soln = _eval.eval_h("(ConceptNode \"West\")");

	// Should NOT be possible to find the solution without deduction
	// rule, as it won't be able to tell that missile@123 is a weapon.
	BackwardChainer bc(_as, top_rbs, target, vardecl);
	// See bc-criminal-config.scm to change the number of iterations
	bc.do_chain();

	Handle results = bc.get_results(),
		expected = al(SET_LINK, HandleSeq());

	logger().debug() << "results = " << results->toString();
	logger().debug() << "expected = " << expected->toString();

	TS_ASSERT_EQUALS(results, expected);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_criminal()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/bc-criminal-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/criminal.scm\")");
	randGen().seed(0);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle target_var = _eval.eval_h("(VariableNode \"$who\")");
	Handle target =
		_eval.eval_h("(InheritanceLink"
		             "   (VariableNode \"$who\")"
		             "   (ConceptNode \"criminal\"))");
	Handle vardecl =
	    _eval.eval_h("(TypedVariable"
	                 "   (VariableNode \"$who\")"
	                 "   (Type \"ConceptNode\"))");
	Handle soln = _eval.eval_h("(ConceptNode \"West\")");

	BackwardChainer bc(_as, top_rbs, target, vardecl);
	// See bc-criminal-config.scm to change the number of iterations
	bc.do_chain();

	Handle results = bc.get_results(),
		expected_target =  _eval.eval_h("(InheritanceLink"
		                                "   (ConceptNode \"West\")"
		                                "   (ConceptNode \"criminal\"))"),
		expected = al(SET_LINK, expected_target);

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	// Disable that till fixed
	TS_ASSERT_EQUALS(results, expected);
	TS_ASSERT_LESS_THAN(0.9, expected_target->getTruthValue()->getMean());
	TS_ASSERT_LESS_THAN(0.9, expected_target->getTruthValue()->getConfidence());
	// TS_ASSERT(true);

	logger().debug("END TEST: %s", __FUNCTION__);
}

// Like test_criminal but the trace is provided for guidance (thus
// speeding up the inference tremendously.)
//
// WARNING: this test is dependent on the hash algorithm. If the latter
// changes, then the trace must be updated.
void BackwardChainerUTest::test_criminal_trace()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/bc-criminal-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/criminal.scm\")");
	randGen().seed(0);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle target_var = _eval.eval_h("(VariableNode \"$who\")");
	Handle target =
		_eval.eval_h("(InheritanceLink"
		             "   (VariableNode \"$who\")"
		             "   (ConceptNode \"criminal\"))");
	Handle vardecl =
	    _eval.eval_h("(TypedVariable"
	                 "   (VariableNode \"$who\")"
	                 "   (Type \"ConceptNode\"))");
	Handle soln = _eval.eval_h("(ConceptNode \"West\")");

	// Warning: if the hash algorithm changes you need to update the
	// trace. To do that, run test_criminal() with DEBUG log level,
	// then apply the following on the obtained opencog.log (make sure
	// that you have deleted the old opencog.log before running
	// test_crimila())
	//
	// <ATOMSPACE_ROOT>/scripts/rule-engine/extract-bc-trace.py <FCS_SOLUTION> opencog.log > opencog-<FCS_SOLUTION>.log
	// <ATOMSPACE_ROOT>/scripts/rule-engine/extract-values-from-trace.py opencog-<FCS_SOLUTION>.log > <FCS_SOLUTION>.trace
	//
	// where <FCS_SOLUTION> is the hash value of the FCS solving the
	// criminal test.
	//
	// Don't forget to happen U at the end of each value otherwise gcc
	// is gonna complain.
	std::set<ContentHash> trace{
		17025922688105268679U, 16237370205818075250U, 13060619487639450045U,
			14172591710384300158U, 14741649033484653578U, 11564898315305997225U};
	AndBITFitness trace_fitness(AndBITFitness::Trace, trace);
	BackwardChainer bc(_as, top_rbs, target, vardecl, nullptr,
	                   Handle::UNDEFINED, BITNodeFitness(), trace_fitness);
	bc.get_config().set_maximum_iterations(50);
	bc.do_chain();

	Handle results = bc.get_results(),
		expected_target =  _eval.eval_h("(InheritanceLink"
		                                "   (ConceptNode \"West\")"
		                                "   (ConceptNode \"criminal\"))"),
		expected = al(SET_LINK, expected_target);

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	// Disable that till fixed
	TS_ASSERT_EQUALS(results, expected);
	TS_ASSERT_LESS_THAN(0.9, expected_target->getTruthValue()->getMean());
	TS_ASSERT_LESS_THAN(0.9, expected_target->getTruthValue()->getConfidence());
	// TS_ASSERT(true);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_induction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	string load_bc_induction_config_result =
		_eval.eval("(load-from-path \"tests/rule-engine/bc-induction-config.scm\")");

	string load_bc_induction_result =
		_eval.eval("(load-from-path \"tests/rule-engine/bc-induction.scm\")");

	randGen().seed(500);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle target = _eval.eval_h("bc-induction-target");

	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(100);
	bc.do_chain();

	// TODO: fixme, for that we need to support BIT expansion over meta rule
	// TS_ASSERT_DELTA(target->getTruthValue()->getMean(), 1, 1e-10);
	// TODO: determine the expected confidence, which depends on the
	// number of instances the induction is based on
	// TS_ASSERT_DELTA(target->getTruthValue()->getConfidence(), 1, 1e-10);
	TS_ASSERT(true);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_focus_set()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/conditional-instantiation-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/animals.scm\")");
	randGen().seed(500);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle green = an(CONCEPT_NODE, "green"),
		Fritz = an(CONCEPT_NODE, "Fritz"),
		what = an(VARIABLE_NODE, "$what"),
		target = al(INHERITANCE_LINK, what, green),
		concept = an(TYPE_NODE, "ConceptNode"),
		vardecl = al(TYPED_VARIABLE_LINK, what, concept);

	Handle focus_set =
		_eval.eval_h("(SetLink"
		             " (InheritanceLink"
		             "   (ConceptNode \"tree\")"
		             "   (ConceptNode \"plant\"))"
		             " (ImplicationLink"
		             "   (InheritanceLink"
		             "     (VariableNode \"$P\")"
		             "     (ConceptNode \"plant\")"
		             "   )"
		             "   (InheritanceLink"
		             "     (VariableNode \"$P\")"
		             "     (ConceptNode \"green\")"
		             "   )"
		             " )"
		             ")");

	BackwardChainer bc(_as, top_rbs, target, vardecl, nullptr, focus_set);

	Handle soln1 = _eval.eval_h("(InheritanceLink"
	                            "  (ConceptNode \"tree\")"
	                            "  (ConceptNode \"green\"))");

	// should not be able to find this solution outside the focus set
	Handle soln2 = _eval.eval_h("(InheritanceLink"
	                            "  (ConceptNode \"Fritz\")"
	                            "  (ConceptNode \"green\"))");

	bc.get_config().set_maximum_iterations(300);
	bc.do_chain();

	Handle results = bc.get_results(),
		expected = al(SET_LINK, soln1);

	// Re-enable when focus set is supported
	TS_ASSERT(true);
	// TS_ASSERT_EQUALS(results, expected);

	logger().debug("END TEST: %s", __FUNCTION__);
}

#undef al
#undef an
