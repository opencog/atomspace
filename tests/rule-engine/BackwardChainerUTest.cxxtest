/*
 * BackwardChainerUTest.cxxtest
 *
 *  Created on: Oct 20, 2014
 *      Author: misgana
 */
#include <opencog/rule-engine/backwardchainer/BackwardChainer.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Config.h>
#include <opencog/util/mt19937ar.h>
#include <opencog/guile/load-file.h>

using namespace opencog;
//#define DEBUG 1
class BackwardChainerUTest: public CxxTest::TestSuite
{
private:
	AtomSpace as_;
	SchemeEval eval_;
	BackwardChainer * bc_;

public:
	BackwardChainerUTest() : eval_(&as_)
	{
		logger().setLevel(Logger::DEBUG);
		logger().setPrintToStdoutFlag(true);
		randGen().seed(0);
	}

	void setUp();
	void tearDown();

	//void test_unify();
	//void test_filter_rules();

	void test_1rule_bc();
	void test_1rule_impossible_bc();
	void test_2rules_bc();

	void test_tvq_bc();
	void test_tvq_impossible_bc();
};

void BackwardChainerUTest::setUp()
{
	config().set("SCM_PRELOAD",
	             "opencog/atomspace/core_types.scm, "
	             "opencog/scm/utilities.scm, "
	             "opencog/scm/av-tv.scm");
	load_scm_files_from_config(as_);

	randGen().seed(0);
}

void BackwardChainerUTest::tearDown()
{
	as_.clear();
}
/*
void BackwardChainerUTest::test_unify()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// empty BackwardChainer without rules
	BackwardChainer bc(&as_, std::vector<Rule>());

	Handle x = as_.add_node(VARIABLE_NODE, "$x"),
		y = as_.add_node(VARIABLE_NODE, "$y"),
		z = as_.add_node(VARIABLE_NODE, "$z"),
		west = as_.add_node(CONCEPT_NODE, "west"),
		a = as_.add_node(VARIABLE_NODE, "$a"),
		nono = as_.add_node(CONCEPT_NODE, "nono");

	string target =
		"(EvaluationLink"
		"    (PredicateNode \"sell\")"
		"    (ListLink"
		"        (VariableNode \"$x\")"
		"        (VariableNode \"$y\")"
		"        (VariableNode \"$z\")))";
	Handle htarget = eval_.eval_h(target);

	string match =
		"(EvaluationLink"
		"    (PredicateNode \"sell\")"
		"    (ListLink"
		"        (ConceptNode \"west\")"
		"        (VariableNode \"$a\")"
		"        (ConceptNode \"nono\")))";

	Handle hmatch = eval_.eval_h(match);
	VarMap result;
	bc.unify(htarget, hmatch, Handle::UNDEFINED, result);

	for (const auto& kv : result) {
		std::cout << "Key = " << kv.first->toString()
		          << "Value = " << kv.second->toString() << std::endl;
	}

	TS_ASSERT_EQUALS(result.size(), 3);
	TS_ASSERT_EQUALS(result[x], west);
	TS_ASSERT_EQUALS(result[y], a);
	TS_ASSERT_EQUALS(result[z], nono);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_filter_rules()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// load PLN-utest-2 rule-based system
	UREConfigReader cr2(as_, rbs2_);
	std::vector<Rule> rules(cr2.get_rules());


	BackwardChainer bc(&as_, rules);

	string kb_imp_str =
		"(ImplicationLink (stv .99 .99)"
		"    (AndLink"
		"        (InheritanceLink"
		"            (VariableNode \"$x\")"
		"            (ConceptNode \"American\"))"
		"        (InheritanceLink"
		"            (VariableNode \"$y\")"
		"            (ConceptNode \"weapon\"))"
		"        (EvaluationLink"
		"            (PredicateNode \"sell\")"
		"            (ListLink"
		"                (VariableNode \"$x\")"
		"                (VariableNode \"$y\")"
		"                (VariableNode \"$z\")))"
		"        (InheritanceLink"
		"            (VariableNode \"$z\")"
		"            (ConceptNode \"hostile\")))"
		"    (InheritanceLink"
		"        (VariableNode \"$x\")"
		"        (ConceptNode \"criminal\")))";
	Handle kb_imp = eval_.eval_h(kb_imp_str);

	Handle target =
		eval_.eval_h("(InheritanceLink"
		              "    (VariableNode \"$x\")"
		              "    (ConceptNode \"criminal\"))");

	vector<Rule> filtered_rules = bc.filter_rules(target);

	for (const Rule& r : filtered_rules)
		std::cout << "rule = " << r.get_name() << std::endl;

	// At least modus ponens should be in
	auto modus_ponens_it =
	        std::find_if(filtered_rules.begin(), filtered_rules.end(),
		             [](const Rule& r) {
			             return r.get_name() == "crisp-modus-ponens";
		             });
	TS_ASSERT_DIFFERS(modus_ponens_it, rules.end());

	logger().debug("END TEST: %s", __FUNCTION__);
}
*/
void BackwardChainerUTest::test_1rule_bc()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	config().set("SCM_PRELOAD",
	             "tests/rule-engine/bc-config-1.scm,"
	             "tests/rule-engine/bc-example.scm");
	load_scm_files_from_config(as_);

	// load 1 modus ponens rule
	Handle top_rbs = as_.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	Handle target_var = eval_.eval_h("(VariableNode \"$Z\")");
	Handle target =
	    eval_.eval_h("(InheritanceLink"
	                  "   (VariableNode \"$Z\")"
					  "   (ConceptNode \"green\"))");
	Handle soln = eval_.eval_h("(ConceptNode \"Fritz\")");

	bc.set_target(target);
	bc.get_config().set_maximum_iterations(100);
	bc.do_chain();

	VarMultimap results = bc.get_chaining_result();

	TS_ASSERT_EQUALS(results[target_var].size(), 1);
	TS_ASSERT_EQUALS(results[target_var].count(soln), 1);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_1rule_impossible_bc()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	config().set("SCM_PRELOAD",
	             "tests/rule-engine/bc-config-1.scm,"
	             "tests/rule-engine/bc-criminal.scm");
	load_scm_files_from_config(as_);

	// load modus ponens rule
	Handle top_rbs = as_.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	Handle target_var = eval_.eval_h("(VariableNode \"$x\")");
	Handle target =
	    eval_.eval_h("(InheritanceLink"
	                 "   (VariableNode \"$x\")"
	                 "   (ConceptNode \"criminal\"))");
	Handle soln = eval_.eval_h("(ConceptNode \"West\")");

	// should NOT be possible to find the solution without deduction rule
	bc.set_target(target);
	bc.get_config().set_maximum_iterations(300);
	bc.do_chain();

	VarMultimap results = bc.get_chaining_result();

	TSM_ASSERT("Incorrect number of solution found!",
	           results[target_var].size() == 0);
	TSM_ASSERT("Getting impossible solution!",
	           results[target_var].count(soln) == 0);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_2rules_bc()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	config().set("SCM_PRELOAD",
	             "tests/rule-engine/bc-config-2.scm,"
	             "tests/rule-engine/bc-criminal.scm");
	load_scm_files_from_config(as_);

	// load modus ponens & deduction rules
	Handle top_rbs = as_.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	Handle target_var = eval_.eval_h("(VariableNode \"$x\")");
	Handle target =
	    eval_.eval_h("(InheritanceLink"
	                  "   (VariableNode \"$x\")"
					  "   (ConceptNode \"criminal\"))");
	Handle soln = eval_.eval_h("(ConceptNode \"West\")");

	bc.set_target(target);
	bc.get_config().set_maximum_iterations(300);
	bc.do_chain();

	VarMultimap results = bc.get_chaining_result();

	TSM_ASSERT("Incorrect number of solution found!",
	           results[target_var].size() == 1);
	TSM_ASSERT("Getting incorrect solution!",
	           results[target_var].count(soln) == 1);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_tvq_bc()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	config().set("SCM_PRELOAD",
	             "tests/rule-engine/bc-config-1.scm,"
	             "tests/rule-engine/bc-example.scm");
	load_scm_files_from_config(as_);

	// load modus ponens
	Handle top_rbs = as_.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	Handle target =
	    eval_.eval_h("(InheritanceLink (stv 0.0 0.0)"
	                 "   (ConceptNode \"Fritz\")"
	                 "   (ConceptNode \"green\"))");

	bc.set_target(target);
	bc.get_config().set_maximum_iterations(100);
	bc.do_chain();

	TSM_ASSERT("Incorrect strength after BC!",
	           target->getTruthValue()->getMean() > 0.9f);
	TSM_ASSERT("Incorrect confidence after BC!",
	           target->getTruthValue()->getConfidence() > 0.9f);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_tvq_impossible_bc()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	config().set("SCM_PRELOAD",
	             "tests/rule-engine/bc-config-1.scm,"
	             "tests/rule-engine/bc-example.scm");
	load_scm_files_from_config(as_);

	// load modus ponens
	Handle top_rbs = as_.add_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	// negative test, BC should not modify the TV of this impossible target
	Handle target = eval_.eval_h("(InheritanceLink (stv 0.0 0.0)"
	                             "   (ConceptNode \"RandomName\")"
	                             "   (ConceptNode \"green\"))");

	// this is not the target, but the inference path should still actually
	// modify the TV
	Handle hidden = eval_.eval_h("(InheritanceLink (stv 0.0 0.0)"
	                             "   (ConceptNode \"Fritz\")"
	                             "   (ConceptNode \"Frog\"))");

	bc.set_target(target);
	bc.get_config().set_maximum_iterations(100);
	bc.do_chain();

	TSM_ASSERT("Incorrect strength of target after BC!", target->getTruthValue()->getMean() < 0.1f);
	TSM_ASSERT("Incorrect confidence of target after BC!", target->getTruthValue()->getConfidence() < 0.1f);
	TSM_ASSERT("Incorrect strength of sub-target after BC!", hidden->getTruthValue()->getMean() > 0.9f);
	TSM_ASSERT("Incorrect confidence of sub-target after BC!", hidden->getTruthValue()->getConfidence() > 0.9f);

	logger().debug("END TEST: %s", __FUNCTION__);
}

