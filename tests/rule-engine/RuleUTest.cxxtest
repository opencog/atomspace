/*
 * RuleUTest.cxxtest
 *
 * Copyright (C) 2016 OpenCog Foundation
 *
 * Author: Nil Geisweiller
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/rule-engine/Rule.h>

using namespace opencog;

#define al _as.add_link
#define an _as.add_node

class RuleUTest: public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _eval;
	Handle deduction_rule_h, X, A, V, CT;

public:
	RuleUTest() : _eval(&_as)
	{
	}

	void setUp();
	void tearDown();

	void test_unify_target();
};

void RuleUTest::setUp()
{
	string cur_pp_dir = string(PROJECT_SOURCE_DIR),
		cur_p_dir = cur_pp_dir + "/tests",
		cur_dir = cur_p_dir + "/rule-engine";
	vector<string> load_paths = {cur_pp_dir, cur_p_dir, cur_dir};
	for (string& p : load_paths)
	{
		string eval_str = string("(add-to-load-path \"") + p + string("\")");
		_eval.eval(eval_str);
	}
	_eval.eval("(use-modules (opencog))");
	// _eval.eval("(use-modules (opencog rule-engine))");

	string eval_result =
		_eval.eval("(load-from-path \"tests/rule-engine/bc-config.scm\")");

	deduction_rule_h = _eval.eval_h("(MemberLink (stv 1 1)"
	                                "   bc-deduction-rule-name"
	                                "   (ConceptNode \"URE\"))");
	X = an(VARIABLE_NODE, "$X");
	A = an(CONCEPT_NODE, "$A");
	V = an(VARIABLE_NODE, "$V");
	CT = an(TYPE_NODE, "ConceptNode");
}

void RuleUTest::tearDown()
{
	_as.clear();
}

void RuleUTest::test_unify_target()
{
	Rule deduction_rule(deduction_rule_h);
	Handle target = al(INHERITANCE_LINK, X, A),
		target_vardecl = al(TYPED_VARIABLE_LINK, X, CT);
	RuleSeq rules = deduction_rule.unify_target(target, target_vardecl);

	TS_ASSERT_EQUALS(rules.size(), 1);

	Handle forward_rule = rules[0].get_forward_rule(),
		// expected up to an alpha conversion
		vardecl = al(VARIABLE_LIST,
		             al(TYPED_VARIABLE_LINK, X, CT),
		             al(TYPED_VARIABLE_LINK, V, CT)),
		XV = al(INHERITANCE_LINK, X, V),
		VA = al(INHERITANCE_LINK, V, A),
		XA = al(INHERITANCE_LINK, X, A),
		XnotA = al(NOT_LINK, al(IDENTICAL_LINK, X, A)),
		body = al(AND_LINK, XV, VA, XnotA),
		schema = an(GROUNDED_SCHEMA_NODE, "scm: bc-deduction-formula"),
		rewrite = al(EXECUTION_OUTPUT_LINK,
		             schema,
		             al(LIST_LINK, XV, VA, XA)),
		expected = al(BIND_LINK, vardecl, body, rewrite);

	std::cout << "forward_rule = " << oc_to_string(forward_rule);
	std::cout << "expected = " << oc_to_string(expected);

	ScopeLinkPtr expected_sc = ScopeLinkCast(expected);

	TS_ASSERT(expected_sc->is_equal(forward_rule));
}
