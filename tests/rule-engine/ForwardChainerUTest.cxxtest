/*
 * ForwardChainer.cxxtest
 *
 *  Created on: Sep 2, 2014
 *      Author: misgana
 */
#include <boost/range/algorithm/find.hpp>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>

#include <opencog/rule-engine/forwardchainer/ForwardChainer.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al _as.add_link
#define an _as.add_node

#define CHKERR \
   TSM_ASSERT("Caught scm error during eval", \
      (false == eval.eval_error()));

class ForwardChainerUTest: public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval eval;

public:
	ForwardChainerUTest() : eval(&_as)
	{
#undef DEBUG
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);

		// Disable the AF mechanism during testing!
		_as.set_attentional_focus_boundary(AttentionValue::MINSTI);

		string source_dir = string(PROJECT_SOURCE_DIR),
			test_dir = source_dir + "/tests",
			test_ure_dir = test_dir + "/rule-engine",
			ure_dir = source_dir + "/opencog/scm/opencog/rule-engine";
		vector<string> load_paths = {source_dir, test_dir, test_ure_dir,
		                             ure_dir};
		for (string& p : load_paths)
		{
			string eval_str = string("(add-to-load-path \"") + p + string("\")");
			eval.eval(eval_str);
		}

		eval.eval("(use-modules (opencog))");
		eval.eval("(use-modules (opencog rule-engine))");
		CHKERR;

		// Load the simple deduction rbs to test it
		string result; // to be able to read load errors
		result = eval.eval("(load-from-path \"fc-deduction-config.scm\")");
		CHKERR;

		// Load the simple deduction + modus ponens rbs to test it
		result = eval.eval("(load-from-path \"fc-config.scm\")");
		CHKERR;
	}
	void test_do_chain();
	void test_select_rule();
	void test_apply_rule();
	void test_substitute_rule_part();
	void test_unify_1();
	void test_unify_2();
	void test_derive_rules_1();
	void test_derive_rules_2();
};

void ForwardChainerUTest::test_do_chain()
{
	// Test simple deduction
	//
	//   InheritanceLink A B
	//   InheritanceLink B C
	//   |-
	//   InheritanceLink A C
	//
	Handle A = eval.eval_h("(ConceptNode \"A\" (stv 1 1))"),
		B = eval.eval_h("(ConceptNode \"B\")"),
		C = eval.eval_h("(ConceptNode \"C\")"),
		AB = eval.eval_h("(InheritanceLink (stv 1 1)"
		                 "   (ConceptNode \"A\")"
		                 "   (ConceptNode \"B\"))"),
		BC = eval.eval_h("(InheritanceLink (stv 1 1)"
		                 "   (ConceptNode \"B\")"
		                 "   (ConceptNode \"C\"))");

    // Get the ConceptNode corresponding to the rule-based system to test
	Handle rbs = an(CONCEPT_NODE, "fc-deduction-rule-base");
    ForwardChainer fc(_as, rbs, AB);
	// Run forward chainer
	fc.do_chain();

	// Collect the results
	UnorderedHandleSet results = fc.get_chaining_result();

	// Check that AC is in the results
	Handle AC = _as.add_link(INHERITANCE_LINK, A, C);
	TS_ASSERT_DIFFERS(results.find(AC), results.end());
}

void ForwardChainerUTest::test_select_rule(void)
{
    Handle h = eval.eval_h("(InheritanceLink"
                           "   (ConceptNode \"Cat\")"
                           "   (ConceptNode \"Animal\"))");
    TS_ASSERT_DIFFERS(h, Handle::UNDEFINED);

    Handle rbs = eval.eval_h("(ConceptNode \"fc-rule-base\")");
    ForwardChainer fc(_as, rbs, h);

    // Full unification
    Rule* rule = fc.select_rule(h);
    TS_ASSERT_DIFFERS(nullptr, rule);
}

void ForwardChainerUTest::test_apply_rule(void)
{
	// Apply rule x and see if all the inferences made
	// are a direct result of source being part of input/premise
	eval.eval("(load-from-path \"tests/rule-engine/simple-assertions.scm\")");

	Handle rule_handle = eval.eval_h("(MemberLink"
	                                 "   fc-deduction-rule-name"
	                                 "   (ConceptNode \"fc-deduction-rule-base\"))");
	Rule rule(rule_handle);
	Handle source = eval.eval_h("(InheritanceLink"
	                            "  (ConceptNode \"Socrates\")"
	                            "  (ConceptNode \"man\"))");

	Handle rbs = _as.get_node(CONCEPT_NODE, "URE");
	ForwardChainer fc(_as, rbs, source);

	UnorderedHandleSet derules = fc.derive_rules(source, &rule);
	TS_ASSERT_EQUALS(2, derules.size());

	HandleSeq hs;
	for(Handle h : derules)
	{
		HandleSeq tmp = fc.apply_rule(h);
		hs.insert(hs.end(), tmp.begin(), tmp.end());
	}

	TS_ASSERT_EQUALS(1, hs.size());
}

void ForwardChainerUTest::test_substitute_rule_part(void)
{
	eval.eval("(load-from-path \"tests/rule-engine/dfc-tests.scm\")");

	Handle rule_handle = eval.eval_h("fc-deduction-rule");

	Handle var_a = eval.eval_h("(VariableNode \"$A\")");
	Handle var_b = eval.eval_h("(VariableNode \"$B\")");
	Handle var_c = eval.eval_h("(VariableNode \"$C\")");

	Handle grnd_1 = eval.eval_h("(ConceptNode \"Cat\")");
	Handle grnd_2 = eval.eval_h("(ConceptNode \"Animal\")");

	// When the first premise of deduction rule is matched
	HandleMap vg_map_1 = { { var_a, grnd_1 }, { var_b, grnd_2 } };
	// Then the second premise of deduction rule is matched
	HandleMap vg_map_2 = { { var_b, grnd_1 }, { var_c, grnd_2 } };

	HandleMapSeq var_groundings = { vg_map_1 };
	OrderedHandleSet vars_case_1 = { var_a, var_b };

	Handle rbs = _as.get_node(CONCEPT_NODE, "fc-deduction-rule-base");
	ForwardChainer fc(_as, rbs, grnd_2);

	HandleSeq rule_derivatives = fc.substitute_rule_part(_as, rule_handle,
	                                                     vars_case_1,
	                                                     var_groundings);
	TS_ASSERT_EQUALS(rule_derivatives.size(), 1);
	Handle hx = _as.add_atom(rule_derivatives[0]);
	Handle hexpected = eval.eval_h("deduction-ab-substitute-1");
	TS_ASSERT_EQUALS(hexpected, hx);

	var_groundings = { vg_map_2 };
	OrderedHandleSet vars_case_2 = { var_b, var_c };
	rule_derivatives = fc.substitute_rule_part(_as, rule_handle, vars_case_2,
	                                           var_groundings);

	TS_ASSERT_EQUALS(rule_derivatives.size(), 1);
	hx = _as.add_atom(rule_derivatives[0]);
	hexpected = eval.eval_h("deduction-ab-substitute-2");
	TS_ASSERT_EQUALS(hexpected, hx);
}

void ForwardChainerUTest::test_unify_1(void)
{
    Handle source = eval.eval_h("(InheritanceLink"
                                "   (ConceptNode \"Cat\")"
                                "   (ConceptNode \"Animal\"))");

    Handle rbs = eval.eval_h("(ConceptNode \"fc-deduction-rule-base\")");

	Handle rule_handle = eval.eval_h("(MemberLink"
	                                 "   fc-deduction-rule-name"
	                                 "   (ConceptNode \"fc-deduction-rule-base\"))");
	Rule rule(rule_handle);
	Handle premise_pat = eval.eval_h("(InheritanceLink"
	                                 "   (VariableNode \"$A\")"
	                                 "   (VariableNode \"$B\"))");

	ForwardChainer fc(_as, rbs, source);

	bool result = fc.unify(source, premise_pat, &rule);
	TS_ASSERT(result);
}

void ForwardChainerUTest::test_unify_2(void)
{
	eval.eval("(load-from-path \"tests/rule-engine/rules/pln-implication-and-lambda-factorization-rule.scm\")");

	Handle source = eval.eval_h
		("(AndLink"
		 "  (LambdaLink"
		 "    (TypedVariableLink"
		 "      (VariableNode \"$X\")"
		 "      (TypeNode \"ConceptNode\"))"
		 "    (PredicateNode \"P\"))"
		 "  (LambdaLink"
		 "    (TypedVariableLink"
		 "      (VariableNode \"$X\")"
		 "      (TypeNode \"ConceptNode\"))"
		 "    (EvaluationLink"
		 "      (PredicateNode \"Q\")"
		 "      (VariableNode \"$X\"))))");

    Handle rbs = eval.eval_h("(ConceptNode \"PLN\")");

	Handle rule_handle = eval.eval_h("(MemberLink"
	                                 "   implication-and-lambda-factorization-rule-name"
	                                 "   (ConceptNode \"PLN\"))");
	Rule rule(rule_handle);
	Handle premise_pat = eval.eval_h("implication-and-lambda-factorization-body");

	ForwardChainer fc(_as, rbs, source);

	bool result = fc.unify(source, premise_pat, &rule);
	TS_ASSERT(result);
}

void ForwardChainerUTest::test_derive_rules_1(void)
{
	eval.eval("(load-from-path \"tests/rule-engine/rules/fc-deduction.scm\")");
	eval.eval("(load-from-path \"tests/rule-engine/simple-assertions.scm\")");

	Handle rule_handle = eval.eval_h("(MemberLink"
	                                 "   fc-deduction-rule-name"
	                                 "   (ConceptNode \"fc-deduction-rule-base\"))");
	Rule rule(rule_handle);
	Handle source = eval.eval_h(R"((ConceptNode "Socrates"))");
	Handle source2 =  eval.eval_h("(InheritanceLink"
	                              "   (ConceptNode \"Cat\")"
	                              "   (ConceptNode \"Animal\"))");

	Handle rbs = _as.get_node(CONCEPT_NODE, "fc-deduction-rule-base");
	ForwardChainer fc(_as, rbs, source);

	// is not unifiable
	UnorderedHandleSet hrules = fc.derive_rules(source, &rule);
	TS_ASSERT_EQUALS(0, hrules.size());

	hrules = fc.derive_rules(source2, &rule);
	TS_ASSERT_EQUALS(2, hrules.size());
}

void ForwardChainerUTest::test_derive_rules_2()
{
	_as.clear();

	eval.eval("(load-from-path \"tests/rule-engine/rules/implication-construction-rule.scm\")");

	Handle source = eval.eval_h("(LambdaLink"
	                            "   (TypedVariableLink"
	                            "      (VariableNode \"$X\")"
	                            "      (TypeNode \"ConceptNode\"))"
	                            "   (EvaluationLink"
	                            "      (PredicateNode \"take\")"
	                            "      (ListLink"
	                            "         (VariableNode \"$X\")"
	                            "         (ConceptNode \"treatment-1\"))))");
	Handle rule_handle = eval.eval_h("(MemberLink"
	                                 "   implication-construction-rule-name"
	                                 "   (ConceptNode \"URE\"))");
	Rule rule(rule_handle);

	Handle rbs = _as.get_node(CONCEPT_NODE, "URE");

	ForwardChainer fc(_as, rbs, source);

	UnorderedHandleSet hrules = fc.derive_rules(source, &rule);
	TS_ASSERT_EQUALS(2, hrules.size());
}

#undef al
#undef an
