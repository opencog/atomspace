/*
 * tests/atomspace/AtomUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/Atom.h>
#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/platform.h>
#include <opencog/util/exceptions.h>

using namespace opencog;

#define FLOAT_ACCEPTABLE_ERROR 0.000001

class ConcreteAtom : public Link
{

public:
    ConcreteAtom(Type t, const std::vector<Handle>& o) : Link(t, o) {}
};

class AtomUTest :  public CxxTest::TestSuite
{
private:

    AtomSpace as;
    std::vector<Handle> sortedHandles;
    Handle inh01, inh12, l012;

public:
    AtomUTest() {
        sortedHandles = { as.add_node(CONCEPT_NODE, "0"),
                          as.add_node(CONCEPT_NODE, "1"),
                          as.add_node(CONCEPT_NODE, "2") };
        std::sort(sortedHandles.begin(), sortedHandles.end(), std::less<Handle>());
        inh01 = as.add_link(INHERITANCE_LINK, sortedHandles[0], sortedHandles[1]);
        inh12 = as.add_link(INHERITANCE_LINK, sortedHandles[1], sortedHandles[2]);
        l012 = as.add_link(LIST_LINK,
                           sortedHandles[0], sortedHandles[1], sortedHandles[2]);
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testConstructor() {
        std::vector<Handle> outgoing = { sortedHandles[2],
                                         sortedHandles[0],
                                         sortedHandles[1] };

        Atom* atom = new ConcreteAtom(ORDERED_LINK, outgoing);
        Link *link = dynamic_cast<Link *>(atom);
        TS_ASSERT(link != NULL);

        // Specific tests for ordered and unnordered links:
        TS_ASSERT(link->getOutgoingSet()[0] == sortedHandles[2]);
        TS_ASSERT(link->getOutgoingSet()[1] == sortedHandles[0]);
        TS_ASSERT(link->getOutgoingSet()[2] == sortedHandles[1]);
        delete atom;
        // Unordered lists sort their outgoing sets
        atom = new ConcreteAtom(UNORDERED_LINK, outgoing);
        link = dynamic_cast<Link *>(atom);
        TS_ASSERT(link != NULL);
        TS_ASSERT(link->getOutgoingSet()[0] == sortedHandles[0]);
        TS_ASSERT(link->getOutgoingSet()[1] == sortedHandles[1]);
        TS_ASSERT(link->getOutgoingSet()[2] == sortedHandles[2]);
        delete atom;
    }

    void test_getIncomingSet() {
        // We use an actual set to compare sorted objects

        // {inh01, l012} is the incoming set of ConceptNode "0"
        IncomingSet i0 = sortedHandles[0]->getIncomingSet();
        std::set<LinkPtr> expected_i0 = {LinkCast(inh01), LinkCast(l012)};
        TS_ASSERT_EQUALS(std::set<LinkPtr>(i0.begin(), i0.end()), expected_i0);

        // {inh01, inh12, 012} is the incoming set of ConceptNode "1"
        IncomingSet i1 = sortedHandles[1]->getIncomingSet();
        std::set<LinkPtr> expected_i1 = { LinkCast(inh01),
                                          LinkCast(inh12),
                                          LinkCast(l012) };
        TS_ASSERT_EQUALS(std::set<LinkPtr>(i1.begin(), i1.end()), expected_i1);
    }

    void test_getIncomingSetByType() {
        // We use an actual set to compare sorted objects

        // {inh01} is the incoming set of ConceptNode "0" by type
        // InheritanceLink
        IncomingSet i0 = sortedHandles[0]->getIncomingSetByType(INHERITANCE_LINK);
        std::set<LinkPtr> expected_i0 = {LinkCast(inh01)};
        TS_ASSERT_EQUALS(std::set<LinkPtr>(i0.begin(), i0.end()), expected_i0);

        // {inh01, inh12} is the incoming set of ConceptNode "1" by
        // type InheritanceLink
        IncomingSet i1 = sortedHandles[1]->getIncomingSetByType(INHERITANCE_LINK);
        std::set<LinkPtr> expected_i1 = {LinkCast(inh01), LinkCast(inh12)};
        TS_ASSERT_EQUALS(std::set<LinkPtr>(i1.begin(), i1.end()), expected_i1);
    }
};
