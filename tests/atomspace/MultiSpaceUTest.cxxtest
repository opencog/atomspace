/*
 * tests/atomspace/MultiSpaceUTest.cxxtest
 *
 * Copyright (C) 2014,2015 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atoms/base/Node.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/truthvalue/SimpleTruthValue.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

// Test support for multiple atomspaces.
// This is pursuant to github bug #523 -- several users want this
// ability.
// Tests for removal of atoms in a multi-atomspace usage case is in
// the RemoveUTest.cxxtest file.
//
class MultiSpaceUTest :  public CxxTest::TestSuite
{
private:

	AtomSpace as1;
	AtomSpace as2;
	AtomSpace as3;

public:
	MultiSpaceUTest() {}

	void setUp() {}

	void tearDown() {}

	// Simple test of naive multiple atomspaces.  Create three
	// distinct atomspaces, make sure they behave like atomspaces
	// should.
	void testSimple()
	{
		// Create three TV's
		TruthValuePtr tv1(SimpleTruthValue::createTV(0.5, 1.0));
		TruthValuePtr tv2(SimpleTruthValue::createTV(0.5, 1.0/2.0));
		TruthValuePtr tv3(SimpleTruthValue::createTV(0.5, 1.0/3.0));

		// Create three atoms in three different atomspaces
		Handle h1 = as1.add_node(CONCEPT_NODE, "1");
		h1->setTruthValue(tv1);
		Handle h2 = as2.add_node(NUMBER_NODE, "2");
		h2->setTruthValue(tv2);
		Handle h3 = as3.add_node(VARIABLE_NODE, "3");
		h3->setTruthValue(tv3);

		// Fetch three atoms in three different atomspaces
		Handle hn1 = as1.add_node(CONCEPT_NODE, "1");
		Handle hn2 = as2.add_node(NUMBER_NODE, "2");
		Handle hn3 = as3.add_node(VARIABLE_NODE, "3");

		// They should match the old handles
		TS_ASSERT(h1 == hn1);
		TS_ASSERT(h2 == hn2);
		TS_ASSERT(h3 == hn3);

		// ... and they should refer to the same atoms.
		TS_ASSERT(hn1->getType() == h1->getType());
		TS_ASSERT(hn2->getType() == h2->getType());
		TS_ASSERT(hn3->getType() == h3->getType());

		// The truth value *pointers* should be identical, as they
		// should point to the same exact truth value instance.
		TS_ASSERT(hn1->getTruthValue() == h1->getTruthValue());
		TS_ASSERT(hn2->getTruthValue() == h2->getTruthValue());
		TS_ASSERT(hn3->getTruthValue() == h3->getTruthValue());
	}

	// Test multiple independent atomspaces.  Make sure they do not
	// collide with one-another in atom insertion, deletion.
	void testCopy()
	{
		// Create three TV's
		TruthValuePtr tv1(SimpleTruthValue::createTV(0.4, 1.0));
		TruthValuePtr tv2(SimpleTruthValue::createTV(0.4, 1.0/2.0));
		TruthValuePtr tv3(SimpleTruthValue::createTV(0.4, 1.0/3.0));

		// Create three nodes
		NodePtr n1(createNode(CONCEPT_NODE, "uni-1"));
		n1->setTruthValue(tv1);
		NodePtr n2(createNode(NUMBER_NODE, "2.2222"));
		n2->setTruthValue(tv2);
		NodePtr n3(createNode(VARIABLE_NODE, "uni-3"));
		n3->setTruthValue(tv3);

		Handle hnd1(n1);
		Handle hnd2(n2);
		Handle hnd3(n3);

		// Create three links holding these three
		TruthValuePtr tv(SimpleTruthValue::createTV(0.33, 1.0/3.0));

		// Create three copies of this link in three atomspaces
		Handle h1 = as1.add_link(LIST_LINK, hnd1, hnd2, hnd3);
		h1->setTruthValue(tv);
		Handle h2 = as2.add_atom(h1);
		Handle h3 = as3.add_atom(h2);

		// The truth values themselves should be equal, as values.
		TS_ASSERT(*h1->getTruthValue() == *tv);
		TS_ASSERT(*h2->getTruthValue() == *tv);
		TS_ASSERT(*h3->getTruthValue() == *tv);

		// Fetch three atoms in three different atomspaces
		Handle h1n1 = as1.add_node(CONCEPT_NODE, "uni-1");
		Handle h1n2 = as1.add_node(NUMBER_NODE, "2.2222");
		Handle h1n3 = as1.add_node(VARIABLE_NODE, "uni-3");

		Handle h2n1 = as2.add_node(CONCEPT_NODE, "uni-1");
		Handle h2n2 = as2.add_node(NUMBER_NODE, "2.2222");
		Handle h2n3 = as2.add_node(VARIABLE_NODE, "uni-3");

		Handle h3n1 = as3.add_node(CONCEPT_NODE, "uni-1");
		Handle h3n2 = as3.add_node(NUMBER_NODE, "2.2222");
		Handle h3n3 = as3.add_node(VARIABLE_NODE, "uni-3");

		// They should NOT match one-another
		// They should have become copies.
		TS_ASSERT(h1n1 != h2n1);
		TS_ASSERT(h1n2 != h2n2);
		TS_ASSERT(h1n3 != h2n3);

		TS_ASSERT(h1n1 != h3n1);
		TS_ASSERT(h1n2 != h3n2);
		TS_ASSERT(h1n3 != h3n3);

		TS_ASSERT(h2n1 != h3n1);
		TS_ASSERT(h2n2 != h3n2);
		TS_ASSERT(h2n3 != h3n3);

		// The truth values themselves should be equal, as values.
		TS_ASSERT(*h1n1->getTruthValue() == *tv1);
		TS_ASSERT(*h2n1->getTruthValue() == *tv1);
		TS_ASSERT(*h3n1->getTruthValue() == *tv1);

		TS_ASSERT(*h1n2->getTruthValue() == *tv2);
		TS_ASSERT(*h2n2->getTruthValue() == *tv2);
		TS_ASSERT(*h3n2->getTruthValue() == *tv2);

		TS_ASSERT(*h1n3->getTruthValue() == *tv3);
		TS_ASSERT(*h2n3->getTruthValue() == *tv3);
		TS_ASSERT(*h3n3->getTruthValue() == *tv3);
	}

	// Test copying back and forth.
	void testCopyBack()
	{
		// Create a node, copy it back and forth.
		Handle n1 = as1.add_node(CONCEPT_NODE, "backer");
		Handle n2 = as2.add_atom(n1);
		Handle n1copy = as1.add_atom(n2);
		Handle n2copy = as2.add_atom(n1copy);

		TS_ASSERT(n1 == n1copy);
		TS_ASSERT(n2 == n2copy);

		// Create a link, copy it back and forth.
		Handle h1 = as1.add_link(LIST_LINK, n1);
		Handle h2 = as2.add_atom(h1);
		Handle h1copy = as1.add_atom(h2);
		Handle h2copy = as2.add_atom(h1copy);

		TS_ASSERT(h1 == h1copy);
		TS_ASSERT(h2 == h2copy);

		Handle h3 = as3.add_atom(h1);
		Handle h3copy = as3.add_atom(h2);

		TS_ASSERT(h3 == h3copy);

		// Do it again, this time with unordered links.
		Handle ma = as1.add_node(CONCEPT_NODE, "hacker");
		Handle mb = as1.add_node(CONCEPT_NODE, "cracker");
		Handle mc = as1.add_node(CONCEPT_NODE, "jacker");

		h1 = as1.add_link(UNORDERED_LINK, n1, mc, mb, n1, mc, ma);
		h2 = as2.add_atom(h1);
		h1copy = as1.add_atom(h2);
		h2copy = as2.add_atom(h1copy);

		TS_ASSERT(h1 == h1copy);
		TS_ASSERT(h2 == h2copy);

		h3 = as3.add_atom(h1);
		h3copy = as3.add_atom(h2);

		TS_ASSERT(h3 == h3copy);
	}

	// Like testCopyBack(), except that it explicitly calls the getAtom
	// method.  Because the atoms exist, the get should return them.
	void testGet()
	{
		// Create a node, copy it back and forth.
		Handle n1 = as1.add_node(CONCEPT_NODE, "Ziggy Stardust");
		Handle n2 = as2.add_atom(n1);
		Handle n1copy = as1.get_atom(n2);
		Handle n2copy = as2.get_atom(n1copy);

		TS_ASSERT(n1 == n1copy);
		TS_ASSERT(n2 == n2copy);

		// Create a link, copy it back and forth.
		Handle h1 = as1.add_link(LIST_LINK, n1);
		Handle h2 = as2.add_atom(h1);
		Handle h1copy = as1.get_atom(h2);
		Handle h2copy = as2.get_atom(h1copy);

		TS_ASSERT(h1 == h1copy);
		TS_ASSERT(h2 == h2copy);

		Handle h3 = as3.get_atom(h1);
		Handle h3copy = as3.get_atom(h2);

		TS_ASSERT(h3 == h3copy);

		// Do it again, this time with unordered links.
		Handle ma = as1.add_node(CONCEPT_NODE, "ziggy");
		Handle mb = as1.add_node(CONCEPT_NODE, "weird");
		Handle mc = as1.add_node(CONCEPT_NODE, "gilly");

		h1 = as1.add_link(UNORDERED_LINK, n1, mc, mb, n1, mc, ma);
		h2 = as2.add_atom(h1);
		h1copy = as1.get_atom(h2);
		h2copy = as2.get_atom(h1copy);

		TS_ASSERT(h1 == h1copy);
		TS_ASSERT(h2 == h2copy);

		h3 = as3.add_atom(h1);
		h3copy = as3.get_atom(h2);

		TS_ASSERT(h3 == h3copy);
	}

	// Like testCopyBack() and testGet(), except that one of the
	// atomspaces is an expansion.  This exhibits a new bug,
	// github bug report #1530.
	void testExpand()
	{
		AtomSpace ex1(&as1);

		// Create a node, copy it back and forth.
		Handle n1 = ex1.add_node(CONCEPT_NODE, "Spiders from Mars");
		Handle n2 = as2.add_atom(n1);
		Handle n1copy = ex1.get_atom(n2);
		Handle n2copy = as2.get_atom(n1copy);

		TS_ASSERT(n1 == n1copy);
		TS_ASSERT(n2 == n2copy);

		// Create a link, copy it back and forth.
		Handle h1 = ex1.add_link(LIST_LINK, n1);
		Handle h2 = as2.add_atom(h1);
		Handle h1copy = ex1.get_atom(h2);
		Handle h2copy = as2.get_atom(h1copy);

		TS_ASSERT(h1 == h1copy);
		TS_ASSERT(h2 == h2copy);

		Handle h3 = as3.get_atom(h1);
		Handle h3copy = as3.get_atom(h2);

		TS_ASSERT(h3 == h3copy);

		// Do it again, this time with unordered links.
		Handle ma = ex1.add_node(CONCEPT_NODE, "wham");
		Handle mb = ex1.add_node(CONCEPT_NODE, "bam");
		Handle mc = ex1.add_node(CONCEPT_NODE, "thankyou, mam");

		h1 = ex1.add_link(UNORDERED_LINK, n1, mc, mb, n1, mc, ma);
		h2 = as2.add_atom(h1);
		h1copy = ex1.get_atom(h2);
		h2copy = as2.get_atom(h1copy);

		TS_ASSERT(h1 == h1copy);
		TS_ASSERT(h2 == h2copy);

		h3 = as3.add_atom(h1);
		h3copy = as3.get_atom(h2);

		TS_ASSERT(h3 == h3copy);
	}

	// Test multiple nested (hierarchical) atomspaces.  They should 
	// work as expected...  The below is a fairly naive test, it does
	// not test any kind of complicated semantics.  Its minimal.
	void testNest()
	{
		AtomSpace nas1;
		AtomSpace nas2(&nas1);
		AtomSpace nas3(&nas2);

		// Create three TV's
		TruthValuePtr tv1(SimpleTruthValue::createTV(0.4, 1.0));
		TruthValuePtr tv2(SimpleTruthValue::createTV(0.4, 1.0/2.0));
		TruthValuePtr tv3(SimpleTruthValue::createTV(0.4, 1.0/3.0));

		// Create three nodes in the base atomspace
		Handle hnd1 = nas1.add_node(CONCEPT_NODE, "nest-1");
		hnd1->setTruthValue(tv1);
		Handle hnd2 = nas1.add_node(NUMBER_NODE, "2.34");
		hnd2->setTruthValue(tv2);
		Handle hnd3 = nas1.add_node(VARIABLE_NODE, "nest-3");
		hnd3->setTruthValue(tv3);

		// Create three links holding these three
		TruthValuePtr tv(SimpleTruthValue::createTV(0.33, 1.0/3.0));

		// Create a link in the middle atomspace
		Handle h2 = nas2.add_link(LIST_LINK, hnd1, hnd2, hnd3);
		h2->setTruthValue(tv);

		// Try to create a link in the grandchild atomspace
		Handle h3 = nas3.add_link(LIST_LINK, hnd1, hnd2, hnd3);
		h3->setTruthValue(tv);

		// The middle and grand-child links should be one and the same.
		TS_ASSERT(h2 == h3);

		// Fetch three atoms in three different atomspaces
		Handle h1n1 = nas1.add_node(CONCEPT_NODE, "nest-1");
		Handle h1n2 = nas1.add_node(NUMBER_NODE, "2.34");
		Handle h1n3 = nas1.add_node(VARIABLE_NODE, "nest-3");

		Handle h2n1 = nas2.add_node(CONCEPT_NODE, "nest-1");
		Handle h2n2 = nas2.add_node(NUMBER_NODE, "2.34");
		Handle h2n3 = nas2.add_node(VARIABLE_NODE, "nest-3");

		Handle h3n1 = nas3.add_node(CONCEPT_NODE, "nest-1");
		Handle h3n2 = nas3.add_node(NUMBER_NODE, "2.34");
		Handle h3n3 = nas3.add_node(VARIABLE_NODE, "nest-3");

		// They should be identical
		// They should NOT be copies.
		TS_ASSERT(hnd1 == h1n1);
		TS_ASSERT(hnd2 == h1n2);
		TS_ASSERT(hnd3 == h1n3);

		TS_ASSERT(hnd1 == h2n1);
		TS_ASSERT(hnd2 == h2n2);
		TS_ASSERT(hnd3 == h2n3);

		TS_ASSERT(hnd1 == h3n1);
		TS_ASSERT(hnd2 == h3n2);
		TS_ASSERT(hnd3 == h3n3);

		// The truth value *pointers* should be identical, of course,
		// since they are the very same atoms.
		TS_ASSERT(hnd1->getTruthValue() == h1n1->getTruthValue());
		TS_ASSERT(hnd2->getTruthValue() == h1n2->getTruthValue());
		TS_ASSERT(hnd3->getTruthValue() == h1n3->getTruthValue());

		TS_ASSERT(hnd1->getTruthValue() == h2n1->getTruthValue());
		TS_ASSERT(hnd2->getTruthValue() == h2n2->getTruthValue());
		TS_ASSERT(hnd3->getTruthValue() == h2n3->getTruthValue());

		TS_ASSERT(hnd1->getTruthValue() == h3n1->getTruthValue());
		TS_ASSERT(hnd2->getTruthValue() == h3n2->getTruthValue());
		TS_ASSERT(hnd3->getTruthValue() == h3n3->getTruthValue());
	}

	// This tests bug report #9
	void testCrash()
	{
		AtomSpace* ex1 = new AtomSpace(&as1);

		// Create mixed nodes.
		Handle n1 = as1.add_node(CONCEPT_NODE, "aaa");
		Handle n2 = ex1->add_node(CONCEPT_NODE, "bbb");

		// Create a link
		Handle h1 = ex1->add_atom(createLink(LIST_LINK, n1, n2));
		delete ex1;

		std::list<Handle> handle_set;
		as1.get_handles_by_type(back_inserter(handle_set), ATOM, false);
		// cogserver crashes at this point; no crash == pass

		AtomSpace* ex2 = new AtomSpace(&as2);

		// Create mixed nodes.
		n2 = ex2->add_node(CONCEPT_NODE, "bbb");

		// Create a link
		h1 = ex2->add_atom(createLink(LIST_LINK, n1, n2));
		delete ex2;

		handle_set.clear();
		as1.get_handles_by_type(back_inserter(handle_set), ATOM, false);
		// cogserver crashes at this point; no crash == pass
	}

	// This tests bug report #97
	void testGetType()
	{
		AtomSpace as;
		AtomSpace ex(&as);

		// Add nodes of same typ.
		as.add_node(CONCEPT_NODE, "aaa");
		ex.add_node(CONCEPT_NODE, "bbb");

		HandleSeq handle_set;
		ex.get_handles_by_type(handle_set, CONCEPT_NODE);

		TS_ASSERT(handle_set.size() == 2);

		ex.clear();

		TS_ASSERT(as.get_size() == 1);
		TS_ASSERT(ex.get_size() == 0);

		handle_set.clear();
		ex.get_handles_by_type(handle_set, CONCEPT_NODE);

		TS_ASSERT(handle_set.size() == 1);
	}

	// This tests bug report #221
	void testMoreSpace()
	{
		AtomSpace as;
		AtomSpace ex(&as);
		AtomSpace ns;

		Handle haa = as.add_node(CONCEPT_NODE, "PLN");
		Handle hab = as.add_node(CONCEPT_NODE, "URE");
		Handle hea = ex.add_link(LIST_LINK, haa, hab);
		Handle heb = ex.add_node(CONCEPT_NODE, "VAR");
		Handle hec = ex.add_link(IMPLICATION_LINK, hea, heb);

		as.add_link(LIST_LINK, haa, hab);

		Handle hna = ns.add_atom(haa);
		Handle hnb = ns.add_atom(hec);
		Handle haa_copy = ex.get_atom(hna);
		Handle hec_copy = ex.get_atom(hnb);

		TS_ASSERT(haa_copy == haa);
		TS_ASSERT(hec_copy == hec);
	}

	// Make sure that values are copied if an atom for an inherited
	// space is copied back to the atomspace it inherits.
	void testCopyValues()
	{
		AtomSpace as;
		AtomSpace ex(&as);

		// Add (Exists (Member X A))
		Handle as_A = as.add_node(CONCEPT_NODE, "A");
		Handle as_X = as.add_node(VARIABLE_NODE, "X");
		Handle as_XA = as.add_link(MEMBER_LINK, as_X, as_A);
		Handle as_S = as.add_link(SCOPE_LINK, as_XA);

		// Add (Exists (Member Y A))
		Handle ex_A = ex.add_node(CONCEPT_NODE, "A");
		Handle ex_Y = ex.add_node(VARIABLE_NODE, "Y");
		Handle ex_YA = ex.add_link(MEMBER_LINK, ex_Y, ex_A);
		Handle ex_S = ex.add_link(SCOPE_LINK, ex_YA);

		// Modify ex_A truth value, add it back to as and check that
		// its tv has been updated as well.
		ex_A->setTruthValue(SimpleTruthValue::createSTV(1.0, 1.0));
		Handle as_ex_A = as.add_atom(ex_A);
		TS_ASSERT(as_ex_A->getTruthValue()->getConfidence() > 0.9);

		// Modify (Exists (Member Y A)) truth value, add it back to
		// as, and (since it is alpha equivalent) check that its tv
		// has been updated as well.
		ex_S->setTruthValue(SimpleTruthValue::createSTV(1.0, 1.0));
		Handle as_ex_S = as.add_atom(ex_S);
		TS_ASSERT(as_ex_S->getTruthValue()->getConfidence() > 0.9);
	}
};
