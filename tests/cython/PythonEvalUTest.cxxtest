#include <string>
#include <cstdio>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/cython/PythonEval.h>
#include <opencog/guile/SchemeEval.h>

#include <cxxtest/TestSuite.h>

using std::string;

using namespace opencog;

const int NO_SIGNAL_HANDLERS = 0;

class PythonEvalUTest :  public CxxTest::TestSuite
{
public:
    PythonEvalUTest()
    {
        logger().set_print_to_stdout_flag(true);

        // setup global logger
        logger().set_level(Logger::DEBUG);
        logger().set_print_to_stdout_flag(true);
    }

    ~PythonEvalUTest() {}

    void setUp() {}

    void tearDown() {}

    void testRawPythonInitialization()
    {
        logger().debug("[PythonEvalUTest] testRawPythonInitialization()");

        // Start up Python.
        Py_InitializeEx(NO_SIGNAL_HANDLERS);
        PyEval_InitThreads();

        // Release the GIL.
        PyEval_ReleaseLock();

        // Stop Python.
        Py_Finalize();

        // Try it again to make sure the Python library cleans up properly.

        // Start up Python.
        Py_InitializeEx(NO_SIGNAL_HANDLERS);
        PyEval_InitThreads();

        // Release the GIL.
        PyEval_ReleaseLock();

        // Stop Python.
        Py_Finalize();

        // And again...

        // Start up Python.
        Py_InitializeEx(NO_SIGNAL_HANDLERS);
        PyEval_InitThreads();

        // Release the GIL.
        PyEval_ReleaseLock();

        // Stop Python.
        Py_Finalize();

        logger().debug("[PythonEvalUTest] testRawPythonInitialization() DONE");
    }

    void testRawPythonInitializeWithGetSys()
    {
        logger().debug("[PythonEvalUTest] testRawPythonInitializeWithGetSys()");

        PyObject* pySysPath = NULL;

        // Get the system path object.
        Py_InitializeEx(NO_SIGNAL_HANDLERS);
        PyEval_InitThreads();

        PyRun_SimpleString(
                    "import sys\n"
                    "import StringIO\n"
                    );
        pySysPath = PySys_GetObject((char*)"path");

        if (logger().is_debug_enabled()) {
            logger().debug("    unit-test Python 'sys.path' is:");
            Py_ssize_t pathSize = PyList_Size(pySysPath);
            for (int pathIndex = 0; pathIndex < pathSize; pathIndex++) {
                PyObject* pySysPathLine = PyList_GetItem(pySysPath, pathIndex);
                const char* sysPathCString = PyString_AsString(pySysPathLine);
                logger().debug("        %2d > %s", pathIndex, sysPathCString);
                // NOTE: PyList_GetItem returns borrowed reference so don't do this:
                // Py_DECREF(pySysPathLine);
            }
        }

        // NOTE: PySys_GetObject returns a borrowed reference so don't do this:
        // Py_DECREF(pySysPath);

        PyEval_ReleaseLock();
        Py_Finalize();

        // Get it again
        Py_InitializeEx(NO_SIGNAL_HANDLERS);
        PyEval_InitThreads();

        PyRun_SimpleString(
                    "import sys\n"
                    "import StringIO\n"
                    );
        pySysPath = PySys_GetObject((char*)"path");

        // NOTE: PySys_GetObject returns a borrowed reference so don't do this:
        // Py_DECREF(pySysPath);

        PyEval_ReleaseLock();
        Py_Finalize();

        logger().debug("[PythonEvalUTest] testRawPythonInitializeWithGetSys() DONE");
    }

    void testGlobalPythonInitializationFinalization()
    {
        logger().debug("[PythonEvalUTest] testGlobalPythonInitializationFinalization()");

        // Initialize and finalize Python.
        global_python_initialize();
        global_python_finalize();

        // Initialize and finalize Python.
        global_python_initialize();
        global_python_finalize();

        logger().debug("[PythonEvalUTest] testGlobalPythonInitializationFinalization() DONE");
    }

    void testPythonEvalSingletonCreationDeletion()
    {
        logger().debug("[PythonEvalUTest] testPythonEvalSingletonCreationDeletion()");

        AtomSpace* atomSpace = NULL;

        // Initialize Python.
        global_python_initialize();

        // Tell the python evaluator to create its singleton instance.
        PythonEval::create_singleton_instance(NULL);

        // Delete the singleton instance of the PythonEval.
        PythonEval::delete_singleton_instance();

        // Cleanup Python.
        global_python_finalize();


        // Now do it again with a non-NULL atomspace object.

        // Initialize Python.
        global_python_initialize();

        // Create an atomspace.
        atomSpace = new AtomSpace();

        // Tell the python evaluator to create its singleton instance
        // with this atomspace.
        PythonEval::create_singleton_instance(atomSpace);

        // Delete the singleton instance of the PythonEval.
        PythonEval::delete_singleton_instance();

        // Delete the atomspace.
        delete atomSpace;
        atomSpace = NULL;

        // Cleanup Python.
        global_python_finalize();


        // Now do it again to make sure we cleaned up properly.


        // Initialize Python.
        global_python_initialize();

        // Create an atomspace.
        atomSpace = new AtomSpace();

        // Tell the python evaluator to create its singleton instance
        // with this atomspace.
        PythonEval::create_singleton_instance(atomSpace);

        // Delete the singleton instance of the PythonEval.
        PythonEval::delete_singleton_instance();

        // Delete the atomspace.
        delete atomSpace;
        atomSpace = NULL;

        // Cleanup Python.
        global_python_finalize();

        logger().debug("[PythonEvalUTest] testPythonEvalSingletonCreationDeletion() DONE");
    }

    void testPythonEvalEvalExpr()
    {
        logger().debug("[PythonEvalUTest] testPythonEvalEvalExpr()");

        // Initialize Python.
        global_python_initialize();

        // Create an atomspace and singleton instance to use it.
        AtomSpace* atomSpace = new AtomSpace();
        PythonEval::create_singleton_instance(atomSpace);
        PythonEval* evaluator = &PythonEval::instance();

        // Check that our atom space global is visible and can add a node.
        evaluator->clear_pending();
        evaluator->eval_expr("from opencog.atomspace import *");
        evaluator->eval_expr("ATOMSPACE.add_node(types.ConceptNode,'test')");
        evaluator->eval_expr("print 'Total atoms = ', ATOMSPACE.size(), '\\n'");

        // Delete the singleton instance and atomspace.
        PythonEval::delete_singleton_instance();
        delete atomSpace;
        atomSpace = NULL;

        // Cleanup Python.
        global_python_finalize();

        logger().debug("[PythonEvalUTest] testPythonEvalEvalExpr() DONE");
    }

    void testApplyAndApplyTV()
    {
        // Initialize Python.
        global_python_initialize();

        AtomSpace *as = new AtomSpace();
        PythonEval::create_singleton_instance(as);
        PythonEval* python = &PythonEval::instance();

        // Define python functions for use by scheme.
        python->eval(
            "from opencog.atomspace import types, Atom, TruthValue\n"
            "def add_link(atom1, atom2):\n"
            "    link = ATOMSPACE.add_link(types.ListLink, [atom1, atom2])\n"
            "    print 'add_link(',atom1,',',atom2,') = ', link\n"
            "    return link\n\n"

            "def return_truth(atom1, atom2):\n"
            "    print 'return_truth TruthValue(0.75, 100.0)'\n"
            "    return TruthValue(0.75, 100.0)\n\n"
            );

#ifdef HAVE_GUILE
        // Create a scheme evaluator to trigger cog-evaluate and cog-execute.
        SchemeEval* scheme = new SchemeEval(as);

        scheme->eval("(use-modules (opencog exec))");

        // Test execute -> PythonEval::apply
        scheme->eval_h(
                "(cog-execute! "
                "   (ExecutionOutputLink"
                "       (GroundedSchemaNode \"py: add_link\")"
                "       (ListLink"
                "           (ConceptNode \"one\")"
                "           (ConceptNode \"two\")"
                "       )"
                "   )"
                ")"
                );
        bool error = scheme->eval_error();
        scheme->clear_pending();
        TSM_ASSERT("Failed cog-execute!", !error);

        // Test cog-evaluate -> PythonEval::apply_tv
        scheme->eval_tv(
                "(cog-evaluate! "
                "   (EvaluationLink"
                "       (GroundedPredicateNode \"py: return_truth\")"
                "       (ListLink"
                "           (ConceptNode \"one\")"
                "           (ConceptNode \"two\")"
                "       )"
                "   )"
                ")"
                );
        error = scheme->eval_error();
        scheme->clear_pending();
        TSM_ASSERT("Failed cog-evaluate!", !error);
#endif // HAVE_GUILE

        // Cleanup Python.
        global_python_finalize();
    }

    void testCodeBlockWithNewline()
    {
        // Initialize Python.
        global_python_initialize();

        AtomSpace *as = new AtomSpace();
        PythonEval::create_singleton_instance(as);
        PythonEval* python = &PythonEval::instance();

        // Define python functions with newline within the code block
        string result = python->eval(
            "def fun(x):\n"
            "    y = x + 1\n"
            "\n"
            "    return y\n"
            "\n"
            "fun(1)\n\n"
            );

        std::cout << "result = " << result << std::endl;

        // Because results are ignored this cannot be tested as of now
        // TS_ASSERT_EQUALS(result, "3");
        TS_ASSERT(true);

        // Cleanup Python.
        global_python_finalize();
    }
};
