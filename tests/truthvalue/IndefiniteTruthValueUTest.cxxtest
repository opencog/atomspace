/*
 * tests/atomspace/IndefiniteTruthValueUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Welter Silva <welter@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <stdlib.h>
#include <math.h>

#include <opencog/util/Logger.h>
#include <opencog/util/exceptions.h>
#include <opencog/util/numeric.h>

#include <opencog/truthvalue/IndefiniteTruthValue.h>
#include <opencog/truthvalue/SimpleTruthValue.h>

using namespace opencog;
using namespace std;

#define NUM_TVS 3
#define TV1_L 0.0f
#define TV2_L 0.4f
#define TV3_L 0.8f
#define TV1_U 0.4f
#define TV2_U 0.8f
#define TV3_U 1.0f
#define ERROR_THRESHOLD 0.01f

// floats only have about 7.5 digits of precision
#define FLOAT_ACCEPTABLE_ERROR 0.000001

#define DIFF_ACCEPTABLE_ERROR 0.01f

//these 2 following functions are used by computeDiff
//solely for testing purpose
static double TestIntegralFormula(double x, void * params)
{
  double L_, U_,k_,s_;
  double *in_params = static_cast<double*>(params);
  L_ = in_params[0];
  U_ = in_params[1];
  k_ = in_params[2];
  s_ = in_params[3];
  double f = (pow((x-L_),(k_*s_))) * pow((U_-x),(k_*(1-s_)));
  return f;
}

static strength_t TestDensityIntegral(strength_t lower, strength_t upper,
                                 strength_t L_, strength_t U_, count_t k_, strength_t s_)
{
  double params[4];
  params[0] = static_cast<double>(L_);
  params[1] = static_cast<double>(U_);
  params[2] = static_cast<double>(k_);
  params[3] = static_cast<double>(s_);

#define NSTEPS 15.0
  double delta = (upper-lower) / NSTEPS;
  double result = 0.0;
  for (double x=lower; x<upper; x += delta) {
      result += TestIntegralFormula(x, &params);
  }
  result *= delta;

  return (strength_t) result;
}


class IndefiniteTruthValueUTest :  public CxxTest::TestSuite
{

private:
    IndefiniteTruthValue* tvs[NUM_TVS];
    strength_t ls[NUM_TVS];
    strength_t us[NUM_TVS];
    strength_t means[NUM_TVS];

    count_t default_k;

    count_t count(strength_t l, strength_t u)
    {
        strength_t W = u - l;
        W = max(W, 0.0000001f);
        return (default_k*(1 - W) / W);
    }

    confidence_t confidence(strength_t l, strength_t u)
    {
        count_t c = count(l, u);
        return (c / (c + default_k));
    }

    strength_t computeDiff(strength_t L, strength_t U, count_t K, strength_t b)
    {
      if(U==L) {
        return 0.0f;
      }
      else {
        strength_t idiff = 0.01;
        strength_t L1, U1;
        strength_t numerator, denominator, result;
        strength_t expected = (1-b)/2;
        bool lt_expected = true, gt_expected = true;
        while (lt_expected || gt_expected) {
          U1 = U + idiff;
          L1 = L - idiff;

          numerator = TestDensityIntegral(U,U1,L1,U1,default_k,IndefiniteTruthValue::s);
          denominator = TestDensityIntegral(L1,U1,L1,U1,default_k,IndefiniteTruthValue::s);

          if (denominator > 0) result = numerator / denominator;
          else result = 0.0;

          lt_expected = result < expected - IndefiniteTruthValue::diffError;
          gt_expected = result > expected + IndefiniteTruthValue::diffError;

          if(lt_expected) idiff += idiff/2;
          if(gt_expected) idiff -= idiff/2;
        }
        return idiff;
      }
    }

public:
    IndefiniteTruthValueUTest() {
        default_k = 2.0f;
        ls[0] = TV1_L;
        ls[1] = TV2_L;
        ls[2] = TV3_L;

        us[0] = TV1_U;
        us[1] = TV2_U;
        us[2] = TV3_U;
        for (int i = 0; i < NUM_TVS; i++) {
            means[i] = (ls[i] + us[i]) / 2;
        }
    }

    void setUp() {
        for (int i = 0; i < NUM_TVS; i++) {
            tvs[i] = new IndefiniteTruthValue(ls[i], us[i]);
        }
        IndefiniteTruthValue::setDefaultK(default_k);
    }

    void tearDown() {
        for (int i = 0; i < NUM_TVS; i++) {
            delete tvs[i];
        }
    }


    void testConstructor() {
        IndefiniteTruthValue* tv;
        tv = new IndefiniteTruthValue();
        TS_ASSERT(fabs(tv->getU()  - 0) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv->getL()  - 0) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv->getConfidenceLevel()  - IndefiniteTruthValue::DEFAULT_CONFIDENCE_LEVEL) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv->getDiff()  - 0) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(tv->isSymmetric());
        TS_ASSERT(fabs(tv->getMean()  - 0) <= FLOAT_ACCEPTABLE_ERROR);
        count_t expectedCount = count(0, 0);
        confidence_t expectedConfidence = confidence(0, 0);
        TS_ASSERT(isApproxEq(tv->getCount(), expectedCount, FLOAT_ACCEPTABLE_ERROR));
        //logger().debug("tv->getCount() = %f, expectedCount = %f", tv->getCount() , expectedCount);
        TS_ASSERT(fabs(tv->getConfidence() - expectedConfidence) <= ERROR_THRESHOLD);

        for (int i = 0; i < NUM_TVS; i++) {
            tv = tvs[i];
            TS_ASSERT(tv != NULL);
            TS_ASSERT(fabs(tv->getL()  - ls[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv->getU()  - us[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv->getConfidenceLevel()  - IndefiniteTruthValue::DEFAULT_CONFIDENCE_LEVEL) <= FLOAT_ACCEPTABLE_ERROR);
            //compute diff using a method provided with the UTest
            strength_t computedDiff = computeDiff(tv->getL(), tv->getU(), default_k, tv->getConfidenceLevel());
            std::cout << "COMPUTE DIFF : " << computedDiff
                      << " DIFF : " << tv->getDiff() << std::endl;
            TS_ASSERT(isApproxEq(tv->getDiff(), computedDiff, DIFF_ACCEPTABLE_ERROR));
            TS_ASSERT(tv->isSymmetric());
            TS_ASSERT(fabs(tv->getMean() - means[i]) <= ERROR_THRESHOLD);
            count_t expectedCount = count(ls[i], us[i]);
            confidence_t expectedConfidence = confidence(ls[i], us[i]);
            TS_ASSERT(fabs(tv->getCount() - expectedCount) <= ERROR_THRESHOLD);
            TS_ASSERT(fabs(tv->getConfidence() - expectedConfidence) <= ERROR_THRESHOLD);
        }
    }

    void testCopyConstructor() {
        IndefiniteTruthValue* tv0 = new IndefiniteTruthValue();
        IndefiniteTruthValue* tv = new IndefiniteTruthValue(*tv0);
        TS_ASSERT(fabs(tv->getU()  - 0) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv->getL()  - 0) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv->getConfidenceLevel()  - IndefiniteTruthValue::DEFAULT_CONFIDENCE_LEVEL) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(tv->getDiff()  - 0) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(tv->isSymmetric());
        TS_ASSERT(fabs(tv->getMean()  - 0) <= FLOAT_ACCEPTABLE_ERROR);
        count_t expectedCount = count(0, 0);
        confidence_t expectedConfidence = confidence(0, 0);
        TS_ASSERT(isApproxEq(tv->getCount(), expectedCount, FLOAT_ACCEPTABLE_ERROR));
        //logger().debug("tv->getCount() = %f, expectedCount = %f", tv->getCount() , expectedCount);
        TS_ASSERT(fabs(tv->getConfidence() - expectedConfidence) <= ERROR_THRESHOLD);

        for (int i = 0; i < NUM_TVS; i++) {
            tv = new IndefiniteTruthValue(*(tvs[i]));
            TS_ASSERT(tv != NULL);
            TS_ASSERT(fabs(tv->getL()  - ls[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv->getU()  - us[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv->getConfidenceLevel()  - IndefiniteTruthValue::DEFAULT_CONFIDENCE_LEVEL) <= FLOAT_ACCEPTABLE_ERROR);
            //compute diff using a method provided with the UTest
            strength_t computedDiff = computeDiff(tv->getL(), tv->getU(), default_k, tv->getConfidenceLevel());
            TS_ASSERT(isApproxEq(tv->getDiff(), computedDiff, DIFF_ACCEPTABLE_ERROR));
            TS_ASSERT(tv->isSymmetric());
            TS_ASSERT(fabs(tv->getMean() - means[i]) <= ERROR_THRESHOLD);
            count_t expectedCount = count(ls[i], us[i]);
            confidence_t expectedConfidence = confidence(ls[i], us[i]);
            TS_ASSERT(fabs(tv->getCount() - expectedCount) <= ERROR_THRESHOLD);
            TS_ASSERT(fabs(tv->getConfidence() - expectedConfidence) <= ERROR_THRESHOLD);
        }
    }

    void testSetAndGetMean() {
        for (int i = 0; i < NUM_TVS; i++) {
            IndefiniteTruthValue* tv = tvs[i];
            for (int j = 0; j < 10; j++) {
                strength_t mean = j * 0.1f;
                tvs[i]->setMean(mean);
                TS_ASSERT(fabs(tv->getMean() - mean) <= ERROR_THRESHOLD);
                TS_ASSERT(fabs(tv->getL()  - ls[i]) <= FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(fabs(tv->getU()  - us[i]) <= FLOAT_ACCEPTABLE_ERROR);
                count_t expectedCount = count(ls[i], us[i]);
                confidence_t expectedConfidence = confidence(ls[i], us[i]);
                TS_ASSERT(fabs(tv->getCount() - expectedCount) <= ERROR_THRESHOLD);
                TS_ASSERT(fabs(tv->getConfidence() - expectedConfidence) <= ERROR_THRESHOLD);
            }
        }
    }

    void testSetAndGetL() {
        for (int i = 0; i < NUM_TVS; i++) {
            IndefiniteTruthValue* tv = tvs[i];
            for (int j = 0; j < 10; j++) {
                strength_t l = j * 0.1f;
                tvs[i]->setL(l);
                TS_ASSERT(fabs(tv->getL()  - l) <= FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(fabs(tv->getU()  - us[i]) <= FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(isApproxEq(tv->getMean(), (l+us[i])/2, ERROR_THRESHOLD));
                count_t expectedCount = count(l, us[i]);
                confidence_t expectedConfidence = confidence(l, us[i]);

                // Some of the expectedCount are small (e.g. 0.222...)
                // and some are large (e.g. 19999998) so take care with diff.
                // ... and sometimes expected count is zero ...
                if (1.0 < expectedCount) {
                    TS_ASSERT(fabs(tv->getCount() / expectedCount - 1.0f) <= FLOAT_ACCEPTABLE_ERROR);
                } else {
                    TS_ASSERT(fabs(tv->getCount() - expectedCount) <= FLOAT_ACCEPTABLE_ERROR);
                }
                TS_ASSERT(fabs(tv->getConfidence() - expectedConfidence) <= ERROR_THRESHOLD);
            }
        }
    }

    void testSetAndGetU() {
        for (int i = 0; i < NUM_TVS; i++) {
            IndefiniteTruthValue* tv = tvs[i];
            for (int j = 0; j < 10; j++) {
                strength_t u = j * 0.1f;
                tvs[i]->setU(u);
                TS_ASSERT(fabs(tv->getL()  - ls[i]) <= FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(fabs(tv->getU()  - u) <= FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(isApproxEq(tv->getMean(), (ls[i]+u)/2, ERROR_THRESHOLD));
                count_t expectedCount = count(ls[i], u);
                confidence_t expectedConfidence = confidence(ls[i], u);

                // Some of the expectedCount are small (e.g. 0.222...)
                // and some are large (e.g. 19999998) so take care with diff.
                if (1.0 < expectedCount) {
                    TS_ASSERT(fabs(tv->getCount() / expectedCount - 1.0f) <= FLOAT_ACCEPTABLE_ERROR);
                } else {
                    TS_ASSERT(fabs(tv->getCount() - expectedCount) <= FLOAT_ACCEPTABLE_ERROR);
                }
                TS_ASSERT(fabs(tv->getConfidence() - expectedConfidence) <= ERROR_THRESHOLD);
            }
        }
    }

    void testSetAndGetConfidenceLevel() {
        for (int i = 0; i < NUM_TVS; i++) {
            IndefiniteTruthValue* tv = tvs[i];
            for (int j = 0; j < 10; j++) {
                confidence_t confLevel = j * 0.1f;
                tvs[i]->setConfidenceLevel(confLevel);
                TS_ASSERT(fabs(tv->getConfidenceLevel()  - confLevel) <= FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(fabs(tv->getL()  - ls[i]) <= FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(fabs(tv->getU()  - us[i]) <= FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(fabs(tv->getMean() - means[i]) <= ERROR_THRESHOLD);
                count_t expectedCount = count(ls[i], us[i]);
                confidence_t expectedConfidence = confidence(ls[i], us[i]);
                TS_ASSERT(fabs(tv->getCount() - expectedCount) <= ERROR_THRESHOLD);
                TS_ASSERT(fabs(tv->getConfidence() - expectedConfidence) <= ERROR_THRESHOLD);
            }
        }
    }

    void testSetAndGetDiff() {
        for (int i = 0; i < NUM_TVS; i++) {
            IndefiniteTruthValue* tv = tvs[i];
            for (int j = 0; j < 10; j++) {
                strength_t diff = j * 0.1f;
                tv->setDiff(diff);
                TS_ASSERT(fabs(tv->getDiff()  - diff) <= FLOAT_ACCEPTABLE_ERROR);
                //logger().debug("diff = %f, tv->getL_() = %f, (ls[i] - diff) = %f", diff, tv->getL_(), (ls[i] - diff));
                TS_ASSERT(fabs(tv->getL_() - (ls[i] - diff)) <= ERROR_THRESHOLD);
                TS_ASSERT(fabs(tv->getU_() - (us[i] + diff)) <= ERROR_THRESHOLD);
                TS_ASSERT(fabs(tv->getL()  - ls[i]) <= FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(fabs(tv->getU()  - us[i]) <= FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(fabs(tv->getMean() - means[i]) <= ERROR_THRESHOLD);
                count_t expectedCount = count(ls[i], us[i]);
                confidence_t expectedConfidence = confidence(ls[i], us[i]);
                TS_ASSERT(fabs(tv->getCount() - expectedCount) <= ERROR_THRESHOLD);
                TS_ASSERT(fabs(tv->getConfidence() - expectedConfidence) <= ERROR_THRESHOLD);
            }
        }
    }

    void testGetCount() {
        for (int i = 0; i < NUM_TVS; i++) {
            TS_ASSERT(fabs(tvs[i]->getCount() - count(ls[i], us[i])) <= ERROR_THRESHOLD);
        }
    }

    void testGetConfidence() {
        for (int i = 0; i < NUM_TVS; i++) {
            TS_ASSERT(fabs(tvs[i]->getConfidence() - confidence(ls[i], us[i])) <= ERROR_THRESHOLD);
        }
    }

    void testGetU_AndL_() {
        for (int i = 0; i < NUM_TVS; i++) {
            TS_ASSERT(fabs(tvs[i]->getL() - ls[i]) <= ERROR_THRESHOLD);
            TS_ASSERT(fabs(tvs[i]->getU() - us[i]) <= ERROR_THRESHOLD);
            for (int j = 10; j <= 0; j--) {
                strength_t diff = j * 0.1f;
                tvs[i]->setDiff(diff);
                TS_ASSERT(fabs(tvs[i]->getL_() - (ls[i] - diff)) <= ERROR_THRESHOLD);
                TS_ASSERT(fabs(tvs[i]->getU_() - (us[i] + diff)) <= ERROR_THRESHOLD);
            }
        }
    }

    void testIstSymmetric() {
        TS_ASSERT(IndefiniteTruthValue().isSymmetric());
        for (int i = 0; i < NUM_TVS; i++) {
            TS_ASSERT(tvs[i]->isSymmetric());
        }
    }

    void testGetType() {
        for (int i = 0; i < NUM_TVS; i++) {
            TS_ASSERT(tvs[i]->getType() == INDEFINITE_TRUTH_VALUE);
        }
    }

    void testClone() {
        for (int i = 0; i < NUM_TVS; i++) {
            TruthValuePtr clon = tvs[i]->clone();
            IndefiniteTruthValuePtr clonedTv = IndefiniteTVCast(clon);
            TS_ASSERT(fabs(clonedTv->getL()  - ls[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(clonedTv->getU()  - us[i]) <= FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(clonedTv->getConfidenceLevel()  - IndefiniteTruthValue::DEFAULT_CONFIDENCE_LEVEL) <= FLOAT_ACCEPTABLE_ERROR);
            //compute diff using a method provided with the UTest
            strength_t computedDiff = computeDiff(clonedTv->getL(), clonedTv->getU(),
                                             default_k, clonedTv->getConfidenceLevel());
            TS_ASSERT(isApproxEq(clonedTv->getDiff(), computedDiff, DIFF_ACCEPTABLE_ERROR));
            TS_ASSERT(clonedTv->isSymmetric());
            TS_ASSERT(fabs(clonedTv->getMean() - means[i]) <= ERROR_THRESHOLD);
            count_t expectedCount = count(ls[i], us[i]);
            confidence_t expectedConfidence = confidence(ls[i], us[i]);
            TS_ASSERT(fabs(clonedTv->getCount() - expectedCount) <= ERROR_THRESHOLD);
            TS_ASSERT(fabs(clonedTv->getConfidence() - expectedConfidence) <= ERROR_THRESHOLD);
        }
        // Changes all attributes and check if clone still works fine.
        tvs[0]->setL(ls[1]);
        tvs[0]->setU(us[1]);
        tvs[0]->setConfidenceLevel(IndefiniteTruthValue::DEFAULT_CONFIDENCE_LEVEL + 0.1f);
        tvs[0]->setDiff(0.1f);
        //tvs[0]->setSymmetric(false); Cannot call this yet because it thows an exception (asymmetric indefinite tv is not implemented)
        tvs[0]->setMean(means[1]);
        TruthValuePtr clon = tvs[0]->clone();
        IndefiniteTruthValuePtr clonedTv = IndefiniteTVCast(clon);
        TS_ASSERT(fabs(clonedTv->getL()  - ls[1]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(clonedTv->getU()  - us[1]) <= FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(fabs(clonedTv->getConfidenceLevel() - (IndefiniteTruthValue::DEFAULT_CONFIDENCE_LEVEL + 0.1f)) <= ERROR_THRESHOLD);
        TS_ASSERT(fabs(clonedTv->getDiff() - 0.1f) <= ERROR_THRESHOLD);
        //TS_ASSERT(!clonedTv->isSymmetric());
        TS_ASSERT(clonedTv->isSymmetric());
        TS_ASSERT(fabs(clonedTv->getMean() - means[1]) <= ERROR_THRESHOLD);
        count_t expectedCount = count(ls[1], us[1]);
        confidence_t expectedConfidence = confidence(ls[1], us[1]);
        TS_ASSERT(fabs(clonedTv->getCount() - expectedCount) <= ERROR_THRESHOLD);
        TS_ASSERT(fabs(clonedTv->getConfidence() - expectedConfidence) <= ERROR_THRESHOLD);
    }

    void testSetAndGetFirstOrderDistribution() {
        for (unsigned int i = 0; i < NUM_TVS; i++) {
            IndefiniteTruthValue* tv = tvs[i];
            TS_ASSERT(tv->getFirstOrderDistribution().size() == 0);
            vector<strength_t*> v;
            for (unsigned int j = 0; j < i; j++) {
                strength_t* fv = (strength_t*) malloc(j * sizeof(strength_t));
                for (unsigned int k = 0; k < j; k++) {
                    fv[k] = k * 0.1f;
                }
                v.push_back(fv);
            }
            tv->setFirstOrderDistribution(v);
            v = tv->getFirstOrderDistribution();
            TS_ASSERT(v.size() == i);
            for (unsigned int j = 0; j < i; j++) {
                strength_t* fv = v[j];
                for (unsigned int k = 0; k < j; k++) {
                    TS_ASSERT(fabs(fv[k]  - k*0.1) <= FLOAT_ACCEPTABLE_ERROR);
                }
                free(fv);
            }
        }
    }
};
