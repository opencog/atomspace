/*
 * tests/atoms/StateUTest.cxxtest
 *
 * Copyright (C) 2015 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atoms/base/Atom.h>
#include <opencog/atoms/base/Node.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/core/StateLink.h>
#include <opencog/atoms/execution/Instantiator.h>

using namespace opencog;

// Test the StateLink.
//
class StateLinkUTest :  public CxxTest::TestSuite
{
private:
	AtomSpace _as;

public:
	StateLinkUTest()
	{
		logger().set_print_to_stdout_flag(true);
	}

	void setUp() { _as.clear(); }

	void tearDown() {}

	void test_setting();
	void test_getting();
	void test_putting();
	void test_list();
};

#define N _as.add_node
#define L _as.add_link

// Test to make sure that there is only ever one StateLink.
void StateLinkUTest::test_setting()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Set the state to apple.
	Handle fruit, apple, bananna;
	LinkPtr link = LinkCast(
		L(STATE_LINK,
			fruit = N(ANCHOR_NODE, "fruit"),
			apple = N(CONCEPT_NODE, "apple")));

	bananna = N(CONCEPT_NODE, "bananna");

	// The incoming set should be simple.
	TS_ASSERT_EQUALS(1, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(apple, link->getOutgoingAtom(1));

	// Change the state to bananna
	link = LinkCast(
		L(STATE_LINK,
			N(ANCHOR_NODE, "fruit"),
			N(CONCEPT_NODE, "bananna")));

	// The incoming set should be simple.
	TS_ASSERT_EQUALS(1, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(bananna, link->getOutgoingAtom(1));


	// Change the state back to apple.
	link = LinkCast(
		L(STATE_LINK,
			N(ANCHOR_NODE, "fruit"),
			N(CONCEPT_NODE, "apple")));

	// The incoming set should be simple.
	TS_ASSERT_EQUALS(1, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(apple, link->getOutgoingAtom(1));

	// Change the state back to bananna, again
	link = LinkCast(
		L(STATE_LINK,
			N(ANCHOR_NODE, "fruit"),
			N(CONCEPT_NODE, "bananna")));

	// The incoming set should be simple.
	TS_ASSERT_EQUALS(1, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(bananna, link->getOutgoingAtom(1));


	// Change the state back to apple, again
	link = LinkCast(
		L(STATE_LINK,
			N(ANCHOR_NODE, "fruit"),
			N(CONCEPT_NODE, "apple")));

	// The incoming set should be simple.
	TS_ASSERT_EQUALS(1, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(apple, link->getOutgoingAtom(1));

	// --------------------------------------
	// ... But variable nodes are OK...
	Handle vara = N(VARIABLE_NODE, "$vara");
	Handle varb = N(VARIABLE_NODE, "$varb");
	L(STATE_LINK, N(ANCHOR_NODE, "fruit"), vara);
	L(STATE_LINK, N(ANCHOR_NODE, "fruit"), varb);

	// The incoming set should have 2 vars and one apple.
	TS_ASSERT_EQUALS(3, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(apple, link->getOutgoingAtom(1));

	// Change the state to bananna, again
	link = LinkCast(
		L(STATE_LINK,
			N(ANCHOR_NODE, "fruit"),
			N(CONCEPT_NODE, "bananna")));

	// The incoming set should have vars and bananna.
	TS_ASSERT_EQUALS(3, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(bananna, link->getOutgoingAtom(1));

	// Change the state back to apple, again
	link = LinkCast(
		L(STATE_LINK,
			N(ANCHOR_NODE, "fruit"),
			N(CONCEPT_NODE, "apple")));

	// The incoming set should two vars, one apple.
	TS_ASSERT_EQUALS(3, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(apple, link->getOutgoingAtom(1));

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test to make sure GetLink works.
void StateLinkUTest::test_getting()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle empty_get =
		L(GET_LINK,
			L(STATE_LINK, N(ANCHOR_NODE, "fruit"), N(VARIABLE_NODE, "$x")));

	Instantiator inst(&_as);
	Handle gotten = inst.execute(empty_get);
	printf("Got %s\n", gotten->toString().c_str());

	Handle empty_set = L(SET_LINK, HandleSeq());

	// The result of the get should be correct.
	TS_ASSERT_EQUALS(gotten, empty_set);

	// Set the state to apple.
	Handle fruit, apple, bananna;
	L(STATE_LINK,
		fruit = N(ANCHOR_NODE, "fruit"),
		apple = N(CONCEPT_NODE, "apple"));

	bananna = N(CONCEPT_NODE, "bananna");

	Handle get =
		L(GET_LINK,
			L(STATE_LINK, N(ANCHOR_NODE, "fruit"), N(VARIABLE_NODE, "$x")));

	gotten = inst.execute(get);
	printf("Got %s\n", gotten->toString().c_str());

	Handle apple_set = L(SET_LINK, N(CONCEPT_NODE, "apple"));

	// The result of the get should be correct.
	TS_ASSERT_EQUALS(gotten, apple_set);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test to make sure PutLink works.
void StateLinkUTest::test_putting()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Set the state to apple.
	Handle fruit, apple, bananna;
	L(STATE_LINK,
		fruit = N(ANCHOR_NODE, "fruit"),
		apple = N(CONCEPT_NODE, "apple"));

	bananna = N(CONCEPT_NODE, "bananna");

	Handle put =
		L(PUT_LINK,
			L(STATE_LINK, N(ANCHOR_NODE, "fruit"), N(VARIABLE_NODE, "$y")),
			N(CONCEPT_NODE, "strawberry"));

	Instantiator inst(&_as);
	Handle putten = inst.execute(put);
	printf("Put %s\n", putten->toString().c_str());

	Handle strawberry = N(CONCEPT_NODE, "strawberry");

	Handle state = StateLink::get_state(N(ANCHOR_NODE, "fruit"));

	// The incoming set should be simple.
	TS_ASSERT_EQUALS(state, strawberry);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test to make sure a ListLink can be used as the key.
// Cut-n-paste of the test_setting() test, except that the
// anchor will be a list.
#define NA(T,S) Handle(createNode(T,S))
#define LA(T,A1,A2) Handle(createLink(T,A1,A2))
void StateLinkUTest::test_list()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle fruit =
		L(LIST_LINK, N(ANCHOR_NODE, "fruit"), N(CONCEPT_NODE, "fresh"));

	// Set the state to apple.
	Handle apple, bananna;
	LinkPtr link = LinkCast(
		L(STATE_LINK,
			LA(LIST_LINK, NA(ANCHOR_NODE, "fruit"), NA(CONCEPT_NODE, "fresh")),
			apple = N(CONCEPT_NODE, "apple")));

	bananna = N(CONCEPT_NODE, "bananna");

	// The incoming set should be simple.
	TS_ASSERT_EQUALS(1, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(apple, link->getOutgoingAtom(1));

	// Change the state to bananna
	link = LinkCast(
		L(STATE_LINK,
			LA(LIST_LINK, NA(ANCHOR_NODE, "fruit"), NA(CONCEPT_NODE, "fresh")),
			N(CONCEPT_NODE, "bananna")));

	// The incoming set should be simple.
	TS_ASSERT_EQUALS(1, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(bananna, link->getOutgoingAtom(1));


	// Change the state back to apple.
	link = LinkCast(
		L(STATE_LINK,
			LA(LIST_LINK, NA(ANCHOR_NODE, "fruit"), NA(CONCEPT_NODE, "fresh")),
			N(CONCEPT_NODE, "apple")));

	// The incoming set should be simple.
	TS_ASSERT_EQUALS(1, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(apple, link->getOutgoingAtom(1));

	// Change the state back to bananna, again
	link = LinkCast(
		L(STATE_LINK,
			LA(LIST_LINK, NA(ANCHOR_NODE, "fruit"), NA(CONCEPT_NODE, "fresh")),
			N(CONCEPT_NODE, "bananna")));

	// The incoming set should be simple.
	TS_ASSERT_EQUALS(1, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(bananna, link->getOutgoingAtom(1));


	// Change the state back to apple, again
	link = LinkCast(
		L(STATE_LINK,
			LA(LIST_LINK, NA(ANCHOR_NODE, "fruit"), NA(CONCEPT_NODE, "fresh")),
			N(CONCEPT_NODE, "apple")));

	// The incoming set should be simple.
	TS_ASSERT_EQUALS(1, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(apple, link->getOutgoingAtom(1));

	// --------------------------------------
	// ... But variable nodes are OK...
	Handle vara = N(VARIABLE_NODE, "$vara");
	Handle varb = N(VARIABLE_NODE, "$varb");
	L(STATE_LINK,
		LA(LIST_LINK, NA(ANCHOR_NODE, "fruit"), NA(CONCEPT_NODE, "fresh")),
		vara);
	L(STATE_LINK,
		LA(LIST_LINK, NA(ANCHOR_NODE, "fruit"), NA(CONCEPT_NODE, "fresh")),
		varb);

	// The incoming set should have 2 vars and one apple.
	TS_ASSERT_EQUALS(3, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(apple, link->getOutgoingAtom(1));

	// Change the state to bananna, again
	link = LinkCast(
		L(STATE_LINK,
			LA(LIST_LINK, NA(ANCHOR_NODE, "fruit"), NA(CONCEPT_NODE, "fresh")),
			N(CONCEPT_NODE, "bananna")));

	// The incoming set should have vars and bananna.
	TS_ASSERT_EQUALS(3, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(bananna, link->getOutgoingAtom(1));

	// Change the state back to apple, again
	link = LinkCast(
		L(STATE_LINK,
			LA(LIST_LINK, NA(ANCHOR_NODE, "fruit"), NA(CONCEPT_NODE, "fresh")),
			N(CONCEPT_NODE, "apple")));

	// The incoming set should two vars, one apple.
	TS_ASSERT_EQUALS(3, fruit->getIncomingSetSize());
	TS_ASSERT_EQUALS(1, apple->getIncomingSetSize());
	TS_ASSERT_EQUALS(0, bananna->getIncomingSetSize());
	TS_ASSERT_EQUALS(fruit, link->getOutgoingAtom(0));
	TS_ASSERT_EQUALS(apple, link->getOutgoingAtom(1));

	logger().info("END TEST: %s", __FUNCTION__);
}
