/*
 * tests/atoms/PutLinkUTest.cxxtest
 *
 * Copyright (C) 2015,2017 Linas Vepstas
 * Copyright (C) 2016 Nil Geiswieller
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/exceptions.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/atoms/base/Atom.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/core/PutLink.h>
#include <opencog/atoms/execution/Instantiator.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

// Test the PutLink.
//
class PutLinkUTest: public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _eval;

public:
	PutLinkUTest() : _eval(&_as)
	{
		logger().set_print_to_stdout_flag(true);
		logger().set_level(Logger::DEBUG);
		logger().set_timestamp_flag(false);
		logger().set_sync_flag(true); // interleave with printf correctly

		_eval.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");

	}

	void setUp() {}

	void tearDown() {}

	void test_define();
	void test_filtering();
	void test_function();
	void test_lambda();
	void test_lambda_partial_substitution();
	void test_eta();
	void test_alpha();
	void test_compose();
	void test_inject_compose();
	void test_simple_alpha();
	void test_simple_replace();
	void test_typed_compose();
	void test_ident_compose();
	void test_again_compose_ident();
	void test_recursive_compose();
	void test_eval_inheritance();
	void test_eval_implication_1();
	void test_eval_implication_2();
	void test_ill_unquote();
	void test_nested_1();
	void test_nested_2();
	void test_nested_3();
	void test_nested_4();
	void test_nested_5();
	void test_and_compose_1();
	void test_and_compose_2();
	void test_quoted_put();
	void test_ill_put();
	void test_tricky_put_1();
	void test_tricky_put_2();
	void test_tricky_put_3();
	void test_tricky_put_4();
	void test_tricky_put_5();
};

#define N _as.add_node
#define L _as.add_link

// Test to make sure that PutLink filters.
void PutLinkUTest::test_define()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	L(DEFINE_LINK,
		N(DEFINED_SCHEMA_NODE, "foobar"),
		L(LAMBDA_LINK,
			L(INHERITANCE_LINK,
				N(CONCEPT_NODE, "aaa"),
				N(VARIABLE_NODE, "$zzz"))));

	Handle put =
	L(PUT_LINK,
		N(DEFINED_SCHEMA_NODE, "foobar"),
		N(CONCEPT_NODE, "bbb"));

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);

	Handle pat =
	L(INHERITANCE_LINK,
		N(CONCEPT_NODE, "aaa"),
		N(CONCEPT_NODE, "bbb"));

	printf("Expecting %s\n", pat->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, pat);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test to make sure that PutLink filters.
void PutLinkUTest::test_filtering()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Copied from /examples/guile/filter.scm
	// This test must pass; it is used in multiple wiki pages
	// as an example, including PutLink, LambdaLink,
	// DefinedSchemaLink, etc.
	Handle foo, bar;
	Handle filt =
		L(PUT_LINK,
			L(LAMBDA_LINK,
				L(TYPED_VARIABLE_LINK,
					N(VARIABLE_NODE, "$x"),
					N(TYPE_NODE, "ConceptNode")),
				N(VARIABLE_NODE, "$x")),
			L(SET_LINK,
				N(NUMBER_NODE, "42"),
				foo = N(CONCEPT_NODE, "foo"),
				N(PREDICATE_NODE, "biffle"),
				L(EVALUATION_LINK,
					N(CONCEPT_NODE, "thingy")),
				N(SCHEMA_NODE, "finagle"),
				bar = N(CONCEPT_NODE, "bar")));

	// Test that execution filters as desired...
	Instantiator inst(&_as);
	Handle cncpts = inst.execute(filt);

	printf("Filtered %s\n", cncpts->to_string().c_str());
	TS_ASSERT_EQUALS(SET_LINK, cncpts->get_type());
	TS_ASSERT_EQUALS(2, cncpts->get_arity());
	Handle a = cncpts->getOutgoingAtom(0);
	Handle b = cncpts->getOutgoingAtom(1);
	TS_ASSERT(foo == a or foo == b);
	TS_ASSERT(bar == a or bar == b);
	TS_ASSERT(a != b);

	logger().info("END TEST: %s", __FUNCTION__);
}

void PutLinkUTest::test_function()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);
	Instantiator inst(&_as);

	// Test that 2+2 = 4
	// (Put (Plus) (List (Number 2) (Number 2)))
	Handle want_four =
		L(PUT_LINK,
			L(PLUS_LINK),
			L(LIST_LINK, N(NUMBER_NODE, "2"), N(NUMBER_NODE, "2")));

	Handle four = inst.execute(want_four);
	Handle expected_four = N(NUMBER_NODE, "4");

	printf("Expecting %s\n", expected_four->to_string().c_str());
	printf("Got %s\n", four->to_string().c_str());
	TS_ASSERT_EQUALS(four, expected_four);

	// Test that 2 = 2
	// (Put (Plus) (Number 2))
	Handle want_two =
		L(PUT_LINK, L(PLUS_LINK), N(NUMBER_NODE, "2"));

	Handle two = inst.execute(want_two);
	Handle expected_two = N(NUMBER_NODE, "2");

	printf("Expecting %s\n", expected_two->to_string().c_str());
	printf("Got %s\n", two->to_string().c_str());
	TS_ASSERT_EQUALS(two, expected_two);

	// Test the combinator (+9) (2+2) = 13
	// (Put (Plus (Number 9)) (List (Number 2) (Number 2)))
	Handle want_thirteen =
		L(PUT_LINK,
			L(PLUS_LINK, N(NUMBER_NODE, "9")),
			L(LIST_LINK, N(NUMBER_NODE, "2"), N(NUMBER_NODE, "2")));

	Handle thirteen = inst.execute(want_thirteen);
	Handle expected_thirteen = N(NUMBER_NODE, "13");

	printf("Expecting %s\n", expected_thirteen->to_string().c_str());
	printf("Got %s\n", thirteen->to_string().c_str());
	TS_ASSERT_EQUALS(thirteen, expected_thirteen);

	// Test the combinator (+ 3 5) (2+2) = 12
	// (Put (Plus (Number 3) (Number 5)) (List (Number 2) (Number 2)))
	Handle want_twelve =
		L(PUT_LINK,
			L(PLUS_LINK, N(NUMBER_NODE, "3"), N(NUMBER_NODE, "5")),
			L(LIST_LINK, N(NUMBER_NODE, "2"), N(NUMBER_NODE, "2")));

	Handle twelve = inst.execute(want_twelve);
	Handle expected_twelve = N(NUMBER_NODE, "12");

	printf("Expecting %s\n", expected_twelve->to_string().c_str());
	printf("Got %s\n", twelve->to_string().c_str());
	TS_ASSERT_EQUALS(twelve, expected_twelve);

	// Test a complex set.
	// (Put (Times) (Set
	//    (Number 1)
	//    (List (Number 2) (Number 2))
	//    (List (Number 3) (Number 3) (Number 3))
	//    (List (Number 4) (Number 4) (Number 4) (Number 4))
	// )))
	//
	Handle want_set =
		L(PUT_LINK,
			L(TIMES_LINK),
				L(SET_LINK,
					N(NUMBER_NODE, "1"),
					L(LIST_LINK, N(NUMBER_NODE, "2"), N(NUMBER_NODE, "2")),
					L(LIST_LINK, N(NUMBER_NODE, "3"),
					             N(NUMBER_NODE, "3"),
					             N(NUMBER_NODE, "3")),
					L(LIST_LINK, N(NUMBER_NODE, "4"),
					             N(NUMBER_NODE, "4"),
					             N(NUMBER_NODE, "4"),
					             N(NUMBER_NODE, "4"))));

	Handle set = inst.execute(want_set);
	Handle expected_set =
		L(SET_LINK,
			N(NUMBER_NODE, "1"),
			N(NUMBER_NODE, "4"),
			N(NUMBER_NODE, "27"),
			N(NUMBER_NODE, "256"));

	printf("Expecting %s\n", expected_set->to_string().c_str());
	printf("Got %s\n", set->to_string().c_str());
	TS_ASSERT_EQUALS(set, expected_set);

	logger().info("END TEST: %s", __FUNCTION__);
}

void PutLinkUTest::test_lambda()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Test that the substitution follows the order of variables
	// provided in the lambda rather than left-to-right in the body.
	Handle lam =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST,
				N(VARIABLE_NODE, "$x"),
				N(VARIABLE_NODE, "$y")),
			L(INHERITANCE_LINK,
				N(VARIABLE_NODE, "$y"),
				N(VARIABLE_NODE, "$x")));
	Handle put =
		L(PUT_LINK,
			lam,
			L(LIST_LINK,
				N(CONCEPT_NODE, "animal"),
				N(CONCEPT_NODE, "coyote")));

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);

	Handle expected_putted =
		L(INHERITANCE_LINK,
			N(CONCEPT_NODE, "coyote"),
			N(CONCEPT_NODE, "animal"));

	printf("Expecting %s\n", expected_putted->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected_putted);

	logger().info("END TEST: %s", __FUNCTION__);
}

void PutLinkUTest::test_lambda_partial_substitution()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Test partial substitution
	// (Put
	//     (Lambda (Variable "$x")
	//         (Inheritance (Variable "$x") (Variable "$y")))
	//     (Concept "animal"))
	Handle lam =
		L(LAMBDA_LINK,
			N(VARIABLE_NODE, "$x"),
			L(INHERITANCE_LINK,
				N(VARIABLE_NODE, "$y"),
				N(VARIABLE_NODE, "$x")));
	Handle put =
		L(PUT_LINK,
			lam,
			N(CONCEPT_NODE, "animal"));

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);

	// (Inheritance (Concept "animal") (Variable "$y"))
	Handle expected_putted =
		L(INHERITANCE_LINK,
			N(VARIABLE_NODE, "$y"),
			N(CONCEPT_NODE, "animal"));

	printf("Expecting %s\n", expected_putted->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected_putted);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test eta-reduction of the values
void PutLinkUTest::test_eta()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Test that eta-reduction can be performed on the values.
	// (define lam (Lambda
	//      (VariableList (Variable "$x")(Variable "$y")(Variable "$z"))
	//      (Inheritance (Variable "$z") (Variable "$x"))))
	//
	// (define put (Put lam
	//      (Lambda (Variable "$w")
	//          (List (Concept "animal") (Concept "foobar") (Variable "$w")))))
	//
	// We expect the below, with $w bound, because this is how beta
	// reduction is defined in atomese. Note that it is NOT compatible
	// with beta-reduction is classical lambda calculus! In lmbda calc,
	// the result would leave $w free, not bound.
	//
	// (Lambda (Variable "$w") (Inheritance (Variable "$w") (Concept "animal")))
	//
	Handle lam =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST,
				N(VARIABLE_NODE, "$x"),
				N(VARIABLE_NODE, "$y"),
				N(VARIABLE_NODE, "$z")),
			L(INHERITANCE_LINK,
				N(VARIABLE_NODE, "$z"),
				N(VARIABLE_NODE, "$x")));
	Handle put =
		L(PUT_LINK,
			lam,
			L(LAMBDA_LINK,
				N(VARIABLE_NODE, "$w"),
				L(LIST_LINK,
					N(CONCEPT_NODE, "animal"),
					N(CONCEPT_NODE, "foobar"),
					N(VARIABLE_NODE, "$w"))));

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);

	Handle expected_putted =
		L(LAMBDA_LINK,
			N(VARIABLE_NODE, "$w"),
			L(INHERITANCE_LINK,
				N(VARIABLE_NODE, "$w"),
				N(CONCEPT_NODE, "animal")));

	printf("Expecting %s\n", expected_putted->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected_putted);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test alpha-renaming, where values are variables. Similar to
// the test_eta, except the input is pointless (aka tacit).
void PutLinkUTest::test_alpha()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Test that alpha-renaming can be performed on the values.
	// (define lam (Lambda
	//      (VariableList (Variable "$x")(Variable "$y")(Variable "$z"))
	//      (Inheritance (Variable "$z") (Variable "$x"))))
	//
	// (define put (Put lam
	//      (List (Concept "animal") (Concept "foobar") (Variable "$w"))))
	//
	// We expect the below, with $w bound, because this is how beta
	// reduction is defined in atomese. Note that it is NOT compatible
	// with beta-reduction is classical lambda calculus! In lmbda calc,
	// the result would leave $w free, not bound.
	//
	// (Lambda (Variable "$w") (Inheritance (Variable "$w") (Concept "animal")))
	//
	Handle lam =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST,
				N(VARIABLE_NODE, "$x"),
				N(VARIABLE_NODE, "$y"),
				N(VARIABLE_NODE, "$z")),
			L(INHERITANCE_LINK,
				N(VARIABLE_NODE, "$z"),
				N(VARIABLE_NODE, "$x")));
	Handle put =
		L(PUT_LINK,
			lam,
			L(LIST_LINK,
				N(CONCEPT_NODE, "animal"),
				N(CONCEPT_NODE, "foobar"),
				N(VARIABLE_NODE, "$w")));

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);

	Handle expected_putted =
		L(LAMBDA_LINK,
			N(VARIABLE_NODE, "$w"),
			L(INHERITANCE_LINK,
				N(VARIABLE_NODE, "$w"),
				N(CONCEPT_NODE, "animal")));

	printf("Expecting %s\n", expected_putted->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected_putted);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test simple function composition.
void PutLinkUTest::test_compose()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Test that simple function compostion can be performed.
	//
	// (define g (Lambda (Evaluation (Predicate "P") (Variable "X"))))
	// (define f (Lambda (Inheritance (Variable "X") (Variable "Y"))))
	// (cog-execute! (Put g f))
	//
	// We expect the result to be in prenex form.
	//
	Handle gee =
		L(LAMBDA_LINK,
			L(EVALUATION_LINK,
				N(PREDICATE_NODE, "P"),
				N(VARIABLE_NODE, "$x")));
	Handle eff =
		L(LAMBDA_LINK,
			L(INHERITANCE_LINK,
				N(VARIABLE_NODE, "$x"),
				N(VARIABLE_NODE, "$y")));
	Handle put =
		L(PUT_LINK, gee, eff);

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);

	Handle expected_putted =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST,
				N(VARIABLE_NODE, "$x"),
				N(VARIABLE_NODE, "$y")),
			L(EVALUATION_LINK,
				N(PREDICATE_NODE, "P"),
				L(INHERITANCE_LINK,
					N(VARIABLE_NODE, "$x"),
					N(VARIABLE_NODE, "$y"))));

	printf("Expecting %s\n", expected_putted->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected_putted);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test function composition.
void PutLinkUTest::test_inject_compose()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Test function compostion with injection
	//
	// (define X (Variable "X"))
	// (define Y (Variable "Y"))
	// (define Z (Variable "Z"))
	// (define W (Variable "W"))
	//
	// (define g (Lambda
	//    (VariableList X Y W Z)
	//    (And
	//       (Inheritance X Y)
	//       (Inheritance W Z))))
	//
	// (define f (Lambda (VariableList X Y Z) (List X Y Y Z)))
	//
	// (cog-execute! (Put g f))
	//
	// We expect the result to be in prenex form.
	//
	Handle X = N(VARIABLE_NODE, "X");
	Handle Y = N(VARIABLE_NODE, "Y");
	Handle Z = N(VARIABLE_NODE, "Z");
	Handle W = N(VARIABLE_NODE, "W");

	Handle gee =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST, X, Y, Z, W),
			L(AND_LINK,
				L(INHERITANCE_LINK, X, Y),
				L(INHERITANCE_LINK, Z, W)));

	Handle eff =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST, X, Y, Z),
			L(LIST_LINK, X, Y, Y, Z));

	Handle put = L(PUT_LINK, gee, eff);

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);

	Handle expected_putted =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST, X, Y, Z),
			L(AND_LINK,
				L(INHERITANCE_LINK, X, Y),
				L(INHERITANCE_LINK, Y, Z)));

	printf("Expecting %s\n", expected_putted->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected_putted);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test basic alpha conversion
void PutLinkUTest::test_simple_alpha()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Test function compostion with injection
	//
	// (define X (Variable "X"))
	// (define Y (Variable "Y"))
	// (define Z (Variable "Z"))
	// (define W (Variable "W"))
	//
	// (define g (Lambda
	//    (VariableList X Y W Z)
	//    (And
	//       (Inheritance X Y)
	//       (Inheritance W Z))))
	//
	// (define f (List X Y Y Z))
	//
	// (cog-execute! (Put g f))
	//
	// We expect the result to be in prenex form.
	//
	Handle X = N(VARIABLE_NODE, "X");
	Handle Y = N(VARIABLE_NODE, "Y");
	Handle Z = N(VARIABLE_NODE, "Z");
	Handle W = N(VARIABLE_NODE, "W");

	Handle gee =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST, X, Y, Z, W),
			L(AND_LINK,
				L(INHERITANCE_LINK, X, Y),
				L(INHERITANCE_LINK, Z, W)));

	Handle eff = L(LIST_LINK, X, Y, Y, Z);

	Handle put = L(PUT_LINK, gee, eff);

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);

	Handle expected_putted =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST, X, Y, Z),
			L(AND_LINK,
				L(INHERITANCE_LINK, X, Y),
				L(INHERITANCE_LINK, Y, Z)));

	printf("Expecting %s\n", expected_putted->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected_putted);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test basic insertion.
// A lot like test_inject_compose, but simpler.
void PutLinkUTest::test_simple_replace()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Test function compostion with injection
	//
	// (define X (Variable "X"))
	// (define Y (Variable "Y"))
	// (define Z (Variable "Z"))
	// (define W (Variable "W"))
	//
	// (define g (Lambda
	//    (VariableList X Y W Z)
	//    (And
	//       (Inheritance X Y)
	//       (Inheritance W Z))))
	//
	// (define A (Concept "A"))
	// (define B (Concept "B"))
	// (define C (Concept "C"))
	//
	// (define f (List A B B C)))
	//
	// (cog-execute! (Put g f))
	//
	Handle X = N(VARIABLE_NODE, "X");
	Handle Y = N(VARIABLE_NODE, "Y");
	Handle Z = N(VARIABLE_NODE, "Z");
	Handle W = N(VARIABLE_NODE, "W");

	Handle gee =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST, X, Y, Z, W),
			L(AND_LINK,
				L(INHERITANCE_LINK, X, Y),
				L(INHERITANCE_LINK, Z, W)));

	Handle A = N(CONCEPT_NODE, "A");
	Handle B = N(CONCEPT_NODE, "B");
	Handle C = N(CONCEPT_NODE, "C");

	Handle eff = L(LIST_LINK, A, B, B, C);

	Handle put = L(PUT_LINK, gee, eff);

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);

	Handle expected_putted =
		L(AND_LINK,
			L(INHERITANCE_LINK, A, B),
			L(INHERITANCE_LINK, B, C));

	printf("Expecting %s\n", expected_putted->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected_putted);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test function composition with types.
void PutLinkUTest::test_typed_compose()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Test typed function compostion
	//
	// (define g (Lambda
	//    (TypedVariable (Variable "X") (TypeNode "InheritanceLink"))
	//    (Evaluation (Predicate "P") (Variable "X"))))
	// (define f (Lambda
	//    (VariableList
	//       (TypedVariable (Variable "X") (TypeNode "ConceptNode"))
	//       (TypedVariable (Variable "Y") (TypeNode "ConceptNode")))
	//    (Inheritance (Variable "X") (Variable "Y"))))
	//
	// (cog-execute! (Put g f))
	//
	// We expect the result to be in prenex form.
	//
	Handle gee =
		L(LAMBDA_LINK,
			L(TYPED_VARIABLE_LINK,
				N(VARIABLE_NODE, "$x"),
				N(TYPE_NODE, "InheritanceLink")),
			L(EVALUATION_LINK,
				N(PREDICATE_NODE, "P"),
				N(VARIABLE_NODE, "$x")));
	Handle eff =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST,
				L(TYPED_VARIABLE_LINK,
					N(VARIABLE_NODE, "$x"),
					N(TYPE_NODE, "ConceptNode")),
				L(TYPED_VARIABLE_LINK,
					N(VARIABLE_NODE, "$y"),
					N(TYPE_NODE, "ConceptNode"))),
			L(INHERITANCE_LINK,
				N(VARIABLE_NODE, "$x"),
				N(VARIABLE_NODE, "$y")));
	Handle put =
		L(PUT_LINK, gee, eff);

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);

	Handle expected_putted =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST,
				L(TYPED_VARIABLE_LINK,
					N(VARIABLE_NODE, "$u"),
					N(TYPE_NODE, "ConceptNode")),
				L(TYPED_VARIABLE_LINK,
					N(VARIABLE_NODE, "$v"),
					N(TYPE_NODE, "ConceptNode"))),
			L(EVALUATION_LINK,
				N(PREDICATE_NODE, "P"),
				L(INHERITANCE_LINK,
					N(VARIABLE_NODE, "$u"),
					N(VARIABLE_NODE, "$v"))));

	printf("Expecting %s\n", expected_putted->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected_putted);

	Handle gahhh =
		L(LAMBDA_LINK,
			L(TYPED_VARIABLE_LINK,
				N(VARIABLE_NODE, "$x"),
				N(TYPE_NODE, "SimilarityLink")), // type mismatch here!
			L(EVALUATION_LINK,
				N(PREDICATE_NODE, "P"),
				N(VARIABLE_NODE, "$x")));

	bool caught = false;
	try
	{
		put = L(PUT_LINK, gahhh, eff);
		inst.execute(put);
	}
	catch(const StandardException& ex)
	{
		caught = true;
	}
	printf("Expecting throw, got %d\n", caught);
	TSM_ASSERT("Failed to catch expected exception", caught);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test function composition with identity function
void PutLinkUTest::test_ident_compose()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Test function compostion with a cartesian product
	//
	// (define g (Lambda (Evaluation (Variable "X") (Variable "Y"))))
	// (define f2 (Lambda
	//    (VariableList (Variable "X") (Variable "Y") (Variable "Z"))
	//    (Inheritance (Variable "Y")(Variable "Z")) ))
	//
	// (define ident (Lambda (Variable "W") (Variable "W")))
	// (cog-execute! (Put g (List ident f2)))
	//
	// We expect the result to be in prenex form.
	//
	Handle gee =
		L(LAMBDA_LINK,
			L(EVALUATION_LINK,
				N(VARIABLE_NODE, "$x"),
				N(VARIABLE_NODE, "$y")));
	Handle eff =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST,
				N(VARIABLE_NODE, "$x"),
				N(VARIABLE_NODE, "$y"),
				N(VARIABLE_NODE, "$z")),
			L(INHERITANCE_LINK,
				N(VARIABLE_NODE, "$y"),
				N(VARIABLE_NODE, "$z")));
	Handle ident =
		L(LAMBDA_LINK,
			N(VARIABLE_NODE, "$x"), N(VARIABLE_NODE, "$x"));

	Handle put =
		L(PUT_LINK, gee, L(LIST_LINK, ident, eff));

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);

	Handle expected_putted =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST,
				N(VARIABLE_NODE, "$w"),
				N(VARIABLE_NODE, "$x"),
				N(VARIABLE_NODE, "$y"),
				N(VARIABLE_NODE, "$z")),
			L(EVALUATION_LINK,
				N(VARIABLE_NODE, "$w"),
				L(INHERITANCE_LINK,
					N(VARIABLE_NODE, "$y"),
					N(VARIABLE_NODE, "$z"))));

	printf("Expecting %s\n", expected_putted->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected_putted);

	logger().info("END TEST: %s", __FUNCTION__);
}

// Test function composition with identity function
void PutLinkUTest::test_again_compose_ident()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// A non-empty atomspace throws off alpha-conversion collions bugs.
	// retest with an empty atomspace.
	_as.clear();
	test_ident_compose();
	logger().info("END TEST: %s", __FUNCTION__);
}

// Test recursive function composition
void PutLinkUTest::test_recursive_compose()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Test recursive function compostion can be performed.
	//
	// (define g (Lambda (Evaluation (Variable "X") (Variable "Y"))))
	// (define f2 (Lambda
	//    (VariableList (Variable "X") (Variable "Y") (Variable "Z"))
	//    (Inheritance (Variable "Y")(Variable "Z")) ))
	//
	// (define inject ;; knock out first argument
	//    (List (Concept "junk") (Variable "S")(Variable "T")))
	//
	// (define ident (Lambda (Variable "W") (Variable "W")))
	// (cog-execute! (Put g (List ident (Put f2 inject))))
	//
	// We expect the result to be in prenex form.
	//
	Handle gee =
		L(LAMBDA_LINK,
			L(EVALUATION_LINK,
				N(VARIABLE_NODE, "$x"),
				N(VARIABLE_NODE, "$y")));
	Handle eff =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST,
				N(VARIABLE_NODE, "$x"),
				N(VARIABLE_NODE, "$y"),
				N(VARIABLE_NODE, "$z")),
			L(INHERITANCE_LINK,
				N(VARIABLE_NODE, "$y"),
				N(VARIABLE_NODE, "$z")));
	Handle inject =
		L(LIST_LINK,
			N(CONCEPT_NODE, "junk"),
			N(VARIABLE_NODE, "$x"),
			N(VARIABLE_NODE, "$y"));

	Handle ident =
		L(LAMBDA_LINK,
			N(VARIABLE_NODE, "$x"), N(VARIABLE_NODE, "$x"));

	Handle put =
		L(PUT_LINK, gee,
			L(LIST_LINK, ident, L(PUT_LINK, eff, inject)));

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);

	Handle expected_putted =
		L(LAMBDA_LINK,
			L(VARIABLE_LIST,
				N(VARIABLE_NODE, "A"),
				N(VARIABLE_NODE, "B"),
				N(VARIABLE_NODE, "C")),
			L(EVALUATION_LINK,
				N(VARIABLE_NODE, "A"),
				L(INHERITANCE_LINK,
					N(VARIABLE_NODE, "B"),
					N(VARIABLE_NODE, "C"))));

	printf("Expecting %s\n", expected_putted->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected_putted);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * This test is for the case where PutLink has to evaluate the beta
 * reduced pattern and this pattern contains an inheritance link. For
 * instance
 *
 * (PutLink
 *    (LambdaLink
 *       (VariableList
 *          (TypedVariableLink
 *             (VariableNode "$X")
 *             (TypeNode "ConceptNode")
 *          )
 *          (TypedVariableLink
 *             (VariableNode "$Y")
 *             (TypeNode "ConceptNode")
 *          )
 *       )
 *       (AndLink
 *          (InheritanceLink
 *             (VariableNode "$X")
 *             (ConceptNode "human")
 *          )
 *          (InheritanceLink
 *             (VariableNode "$Y")
 *             (ConceptNode "human")
 *          )
 *          (EvaluationLink
 *             (PredicateNode "acquainted")
 *             (ListLink
 *                (VariableNode "$X")
 *                (VariableNode "$Y")
 *             )
 *          )
 *       )
 *    )
 *    (ListLink
 *       (ConceptNode "Self")
 *       (ConceptNode "Bob")
 *    )
 * )
 */
void PutLinkUTest::test_eval_inheritance()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle X = N(VARIABLE_NODE, "$X"),
		Y = N(VARIABLE_NODE, "$Y"),
		Concept = N(TYPE_NODE, "ConceptNode"),
		human = N(CONCEPT_NODE, "human"),
		Self = N(CONCEPT_NODE, "Self"),
		Bob = N(CONCEPT_NODE, "Bob"),
		acquainted = N(PREDICATE_NODE, "acquainted"),
		X_human = L(INHERITANCE_LINK, X, human),
		Y_human = L(INHERITANCE_LINK, Y, human),
		Self_human = L(INHERITANCE_LINK, Self, human),
		Bob_human = L(INHERITANCE_LINK, Bob, human),
		X_Y_acquainted = L(EVALUATION_LINK,
		                   acquainted,
		                   L(LIST_LINK, X, Y)),
		Self_Bob_acquainted = L(EVALUATION_LINK,
		                        acquainted,
		                        L(LIST_LINK, Self, Bob)),
		vardecl = L(VARIABLE_LIST,
		            L(TYPED_VARIABLE_LINK, X, Concept),
		            L(TYPED_VARIABLE_LINK, Y, Concept)),
		body = L(AND_LINK, X_human, Y_human, X_Y_acquainted),
		args = L(LIST_LINK, Self, Bob),
		put = L(PUT_LINK, L(LAMBDA_LINK, vardecl, body), args);

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);
	Handle expected = L(AND_LINK, Self_human, Bob_human, Self_Bob_acquainted);

	printf("Expecting %s\n", expected->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * Another test for the case where PutLink has to evaluate the beta
 * reduced pattern and this pattern contains an implication link. For
 * instance
 *
 * (PutLink
 *    (LambdaLink
 *       (TypedVariableLink
 *          (VariableNode "$X")
 *          (TypeNode "ConceptNode")
 *       )
 *       (ImplicationScopeLink
 *          (EvaluationLink
 *             (PredicateNode "P")
 *             (VariableNode "$X")
 *          )
 *          (EvaluationLink
 *             (PredicateNode "P")
 *             (VariableNode "$X")
 *          )
 *       )
 *    )
 *    (ConceptNode "A")
 * )
 */
void PutLinkUTest::test_eval_implication_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle X = N(VARIABLE_NODE, "$X"),
		A = N(CONCEPT_NODE, "A"),
		CT = N(TYPE_NODE, "ConceptNode"),
		P = N(PREDICATE_NODE, "P"),
		P_X = L(EVALUATION_LINK, P, X),
		P_A = L(EVALUATION_LINK, P, A),
		body = L(QUOTE_LINK,
		         L(IMPLICATION_SCOPE_LINK,
		           L(UNQUOTE_LINK, P_X),
		           L(UNQUOTE_LINK, P_X))),
		vardecl = L(TYPED_VARIABLE_LINK, X, CT),
		put = L(PUT_LINK, L(LAMBDA_LINK, vardecl, body), A);

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);
	Handle expected = L(IMPLICATION_SCOPE_LINK, P_A, P_A);

	printf("Executing %s\n", put->to_string().c_str());
	printf("Expecting %s\n", expected->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * This test is for the case where PutLink has to evaluate the beta
 * reduced pattern and this pattern contains an implication link. For
 * instance
 *
 * (PutLink
 *    (LambdaLink
 *       (VariableList
 *          (TypedVariableLink
 *             (VariableNode "$X")
 *             (TypeNode "PredicateNode")
 *          )
 *          (TypedVariableLink
 *             (VariableNode "$Y")
 *             (TypeNode "PredicateNode")
 *          )
 *       )
 *       (AndLink
 *          (ImplicationLink
 *             (VariableNode "$X")
 *             (PredicateNode "is-human")
 *          )
 *          (ImplicationLink
 *             (VariableNode "$Y")
 *             (PredicateNode "is-human")
 *          )
 *          (EvaluationLink
 *             (PredicateNode "acquainted")
 *             (ListLink
 *                (VariableNode "$X")
 *                (VariableNode "$Y")
 *             )
 *          )
 *       )
 *    )
 *    (ListLink
 *       (PredicateNode "is-Self")
 *       (PredicateNode "is-Bob")
 *    )
 * )
 */
void PutLinkUTest::test_eval_implication_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle X = N(VARIABLE_NODE, "$X"),
		Y = N(VARIABLE_NODE, "$Y"),
		Predicate = N(TYPE_NODE, "PredicateNode"),
		human = N(PREDICATE_NODE, "is-human"),
		Self = N(PREDICATE_NODE, "is-Self"),
		Bob = N(PREDICATE_NODE, "is-Bob"),
		acquainted = N(PREDICATE_NODE, "acquainted"),
		X_human = L(IMPLICATION_LINK, X, human),
		Y_human = L(IMPLICATION_LINK, Y, human),
		Self_human = L(IMPLICATION_LINK, Self, human),
		Bob_human = L(IMPLICATION_LINK, Bob, human),
		X_Y_acquainted = L(EVALUATION_LINK,
		                   acquainted,
		                   L(LIST_LINK, X, Y)),
		Self_Bob_acquainted = L(EVALUATION_LINK,
		                        acquainted,
		                        L(LIST_LINK, Self, Bob)),
		vardecl = L(VARIABLE_LIST,
		            L(TYPED_VARIABLE_LINK, X, Predicate),
		            L(TYPED_VARIABLE_LINK, Y, Predicate)),
		body = L(AND_LINK, X_human, Y_human, X_Y_acquainted),
		args = L(LIST_LINK, Self, Bob),
		put = L(PUT_LINK, L(LAMBDA_LINK, vardecl, body), args);

	Instantiator inst(&_as);
	Handle putted = inst.execute(put);
	Handle expected = L(AND_LINK, Self_human, Bob_human, Self_Bob_acquainted);

	printf("Executing %s\n", put->to_string().c_str());
	printf("Expecting %s\n", expected->to_string().c_str());
	printf("Got %s\n", putted->to_string().c_str());
	TS_ASSERT_EQUALS(putted, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * Test that the ill quotation use doesn't crash execution
 *
 * (PutLink
 *   (LambdaLink
 *     (VariableNode "$X")
 *     (EvaluationLink
 *       (PredicateNode "P")
 *       (VariableNode "$X")
 *     )
 *   )
 *   (LambdaLink
 *     (UnquoteLink
 *       (VariableNode "$x")
 *     )
 *     (UnquoteLink
 *       (VariableNode "$g")
 *     )
 *   )
 * )
 */
void PutLinkUTest::test_ill_unquote()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle X = N(VARIABLE_NODE, "$X"),
		P = N(PREDICATE_NODE, "P"),
		x = N(VARIABLE_NODE, "$x"),
		g = N(VARIABLE_NODE, "$g"),
		put = L(PUT_LINK,
		        L(LAMBDA_LINK,
		          X,
		          L(EVALUATION_LINK, P, X)),
		        L(LAMBDA_LINK,
		          L(UNQUOTE_LINK, x),
		          L(UNQUOTE_LINK, g)));

	Instantiator inst(&_as);
	TS_ASSERT_THROWS_ANYTHING(inst.execute(put));

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * Test that nested PutLinks is supported, specifically that executing
 *
 * (Put
 *   (Put
 *     (Lambda
 *       (Variable "$X")
 *       (Variable "$X"))
 *     (Lambda
 *       (VariableList
 *         (Variable "$Y")
 *         (Variable "$Z"))
 *       (Inheritance
 *         (Variable "$Y")
 *         (Variable "$Z"))))
 *   (List
 *     (Concept "A")
 *     (Variable "$X")))
 *
 * outputs
 *
 * (Lambda
 *   (Variable "X")
 *   (Inheritance
 *     (Concept "A")
 *     (Variable "$X")))
 *
 */
void PutLinkUTest::test_nested_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string rs = _eval.eval("(load-from-path \"tests/atoms/nested-put.scm\")");
	logger().debug() << "rs = " << rs;

	Instantiator inst(&_as);
	Handle nested_put = _eval.eval_h("nested-put-1"),
		result = inst.execute(nested_put),
		expected = _eval.eval_h("expected-1");

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * Test that the following
 *
 * (PutLink
 *   (PutLink
 *     (LambdaLink
 *       (VariableNode "$X")
 *       (VariableNode "$X"))
 *     (ListLink
 *       (ConceptNode "texts")
 *       (VariableNode "$W")))
 *   (LambdaLink
 *     (VariableList
 *       (VariableNode "$Y")
 *       (VariableNode "$Z"))
 *     (InheritanceLink
 *       (VariableNode "$Y")
 *       (VariableNode "$Z"))))
 *
 * outputs
 *
 * (Lambda
 *   (VariableList
 *     (VariableNode "$Y")
 *     (VariableNode "$Z"))
 *   (ListLink
 *     (ConceptNode "texts")
 *     (Inheritance
 *       (VariableNode "$Y")
 *       (VariableNode "$Z"))))
 *
 */
void PutLinkUTest::test_nested_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string rs = _eval.eval("(load-from-path \"tests/atoms/nested-put.scm\")");
	logger().debug() << "rs = " << rs;

	Instantiator inst(&_as);
	Handle nested_put = _eval.eval_h("nested-put-2"),
		result = inst.execute(nested_put),
		expected = _eval.eval_h("expected-2");

	TS_ASSERT_EQUALS(result, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * Test that nested PutLinks is supported, specifically that executing
 *
 * (PutLink
 *   (PutLink
 *     (PutLink
 *       (LambdaLink
 *         (VariableNode "$X")
 *         (VariableNode "$X"))
 *       (ConceptNode "A"))
 *     (Concept "B"))
 *   (Concept "C"))
 *
 * raise an exception
 */
void PutLinkUTest::test_nested_3()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string rs = _eval.eval("(load-from-path \"tests/atoms/nested-put.scm\")");
	logger().debug() << "rs = " << rs;

	Instantiator inst(&_as);
	Handle nested_put = _eval.eval_h("nested-put-3");

	TS_ASSERT_THROWS_ANYTHING(inst.execute(nested_put, true));

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * Test that the following PutLinks raise an exception when executed
 *
 * (PutLink
 *   (PutLink
 *     (PutLink
 *       (LambdaLink
 *         (VariableNode "$X")
 *         (VariableNode "$X"))
 *       (ConceptNode "texts"))
 *     (ListLink
 *       (ConceptNode "texts")
 *       (VariableNode "$x-1")))
 *   (ConceptNode "texts"))
 */
void PutLinkUTest::test_nested_4()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string rs = _eval.eval("(load-from-path \"tests/atoms/nested-put.scm\")");
	logger().debug() << "rs = " << rs;

	Instantiator inst(&_as);
	Handle nested_put = _eval.eval_h("nested-put-4");

	TS_ASSERT_THROWS_ANYTHING(inst.execute(nested_put, true));

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * Test that the following PutLinks
 *
 * (Put
 *   (Put
 *     (Put
 *       (Lambda
 *         (Variable "$top-arg")
 *         (Variable "$top-arg"))
 *       (Lambda
 *         (Variable "$top-arg")
 *         (Variable "$top-arg")))
 *     (List
 *       (Variable "$spe-arg-0")
 *       (Concept "D")))
 *   (Lambda
 *     (VariableList
 *       (Variable "$sha-arg-0")
 *       (Variable "$sha-arg-1"))
 *     (Inheritance
 *       (Variable "$sha-arg-0")
 *       (Variable "$sha-arg-1"))))
 *
 * executes into
 *
 * (Lambda
 *   (VariableList
 *     (Variable "$sha-arg-0")
 *     (Variable "$sha-arg-1"))
 *   (List
 *     (Inheritance
 *       (Variable "$sha-arg-0")
 *       (Variable "$sha-arg-1"))
 *     (Concept "D")))
 */
void PutLinkUTest::test_nested_5()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string rs = _eval.eval("(load-from-path \"tests/atoms/nested-put.scm\")");
	logger().debug() << "rs = " << rs;

	Instantiator inst(&_as);
	Handle nested_put = _eval.eval_h("nested-put-5"),
		result = inst.execute(nested_put),
		expected = _eval.eval_h("expected-5");

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * Make sure that composing a top abstraction with aquoted AndLink
 * doesn't remove the quotes, because otherwise the AndLink is
 * interpreted as being a pattern matcher logic connector. So
 * specifically check that
 *
 * (PutLink
 *   (LambdaLink
 *     (VariableNode "$top-arg")
 *     (VariableNode "$top-arg"))
 *   (LambdaLink
 *     (VariableList
 *       (VariableNode "$sha-arg-0")
 *       (VariableNode "$sha-arg-1")))
 *     (LocalQuoteLink
 *       (AndLink
 *         (VariableNode "$sha-arg-0")
 *         (VariableNode "$sha-arg-1"))))
 *
 * upon execution outputs
 *
 * (LambdaLink
 *   (VariableList
 *     (VariableNode "$sha-arg-0")
 *     (VariableNode "$sha-arg-1"))
 *   (LocalQuoteLink
 *     (AndLink
 *       (VariableNode "$sha-arg-0")
 *       (VariableNode "$sha-arg-1"))))
 *
 */
void PutLinkUTest::test_and_compose_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string rs = _eval.eval("(load-from-path \"tests/atoms/put-and.scm\")");
	logger().debug() << "rs = " << rs;

	Instantiator inst(&_as);
	Handle top = _eval.eval_h("top"),
		and_sha_abs = _eval.eval_h("and-shallow-abstraction"),
		put_top_and = L(PUT_LINK, top,
		                and_sha_abs),
		result = inst.execute(put_top_and),
		expected = and_sha_abs;

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * Make sure that composing a non top abstraction with a quoted
 * AndLink does remove the quotation as it is useless. Specifically
 *
 * (PutLink
 *   (LambdaLink
 *     (VariableList
 *       (VariableNode "$sha-arg-0")
 *       (VariableNode "$sha-arg-1"))
 *     (InheritanceLink
 *       (VariableNode "$sha-arg-0")
 *       (VariableNode "$sha-arg-1")))
 *   (ListLink
 *     (VariableNode "spe-0")
 *     (LambdaLink
 *       (VariableList
 *         (VariableNode "$sha-arg-0")
 *         (VariableNode "$sha-arg-1"))
 *       (LocalQuoteLink
 *         (AndLink
 *           (VariableNode "$sha-arg-0")
 *           (VariableNode "$sha-arg-1"))))))
 *
 * upon execution outputs
 *
 * (LambdaLink
 *   (VariableList
 *     (VariableNode "spe-0")
 *     (VariableNode "$sha-arg-0")
 *     (VariableNode "$sha-arg-1"))
 *   (InheritanceLink
 *     (VariableNode "spe-0")
 *     (AndLink
 *       (VariableNode "$sha-arg-0")
 *       (VariableNode "$sha-arg-1"))))
 *
 */
void PutLinkUTest::test_and_compose_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string rs = _eval.eval("(load-from-path \"tests/atoms/put-and.scm\")");
	logger().debug() << "rs = " << rs;

	Instantiator inst(&_as);
	Handle inh_sha_abs = _eval.eval_h("inheritance-shallow-abstraction"),
		and_sha_abs = _eval.eval_h("and-shallow-abstraction"),
		spe_var = N(VARIABLE_NODE, "$spe-0"),
		sha_var_1 = N(VARIABLE_NODE, "$sha-arg-0"),
		sha_var_2 = N(VARIABLE_NODE, "$sha-arg-1"),
		put_inh_and = L(PUT_LINK, inh_sha_abs,
		                L(LIST_LINK, spe_var, and_sha_abs)),
		result = inst.execute(put_inh_and),
		expected = L(LAMBDA_LINK,
		             L(VARIABLE_LIST,
		               spe_var,
		               sha_var_1,
		               sha_var_2),
		              L(INHERITANCE_LINK,
		                spe_var,
		                L(AND_LINK,
		                  sha_var_1,
		                  sha_var_2)));

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * Make sure one can build quoted PutLink like
 *
 * Quote
 *   Put
 *     Lambda
 *       Inheritance
 *         Variable "$X"
 *         Variable "$Y"
 *     Unquote Variable "$patvar"
 */
void PutLinkUTest::test_quoted_put()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Instantiator inst(&_as);
	Handle quoted_put = L(QUOTE_LINK,
	                      L(PUT_LINK,
	                        L(LAMBDA_LINK,
	                          L(INHERITANCE_LINK,
	                            N(VARIABLE_NODE, "$X"),
	                            N(VARIABLE_NODE, "$Y"))),
	                        L(UNQUOTE_LINK,
	                          N(VARIABLE_NODE, "$patvar"))));

	logger().debug() << "quoted_put = " << oc_to_string(quoted_put);

	TS_ASSERT_DIFFERS(quoted_put, nullptr);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * Make sure running some ill formed PutLink doesn't crash
 */
void PutLinkUTest::test_ill_put()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Instantiator inst(&_as);
	Handle ill_put = _eval.eval_h("(PutLink"
	                              "  (LambdaLink"
	                              "    (VariableNode \"$top-arg\")"
	                              "    (VariableNode \"$top-arg\"))"
	                              "  (ListLink"
	                              "    (EvaluationLink"
	                              "      (PredicateNode \"minsup\")"
	                              "      (ListLink"
	                              "        (PutLink"
	                              "          (VariableNode \"$g\")"
	                              "          (VariableNode \"$f\"))"
	                              "        (VariableNode \"$texts\")"
	                              "        (VariableNode \"$ms\")))"
	                              "    (EvaluationLink"
	                              "      (PredicateNode \"minsup\")"
	                              "      (ListLink"
	                              "        (VariableNode \"$g\")"
	                              "        (VariableNode \"$texts\")"
	                              "        (VariableNode \"$ms\")))"
	                              "    (VariableNode \"$f\")))"),
		result = inst.execute(ill_put),
		expected = _eval.eval_h("(ListLink"
		                        "  (EvaluationLink"
		                        "    (PredicateNode \"minsup\")"
		                        "    (ListLink"
		                        "      (LambdaLink"
		                        "        (VariableNode \"$x\")"
		                        "        (VariableNode \"$x\"))"
		                        "      (VariableNode \"$texts\")"
		                        "      (VariableNode \"$ms\")))"
		                        "  (EvaluationLink"
		                        "    (PredicateNode \"minsup\")"
		                        "    (ListLink"
		                        "      (VariableNode \"$g\")"
		                        "      (VariableNode \"$texts\")"
		                        "      (VariableNode \"$ms\")))"
		                        "  (VariableNode \"$f\"))");

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * The following
 *
 * (Put
 *   (Lambda (Inheritance (Variable "$X") (Variable "$Y")))
 *   (List (Variable "$Z") (Variable "$Z")))
 *
 * should output upon execution
 *
 * (LambdaLink
 *   (VariableNode "$Z")
 *   (InheritanceLink
 *     (VariableNode "$Z")
 *     (VariableNode "$Z")))
 */
void PutLinkUTest::test_tricky_put_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string rs = _eval.eval("(load-from-path \"tests/atoms/tricky-put.scm\")");
	logger().debug() << "rs = " << rs;

	Instantiator inst(&_as);
	Handle put = _eval.eval_h("put-1"),
		result = inst.execute(put),
		expected = _eval.eval_h("expected-1");

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * The following
 *
 * (Put
 *   (Inheritance (Variable "$X") (Variable "$Y"))
 *   (List (Variable "$Z") (Variable "$Z")))
 *
 * should output upon execution
 *
 * (InheritanceLink
 *   (VariableNode "$Z")
 *   (VariableNode "$Z"))
 */
void PutLinkUTest::test_tricky_put_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string rs = _eval.eval("(load-from-path \"tests/atoms/tricky-put.scm\")");
	logger().debug() << "rs = " << rs;

	Instantiator inst(&_as);
	Handle put = _eval.eval_h("put-2"),
		result = inst.execute(put),
		expected = _eval.eval_h("expected-2");

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * The following
 *
 * (Put
 *   (Lambda (Inheritance (Variable "$X") (Variable "$Y")))
 *   (List (Variable "$Z") (Variable "$W")))
 *
 * should output upon execution
 *
 * (LambdaLink
 *   (InheritanceLink
 *     (VariableNode "$X")
 *     (VariableNode "$Y")))
 */
void PutLinkUTest::test_tricky_put_3()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string rs = _eval.eval("(load-from-path \"tests/atoms/tricky-put.scm\")");
	logger().debug() << "rs = " << rs;

	Instantiator inst(&_as);
	Handle put = _eval.eval_h("put-3"),
		result = inst.execute(put),
		expected = _eval.eval_h("expected-3");

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * The following
 *
 * (Put
 *   (Inheritance (Variable "$X") (Variable "$Y"))
 *   (List (Variable "$Z") (Variable "$W")))
 *
 * should output upon execution
 *
 * (InheritanceLink
 *   (VariableNode "$X")
 *   (VariableNode "$Y"))
 */
void PutLinkUTest::test_tricky_put_4()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string rs = _eval.eval("(load-from-path \"tests/atoms/tricky-put.scm\")");
	logger().debug() << "rs = " << rs;

	Instantiator inst(&_as);
	Handle put = _eval.eval_h("put-4"),
		result = inst.execute(put),
		expected = _eval.eval_h("expected-4");

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}

/**
 * The following
 *
 * (Put
 *   (List
 *     (Variable "$spe-arg-0")
 *     (Concept "D"))
 *   (Lambda
 *     (VariableList
 *       (Variable "$sha-arg-0")
 *       (Variable "$sha-arg-1"))
 *     (Inheritance
 *       (Variable "$sha-arg-0")
 *       (Variable "$sha-arg-1"))))
 *
 * should output upon execution
 *
 * (Lambda
 *   (VariableList
 *     (Variable "$sha-arg-0")
 *     (Variable "$sha-arg-1"))
 *   (List
 *     (Inheritance
 *       (Variable "$sha-arg-0")
 *       (Variable "$sha-arg-1"))
 *     (Concept "D")))
 */
void PutLinkUTest::test_tricky_put_5()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string rs = _eval.eval("(load-from-path \"tests/atoms/tricky-put.scm\")");
	logger().debug() << "rs = " << rs;

	Instantiator inst(&_as);
	Handle put = _eval.eval_h("put-5"),
		result = inst.execute(put),
		expected = _eval.eval_h("expected-5");

	logger().debug() << "result = " << oc_to_string(result);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT_EQUALS(result, expected);

	logger().info("END TEST: %s", __FUNCTION__);
}
