{
   <scm_gc_supp_cond>
   Memcheck:Cond
   ...
   fun:scm_i_gc
   ...
}
{
   <guile_gc_supp_value>
   Memcheck:Value8
   ...
   fun:scm_i_gc
   ...
}
{
   <guile_newcell>
   Memcheck:Cond
   ...
   fun:scm_gc_for_newcell
   ...
}
{
   <eval_string>
   Memcheck:Cond
   ...
   fun:scm_c_catch
   ...
}
{
   <eval_string>
   Memcheck:Value8
   ...
   fun:scm_c_catch
   ...
}
{
   <deep_stack>
   Memcheck:Cond
   ...
   fun:inner_eval_string
   ...
}

{
   <very_deep_stack_mpn_grunge_cond>
   Memcheck:Cond
   ...
   fun:__mpn_mul
   ...
}

{
   <very_deep_stack_mpn_grunge>
   Memcheck:Value8
   ...
   fun:__mpn_mul
   ...
}

# Seems that guile 2.0 uses a new GC ...
{
   <new_gc_mark>
   Memcheck:Cond
   ...
   fun:GC_mark_some
   ...
}

# Use of uninitialised value of size 8
{
   <new_gc_mark_uninit>
   Memcheck:Value8
   ...
   fun:GC_mark_some
   ...
}

# Invalid read of size 8
{
   <new_gc_mark_uninit>
   Memcheck:Addr8
   ...
   fun:GC_mark_some
   ...
}

# Conditional jump or move depends on uninitialised value(s)
{
   <new_gc_mark_from>
   Memcheck:Cond
   ...
   fun:GC_mark_from
   ...
}

# Use of uninitialised value of size 8
{
   <new_gc_mark_from_uninit>
   Memcheck:Value8
   ...
   fun:GC_mark_from
   ...
}

{
   <new_gc_malloc>
   Memcheck:Cond
   ...
   fun:GC_malloc
   ...
}

# Use of uninitialised value of size 8
{
   <new_gc_core_malloc_val>
   Memcheck:Value8
   ...
   fun:GC_core_malloc
   ...
}

{
   <new_gc_core_malloc>
   Memcheck:Cond
   ...
   fun:GC_core_malloc
   ...
}

{
   <new_gc_generic_malloc>
   Memcheck:Cond
   ...
   fun:GC_generic_malloc
   ...
}

{
   <new_gc_malloc_atomic>
   Memcheck:Cond
   ...
   fun:GC_malloc_atomic
   ...
}

{
   <new_gc_blacklist>
   Memcheck:Cond
   fun:GC_is_black_listed
   ...
}

{
   <new_gc_black_value>
   Memcheck:Value8
   fun:GC_add_to_black_list_normal
   ...
}

{
   <new_gc_allocobj>
   Memcheck:Cond
   ...
   fun:GC_allocobj
   ...
}

{
   <new_gc_fin>
   Memcheck:Cond
   ...
   fun:GC_finalize
   ...
}

{
   <new_gc_fin>
   Memcheck:Cond
   ...
   fun:GC_gcollect
   ...
}
# ------------------------------------------
# guile-2.2 stuff

{
   <2.2-malloc>
   Memcheck:Cond
   ...
   fun:GC_generic_malloc_many
   ...
}

{
   <2.2-gc>
   Memcheck:Cond
   ...
   fun:GC_promote_black_lists
   ...
}

# ------------------------------------------
# guile-3.0 stuff

# Conditional jump or move depends on uninitialised value(s)
{
   <scm_read_cond>
   Memcheck:Cond
   ...
   fun:scm_read
   ...
   fun:scm_call_n
	fun:scm_primitive_eval
	fun:scm_eval
	fun:scm_shell
   ...
}

# ------------------------------------------
# libunistring stuff

{
   <unistring>
   Memcheck:Cond
   fun:libunistring_freea
   ...
}



