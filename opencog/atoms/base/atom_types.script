//
// Script for automatic "atom type" generation. For more information,
// consult the opencog/atomspace/README file.
//
// Please note: some of the types below are used only via the scheme
// bindings. Thus, just because you can comment some of these out, and
// the code still compiles, that does not mean that these types are
// unused!  Be sure to grep for the CamelCase names, to see if they
// show up elsewhere!
//
// Some of them are used by Python PLN code (which also uses the
// CamelCase names).
//
// Special type designating that no atom type has been assigned.
NOTYPE

VALUE
FLOAT_VALUE <- VALUE    // vector of floats, actually.
STRING_VALUE <- VALUE
LINK_VALUE <- VALUE     // vector of values ("link" holding values)
VALUATION <- VALUE

// All of the different flavors of truth values
TRUTH_VALUE <- FLOAT_VALUE
SIMPLE_TRUTH_VALUE <- TRUTH_VALUE
COUNT_TRUTH_VALUE <- TRUTH_VALUE
INDEFINITE_TRUTH_VALUE <- TRUTH_VALUE
FUZZY_TRUTH_VALUE <- TRUTH_VALUE
PROBABILISTIC_TRUTH_VALUE <- TRUTH_VALUE
GENERIC_TRUTH_VALUE <- TRUTH_VALUE
EVIDENCE_COUNT_TRUTH_VALUE <- TRUTH_VALUE


// Base of hierarchy - NOTE: ATOM will not have a corresponding Python
// construction function to avoid identifier conflict with the Atom object.
ATOM <- VALUE
NODE <- ATOM
LINK <- ATOM

CONCEPT_NODE <- NODE
NUMBER_NODE <- NODE

// Basic Links
ORDERED_LINK <- LINK
UNORDERED_LINK <- LINK

// Basic sets
SET_LINK <- UNORDERED_LINK
LIST_LINK <- ORDERED_LINK
MEMBER_LINK <- ORDERED_LINK

// ContextLink: Universe of discourse. This behaves like set subtraction
// in that the set of things outside of the context have no bearing on
// the probability.
CONTEXT_LINK <- ORDERED_LINK

// Measure-theoritic (probabilisitic) versions of AND_LINK, OR_LINK
// These use probabilistic formulas to compute truth values.
// UNION_LINK <- OR_LINK
// INTERSECTION_LINK <- AND_LINK

// SUBSET_LINK is semantically equivalent to EXTENSIONAL_INHERITANCE_LINK.
// Therefore the later has been removed.
INHERITANCE_LINK <- ORDERED_LINK
SUBSET_LINK <- INHERITANCE_LINK
INTENSIONAL_INHERITANCE_LINK <- INHERITANCE_LINK

SIMILARITY_LINK <- UNORDERED_LINK
EXTENSIONAL_SIMILARITY_LINK <- SIMILARITY_LINK
INTENSIONAL_SIMILARITY_LINK <- SIMILARITY_LINK

// Evaluatable link. Any link type which might be evaluated, resulting
// in a truth-value, should inherit from this type.  This is a mixin-type,
// it does nothing by itself, but is used to identify boolean-ish,
// probabilisitic-TV-valued link types, so that they can be handled
// properly.
EVALUATABLE_LINK <- LINK

// Boolean set operations, logical constants.
// These are used by the pattern matcher to compute crisp-logic
// boolean combinations of predicates.
//
// The ordered links SequentialAndLink, SequentialOrLink allow
// behavior-tree Sequence and Fallback to be implemented: they guarantee
// sequential execution until the first failure or the first success.
//
TRUE_LINK <- ORDERED_LINK,EVALUATABLE_LINK
FALSE_LINK <- ORDERED_LINK,EVALUATABLE_LINK
AND_LINK <- UNORDERED_LINK,EVALUATABLE_LINK
OR_LINK <- UNORDERED_LINK,EVALUATABLE_LINK
NOT_LINK <- UNORDERED_LINK,EVALUATABLE_LINK
SEQUENTIAL_AND_LINK <- ORDERED_LINK,EVALUATABLE_LINK
SEQUENTIAL_OR_LINK <- ORDERED_LINK,EVALUATABLE_LINK

// The 'intuitionist logic' version of NOT_LINK is ABSENT_LINK.
// In 'intuitionist logic', the opposite of "true" is not "false",
// the opposite is "don't know".  ABSENT_LINK is the effective
// don't-know link.  Currently, it is used during pattern matching
// to find clauses that may or may not be present: clauses that are
// optionally present.
ABSENT_LINK <- UNORDERED_LINK,EVALUATABLE_LINK

// The 'intuitionist logic' version of OR_LINK is 'multiple choice'
// (the 'axiom of choice', by terrible abuse of terminology).  The
// ChoiceLink states that a choice must be made.  Here, it is explicitly
// an exclusive choice: you can only choose one of the alternatives.
// The alternatives are just that: alternatives. They are not true/false
// valued; they're simply options on a menu. Pick one.  It is an ordered
// link, in the sense that the first choice might be preferable.
//
// The ChoiceLink is NOT semantically equivalent to the OrLink. The
// OrLink of two sets is a set union. The ChoiceLink of two sets is
// "pick one of these two sets but not both".
//
// Currently, the only reason this exists is for the pattern matcher;
// you use it to say "match this graph or this graph or this graph".
//
CHOICE_LINK <- ORDERED_LINK

// Rounding out the above, we have PresentLink, which is the converse
// of AbsentLink, and is dual to ChoiceLink, since it requires that all
// terms are AND'ed together.
//
PRESENT_LINK <- ORDERED_LINK,EVALUATABLE_LINK

// Performance scripting links.
// ParallelLink launches multiple threads, but does not wait for any of
// them to return.  JoinLink launches multiple threads, and waits for
// all of them to return, and then returns the And of thier truth
// values.
PARALLEL_LINK <- AND_LINK
JOIN_LINK <- PARALLEL_LINK

// ====================================================================
// Herbrand/First-order-logic/lambda-calc/model-theory style links
// and nodes.  This are used to implement the pattern matcher, and
// everything built from the pattern matcher, including the query
// engine, the atomspace indexes, and the graph rewrite rules.

// ---------------------------------------------------------
// Variables, Lambdas and definitions.

// A Variable.  Use Lambda's to hide these. Use types to type them.
VARIABLE_NODE <- NODE

// A list of variables or variable declarations.
VARIABLE_LIST <- LIST_LINK

// A non-greedy globbing variable; matches one or more atoms in a
// sequence.  XXX TODO - this could be changed to a link, so that
// it resenbles a FUZZY_LINK more closely?  FuzzyLink implements
// the same idea, but in a more general fashion...
// Variadic, the globbed values are meant to be of all same type.
GLOB_NODE <- VARIABLE_NODE

// Everything under a QuoteLink is interpreted literally. Variable
// substitution (beta-reduction) is not performed into quoted variables.
QUOTE_LINK <- ORDERED_LINK

// The QuoteLink is actually a quasi-quote. The UnquoteLink undoes the
// quoting.  Defined to work just like in lisp/scheme.
UNQUOTE_LINK <- ORDERED_LINK

// Like QuoteLink but only affects the direct child, not its
// descendants. It has the same effect as wrapping the child with a
// QuoteLink and each atom of the its outgoing set with an UnquoteLink.
LOCAL_QUOTE_LINK <- ORDERED_LINK

// Everything under a DontExecLink is not executed. This is typically
// used during pattern matching, to halt infinite recursion, when the
// matched pattern is itself executable. Vaguely like QuoteLink, but
// instead of blocking beta-reduction, it blocks execution.
DONT_EXEC_LINK <- ORDERED_LINK

// A FreeLink is any kind of link that might have free variables in it.
// The FreeLink exists for one purpose: to make visible/explicit all of
// free variables in the link. The primary user is the pattern matcher.
// That is, envision the FreeLink as being at the top of a tree, and
// somewhere in that tree, there might be VariableNodes.  The C++ class
// for this link records the names of those variables, in order of
// traversal.  The goal here is to simply know these variables, so that,
// at the time of evaluation or execution, they are easily located.
//
// The variables are necessarily free: they to NOT have type
// declarations or restrictions associated with them.  This is in sharp
// contrast to ScopeLink, which binds variables by scoping them, and
// then forcing type restrictions to them.
//
// FreeLinks may be open or closed; they are closed terms if they
// have no free variables in them.
//
FREE_LINK <- ORDERED_LINK

// This is an interesting one. It is a link that must never be grounded!
// It must contain at least one VariableNode somewhere within it; that
// is, it must be an "open sentence" and never a "closed sentence".
// (as it would be called, using the terminology of predicate logic;
// See wikipedia for a formal defintion).
//
// Attempting to insert a DeleteLink holding a fully grounded term
// (holding a closed sentence) will instead cause the the term to be
// deleted from the AtomSpace, thus the name.  This is meant to be used
// with the pattern matcher, so that if it discovers a grounding, the
// grounded term is deleted.
//
// Implementation Note: The DeleteLink cannot inherit from FunctionLink
// because that would cause all variables to be bound, i.e. to become
// a closed sentence; thus it inherits from FreeLink.
//
DELETE_LINK <- FREE_LINK

// Only one "closed" UniqueLink may exist (in the atomspace), for a
// fixed first atom of the link.  Useful for defining state.  Additional
// "open" links may exist; "open" links are defined as links that
// contain free variables (see wikipedia defition of "open term",
// "closed term").  Kind of like DeleteLink, but allows one instead of
// zero closed terms.
UNIQUE_LINK <- FREE_LINK

// Inserting a StateLink into the atomspace causes the previous
// state to be removed from the atomspace.
STATE_LINK <- UNIQUE_LINK

// Uniquely naming things, tagging things. Attempting to insert a
// second definition into the atomspace will throw an exception.
DEFINE_LINK <- UNIQUE_LINK

// The ScopeLink is used to identify an open term, i.e. a link
// containing VariableNodes within it, and binding those variables.
// In the process, it can also force type restrictions on them.
// The ScopeLink does not have to bind all variables that occur in it's
// body; those that are not bound remain free.
//
// The ScopeLink differs from the FreeLink in that the FreeLink
// necessarily list ALL the (free) variables within it; the ScopeLink
// need not bind all of them.  The FreeLink also has no type
// restrictions on the variables.
//
// The ScopeLink differs from a LambdaLink in that it does NOT allow
// beta-reduction; only LambdaLinks can be beta-reduced. Thus,
// ScopeLink can be used as a base class for things like ForAllLink,
// ExistsLink and AverageLink, which bind variables, but are not
// beta-reducible.
SCOPE_LINK <- ORDERED_LINK

// A LambdaLink is a link whose bound variables may be substituted,
// that is, may be beta-reduced. It can be thought of as not only a
// variable declaration (which is what ScopeLink does) but also has
// the ability to substitute values for those variables.  This is
// exactly the standard definition from lambda calc/functional
// programming: an anonymous function declaration.
LAMBDA_LINK <- SCOPE_LINK

// PutLinks perform a beta-reduction when executed; i.e. they get
// beta-reduced when they are executed.
PUT_LINK <- SCOPE_LINK

// Pattern definition, pattern grounding/satisfaction.
// The PatternLink implements the base class holding a pattern that
// the pattern matcher will traverse.  Its primary role in life is to
// enable a C++ class that unpacks all the arguments and types, etc.
// into assorted C++ structures. It does not have any semantics in and
// of itself, it just holds machinery.
PATTERN_LINK <- SCOPE_LINK         // A pattern encapsulated in a Link.

// We subdivide patterns into two types: one type returns a TV when it
// is evaluated.  The other type returns a set of atoms when it is
// executed.  The distinction is made for the benefit of the C++ code,
// so that it can dispatch appropriately, based on the base type.
SATISFACTION_LINK <- PATTERN_LINK,EVALUATABLE_LINK  // Finds all groundings, return TV
SATISFYING_LINK <- PATTERN_LINK           // Finds all groundings, return SetLink

// The GetLink is almost exactly the same thing as a SatsifyingSetLink,
// except that GetLink is imperative, while SatisfyingSetLink is
// declarative.  Likewise, BindLink is exactly the same thing as an
// ImplicationLink, except that its imperative, not declarative.
GET_LINK <- SATISFYING_LINK        // Finds all groundings, returns them
BIND_LINK <- SATISFYING_LINK       // Finds all groundings, substitutes.

// Adjoint to the GetLink. This is "adjoint" in the sense that the roles
// of the pattern and the grounding are reversed: given a grounding, the
// collection of patterns that are grounded by it can be searched-for.
DUAL_LINK <- SATISFYING_LINK

// ==============================================================
// Assorted PLN link types.

// Logical quantifiers
FORALL_LINK <- SCOPE_LINK "ForAllLink"
EXISTS_LINK <- SCOPE_LINK

// Average links are not really useful since they are equivalent to a
// predicate (which could be a PredicateNode or derived, or built with
// a ScopeLink. Note that the PLN rules should offer a way to
// manipulate a predicate as if it were universally averaged quantified.
// AVERAGE_LINK <- SCOPE_LINK

// Concept constructor
SATISFYING_SET_SCOPE_LINK <- SCOPE_LINK

// Convert predicate into concept
SATISFYING_SET_LINK <- LINK

// Basic first-order logic operations

// Sugar forms of implication and equivalence links. See
// http://wiki.opencog.org/wikihome/index.php/ImplicationLink
// for more information
IMPLICATION_SCOPE_LINK <- SCOPE_LINK
INTENSIONAL_IMPLICATION_SCOPE_LINK <- IMPLICATION_SCOPE_LINK
EXTENSIONAL_IMPLICATION_SCOPE_LINK <- IMPLICATION_SCOPE_LINK

EQUIVALENCE_SCOPE_LINK <- SCOPE_LINK
INTENSIONAL_EQUIVALENCE_SCOPE_LINK <- EQUIVALENCE_SCOPE_LINK
EXTENSIONAL_EQUIVALENCE_SCOPE_LINK <- EQUIVALENCE_SCOPE_LINK

// Standard, non sugar form of implication and equivalence links.
IMPLICATION_LINK <- ORDERED_LINK
INTENSIONAL_IMPLICATION_LINK <- IMPLICATION_LINK
EXTENSIONAL_IMPLICATION_LINK <- IMPLICATION_LINK

EQUIVALENCE_LINK <- UNORDERED_LINK
INTENSIONAL_EQUIVALENCE_LINK <- EQUIVALENCE_LINK
EXTENSIONAL_EQUIVALENCE_LINK <- EQUIVALENCE_LINK

// Generic association
ASSOCIATIVE_LINK <- ORDERED_LINK

// Mystery link.  Lexical attraction???
ATTRACTION_LINK <- ORDERED_LINK

// To be used with PredicateNode
EVALUATION_LINK <- FREE_LINK,EVALUATABLE_LINK

EXECUTION_LINK <- ORDERED_LINK

// Procedure, schema and predicate nodes.
// These are used to define functions and predicates (relations)
// Procedures are generic terms; they can return any value, for example,
// either Atoms or TruthValues (or values in general). This is narrowed
// down, below.
PROCEDURE_NODE <- NODE
GROUNDED_PROCEDURE_NODE <- PROCEDURE_NODE

// SchemaNodes are atom-valued.  The must return something deriving
// from Atom.
SCHEMA_NODE <- PROCEDURE_NODE
DEFINED_SCHEMA_NODE <- SCHEMA_NODE
GROUNDED_SCHEMA_NODE <- SCHEMA_NODE,GROUNDED_PROCEDURE_NODE

// PredicateNodes are TV-valued.  They must return a TV.
PREDICATE_NODE <- PROCEDURE_NODE
// Cannot be both a node and a link! Have to be one or the other!
DEFINED_PREDICATE_NODE <- PREDICATE_NODE// ,EVALUATABLE_LINK
GROUNDED_PREDICATE_NODE <- PREDICATE_NODE,GROUNDED_PROCEDURE_NODE

// Huh?? XXX What are these? I don't understand them Do we use them
// anywhere? I think the first is same as ExecutionOutputLink, right?
// Not clear how a schema can be evaluated ...
// SCHEMA_EXECUTION_LINK <- INHERITANCE_LINK
// SCHEMA_EVALUATION_LINK <- SCHEMA_EXECUTION_LINK

// ==============================================================
// Types and type constructors.

// A TypeNode can hold only core (in-built) type declarations, such
// as that in this file. Viz it just holds an integer.
// It inherits from PredicateNode because it is a kind of predicate:
// It can evaluate to true, if something is of the indicated type,
// else it would evaluate to false.
//
TYPE_NODE <- PREDICATE_NODE

// Non-strict versions of above. See the wiki.
TYPE_INH_NODE <- TYPE_NODE
TYPE_CO_INH_NODE <- TYPE_NODE

// User-defined type.  This is meant to be used with DefineLink
// to give a name to a type defintion; for example, a type definition
// specificed with SignatureLink or ArrowLink.
DEFINED_TYPE_NODE <- TYPE_NODE

// Used for type polymorphism.
// XXX this inheritance seems to be making RuleUTest fail???
// TYPE_CHOICE <- OR_LINK,EVALUATABLE_LINK
TYPE_CHOICE <- OR_LINK

// Type constructor. Forces a boolean-and of all of the type defintions
// (signatures) that it contains.  Mostly useful only when used with
// the IntervalLink, so specify the length of a list or the size of a
// set.  This, in turn, is mostly useful only for Regex matching using
// the GlobNode.
// XXX this inheritance seems to be making RuleUTest fail???
// TYPE_SET_LINK <- SET_LINK,EVALUATABLE_LINK
TYPE_SET_LINK <- SET_LINK

// Type constructor.  Corresponds to right-arrow of functional
// programming languages, viz. arity-2, first arg is input, 2nd
// arg is output.
// XXX this inheritance seems to be making RuleUTest fail???
// ARROW_LINK <- ORDERED_LINK,EVALUATABLE_LINK
ARROW_LINK <- ORDERED_LINK

// Type constructor.
// The SignatureLink implements "deep types", a way for specifying
// the type of an entire graph, and not just some node or link.
// The type specification is "precise", in contrast to the fuzzy
// type specification, below.
// XXX this inheritance seems to be making RuleUTest fail???
// SIGNATURE_LINK <- ORDERED_LINK,EVALUATABLE_LINK
SIGNATURE_LINK <- ORDERED_LINK

// The FuzzyLink is a kind of type specification that can be imprecise.
// It is used to specify a pattern that is then matched only
// approximately by the pattern matcher, to find "similar" graphs.
// See also GlobNode, which performs a more narrow kind of matching.
// (viz. bunch-in-a-row globbing)
FUZZY_LINK <- SIGNATURE_LINK

// A type binder: it binds a type to a VariableNode. Always arity-2,
// the first position must be a VariableNode, the second must be a type.
// Note that this is always scoped, i.e. used in lambdas and places
// where variables are not free. Thus, unlike TypedAtomLink, this is
// never globally unique.
//
// It hinherits from Evaluatable, because it typically obtains a value
// of "true", if the indicated variable is of the given type, else
// it evaluates to "false".  The predicate specifying the concrete
// test is the signature (SignatureLink, etc) that is tested.
// XXX Perhaps this should inherit from EvaluationLink, instead ??
// XXX this inheritance seems to be making RuleUTest fail???
// TYPED_VARIABLE_LINK <- ORDERED_LINK,EVALUATABLE_LINK
TYPED_VARIABLE_LINK <- ORDERED_LINK

// A type binder for non-variable atoms. It binds a type to an atom
// at a "global" level.  Always arity-2, the first position must be
// a Variablenode, the second must be a type.  A given atom can only
// ever have just one type, thus, this is unique.
TYPED_ATOM_LINK <- UNIQUE_LINK

// ====================================================================
// Synchronization primitive, used to mark stages of a processing
// pipeline; used as a fence or guard barrier, make sure that earlier
// stages have completed processing before later ones start.
// Basically, hypergraphs may be attached to the anchor, with a
// ListLink, to indicate that they are either done, or awaiting
// processing.
ANCHOR_NODE <- NODE

// ====================================================================
//
// An arity-2 link, used for specifying numeric intervals, such
// as time intervals, or the lower and upper bounds of some range.
INTERVAL_LINK <- ORDERED_LINK

// Link for mathematics. (???) Huh? What is this? What does it do?
// Is this actually used anywhere? Is this documented anywhere?
QUANTITY_LINK <- ORDERED_LINK

// ====================================================================
// A VirtualLink is equivalent to an EvaluationLink, with a
// GroundedPredicateNode in it, except that the GPN is "built in".
// So, for example, GreaterThanLink is equivalent to an EvaluationLink
// with a GroundedPredicateNode "c++:greater_than". The built-in
// evaluation links have better performance, since they don't need
// to make a call to external scheme or python code to get evaluated.
//
// The VirtuaLink designation is needed by the pattern matcher,
// in order to be able to find and treat these terms correctly.
//
// VirtualLinks only need to be used for those GPN's that take 2 or
// more arguments. If they take only one, then there is no reason
// for them to be declared as virtual (at least, as far as the pattern
// matcher is concerned, which, right now, is the only user of this
// link type.)
VIRTUAL_LINK <- EVALUATION_LINK
GREATER_THAN_LINK <- VIRTUAL_LINK

// IdenticalLink tests for syntactic equality.  It does NOT execute its
// arguments; it true only if both sides are the same atom.
// EqualLink tests for semantic equality: the two sides are equal, if,
// after execution, they evaluate to the same atom.
IDENTICAL_LINK <- UNORDERED_LINK,VIRTUAL_LINK
EQUAL_LINK <- UNORDERED_LINK,VIRTUAL_LINK

// --------------------------------------------------------------
// Functions that do NOT bind variables.

// A FunctionLink is a link that can be executed, with the result of
// execution being some atom.  FunctionLink does NOT derive from
// LambdaLink, which may seem counter-intuitive; here's why, so
// listen up.  All of the explicitly-named functions (e.g. PlusLink)
// do not need to explicitly name thier arguments, and it would even
// be confusing if they did so.  Instead, the convention is that every
// element in the outgoing set of the FunctionLink IS an argument of
// the function; that's all, end-of-story.
//
// All variables that appear underneath the FunctionLink are necessarily
// free variables; they are neither scoped, nor bound.
//
// The FunctionLink is meant to be a base type for links that define
// functions.  It is NOT meant to be used as a base type for
// user-defined structures; users should use the LambdaLink for that.
FUNCTION_LINK <- FREE_LINK

// The ExecutionOutputLink is a specific kind of function: it must have
// a GroundedSchemeNode as its first argument.  The other kinds of
// FunctionLinks do not have this restriction: indeed, the actual
// function they perform is implicit in the link type.
EXECUTION_OUTPUT_LINK <- FUNCTION_LINK

// Basic arithmetic operators
FOLD_LINK <- FUNCTION_LINK
ARITHMETIC_LINK <- FOLD_LINK
PLUS_LINK <- ARITHMETIC_LINK
MINUS_LINK <- PLUS_LINK
TIMES_LINK <- ARITHMETIC_LINK
DIVIDE_LINK <- TIMES_LINK

RANDOM_NUMBER_LINK <- FUNCTION_LINK

// Return arity of the wrapped link.
ARITY_LINK <- FUNCTION_LINK

// Return (with uniform distribution) one of the links it wraps.
RANDOM_CHOICE_LINK <- FUNCTION_LINK

// Return the current time.
TIME_LINK <- FUNCTION_LINK

// Sleep link pauses executation for the indicated number of seconds.
SLEEP_LINK <- FUNCTION_LINK

// MapLink could be named UnPutLink ... it undoes a beta-reduction,
// by extracting values for a given set of variables.  In many ways,
// it resembles a GetLink, except that it searches only its argument
// list, instead of the entire AtomSpace.  It is more-or-less analogous
// to the standard functional-programming concept of "map".
MAP_LINK <- FUNCTION_LINK

// ====================================================================
// Grammatical inference on time series
// The generic structure encoded here would be:
//     Section
//         LexicalAtom "something"
//         ConnectorSeq
//             Connector
//                 LexicalAtom "it's"
//                 ConnectorDir "-"
//             Connector
//                 LexicalAtom "curious"
//                 ConnectorDir "+"
//
CONNECTOR <- LINK              // Link-grammar connector
CONNECTOR_DIR_NODE <- NODE "ConnectorDir" // Connector direction
CONNECTOR_SEQ <- ORDERED_LINK  // Sequence of connectors
SECTION <- ORDERED_LINK        // Sheaf section, connector set
