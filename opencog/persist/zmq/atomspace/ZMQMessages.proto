// Definition of the ZMQ message format used by AtomSpaceAsync
// compile with protoc --cpp_out=. ZMQMessages.proto

option optimize_for = SPEED;
option java_package = "org.opencog.atomspace";
option java_outer_classname = "AtomSpaceProtos";

message ZMQAttentionValueHolderMessage {
    required double STI=1;
    required double LTI=2;
    required double VLTI=3;
}

enum ZMQTruthValueType {
    ZMQTruthValueTypeSimple =0;
    ZMQTruthValueTypeCount=1;
    ZMQTruthValueTypeNull=2;
    ZMQTruthValueTypeIndefinite=3;
}

message ZMQSingleTruthValueMessage {
    required ZMQTruthValueType truthvaluetype=1;
    optional float mean=2; //simple, count, composite, indefinite
    optional float confidence=3; //count, composite, indefinite
    optional float count=4; //simple, count, composite, indefinite
    optional float U=6; //indefinite
    optional float L=7; //indefinite
    optional float confidenceLevel=8; //indefinite
    optional int32 symmetric=9; //indefinite
    optional float diff=10; //indefinite
    repeated float firstOrderDistribution=11; //indefinite
}

message ZMQTruthValueMessage {
    repeated ZMQSingleTruthValueMessage singleTruthValue=1;
}

enum ZMQAtomType {
    ZMQAtomTypeNode=0;
    ZMQAtomTypeLink=1;
    ZMQAtomTypeNotFound=2; // Requested node/link was not found
}

message ZMQAtomMessage {
    required ZMQAtomType atomtype=1;
    optional ZMQAttentionValueHolderMessage attentionvalueholder=2;
    optional uint64 handle=3;
    repeated uint64 incoming=4;
    optional int32 type=5;
    optional int32 flags=6;
    optional ZMQTruthValueMessage truthValue=7;
    optional string name=8; //node
    repeated uint64 outgoing=9; //link
}

enum ZMQAtomFetchKind {
    // get atom by handle UUID
    UUID = 0;
    // get node by atom_type and node_name
    NODE = 1;
    // get link by atom_type and handle_seq
    LINK = 2;
}

message ZMQAtomFetch {
    required ZMQAtomFetchKind kind = 1;
    optional uint64 handle = 2;
    optional int32 type = 3;
    optional string name = 4;
    repeated uint64 outgoing = 5;
}

enum ZMQFunctionType {
    /* Get a single atom by handle UUID.
     * @see ZMQRequestMessage#handle
     */
    ZMQgetAtom = 0;
    /* TODO: ?
     */
    ZMQgetName = 1;
    /* Get multiple atoms by UUID, atomType + node name, or atomType + outgoing set.
     * @see ZMQRequestMessage#fetch
     */
    ZMQgetAtoms = 2;
    /* Store multiple atoms by atomType + node name (for node), or atomType + outgoing set (for link).
     * @see ZMQRequestMessage#fetch
     */
    ZMQstoreAtoms = 3;
}

/* Information about atom type, it can be used for multiple purposes,
 * but currently its used to map between atom type integer IDs and atom type names.
 * @todo Make it graph-aware ~Hendy
 * @see ZMQRequestMsessage#atom_type
 */
message ZMQAtomTypeInfo {
    /**
     * Integer ID for ZeroMQ purposes.
     */
    optional int32 id = 1;
    /**
     * Atom type name.
     */
    optional string name = 2;
}

message ZMQRequestMessage {
    /**
     * Determines what other parameters below mean.
     */
    required ZMQFunctionType function = 1;
    // For {@link ZMQFunctionType#getAtom}, handle UUID to get.
    optional uint64 handle = 2;
    // For {@link ZMQFunctionType#getAtoms}, one or more fetch requests
    // for UUIDs, nodes, or links (can be mixed).
    repeated ZMQAtomFetch fetch = 3;
    // Atoms to be stored in the backing store.
    repeated ZMQAtomMessage atom = 4;
    // Mapping between atom type IDs to atom type names, sent by the client.
    repeated ZMQAtomTypeInfo atom_type = 5;
}

message ZMQReplyMessage {
    repeated ZMQAtomMessage atom = 1;
    optional string str = 2;
    // Mapping between atom type IDs to atom type names, sent by the server.
    repeated ZMQAtomTypeInfo atom_type = 3;
}
