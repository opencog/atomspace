

January 2017
------------

duuude add atom uuid=1445 at=(ListLink
  (WordNode "electrical") ; [4832681786782062498][0]
  (WordNode "energy") ; [489533332128669243][0]
) ; [12623974393483820401][18446744073709551615]

duuude add atom uuid=1448 at=(ListLink
  (WordNode "electrical") ; [4832681786782062498][0]
  (WordNode "energy") ; [489533332128669243][0]
) ; [12623974393483820401][18446744073709551615]


bad cause not in atomspace, yet...

1445 | 12  | {1446,1447} .. looks good ...
1448   12 |  ... has no outgoing set. just raw listlink


who calls addAtom???

shit -- oset not cleaned up!

ODBCRecordSet has bogus
char **column_labels;
char **values;

ncols is stale...
fetch_row() does nothing is OK

values are bound to columns ... 
values[i][0] =0   -- line 494

SELECT * FROM Atoms WHERE type =12 AND outgoing = '{}';

CREATE TABLE foo (
  name    TEXT,
  outgoing BIGINT[]
);

INSERT INTO FOO VALUES ('one', '{43, 67}');
INSERT INTO FOO VALUES ('two', '{}');
INSERT INTO FOO VALUES ('three', null);
INSERT INTO FOO (name, outgoing) VALUES ('four', null);

select * from foo where outgoing=null;
select * from foo where outgoing != '{43,67}';
select * from foo where array_length(outgoing,1)=0 ;
select * from foo where array_length(outgoing,1)=2 ;
select * from foo where array_length(outgoing,1)!=2 ;

reported  #14494

get rid of NodeCast DONE

CREATE TABLE Spaces (
    space  BIGINT PRIMARY KEY,
    parent BIGINT
);

store_atomtable_id(const AtomTable& at)

id_create_cache


local_id_cache used in atomExists to detrmine if atoms is in sql
and this is only use.

add_id_to_cache
maybe_create_id

table_cache_is_inited

ahhh .. needed for upsert.


NEED_UPSERT

INSERT ... ON CONFLICT {UPDATE

INSERT INTO upsert(key, val)
   VALUES(1, 'Foo'), (2, 'Bar'), (3, 'Baz')
   ON CONFLICT (key) DO UPDATE SET val = EXCLUDED.val;

cols ...
vals...
coda ...
 

TODO: remove atoms ... from TLB

storeAtom(const A

AtomSpace::store_atom(Handle h)
AtomSpace::fetch_atom(Handle h)


AtomPtrSignal&

removeAtomSignal

const AtomPtr&

removeAtomSignal()

_uuid_map

#ifdef STORAGE_DEBUG
UUID getUUID(const Handle&);

_atom_table.getNumAtomsOfType 
get_handles_by_type

_atom_table.getHandlesByType

std::unique_lock<std::recursive_mutex> 


A duude locked cnt=1
B duude unlocked cnt=0
C duude locked cnt=1
D duude locked cnt=2
E duude unlocked cnt=1
F duude locked cnt=2
G duude ave=2
unal remain=1
unal remain=0
terminate called after throwing an instance of 'std::system_error'
  what():  Operation not permitted


A: getNodeHandle AtomTable.cc:253
B: ulock OK ...
C: add AtomTable.cc:517
D: getNodeHandle AtomTable.cc:253
E: ulock
F: put_atom_into_index AtomTable.cc:626
G: 


wtf: t3 performance:  (custom lock class)
4/107 Test   #4: AttentionValueUTest ..............   Passed  173.36 sec
11/107 Test  #11: AtomSpaceUTest ...................   Passed  436.28 sec
12/107 Test  #12: AtomSpaceImplUTest ...............   Passed  254.36 sec

again:
  4/107 Test   #4: AttentionValueUTest ..............   Passed    0.91 sec
 11/107 Test  #11: AtomSpaceUTest ...................   Passed    0.21 sec
 12/107 Test  #12: AtomSpaceImplUTest ...............   Passed  102.55 sec



t4 perf:  (per-atomspace lock)
  4/107 Test   #4: AttentionValueUTest ..............   Passed    3.90 sec
  4/107 Test   #4: AttentionValueUTest ..............   Passed    8.03 sec
  4/107 Test   #4: AttentionValueUTest ..............   Passed    0.24 sec

 11/107 Test  #11: AtomSpaceUTest ...................   Passed    0.11 sec
 12/107 Test  #12: AtomSpaceImplUTest ...............   Passed    0.03 sec
 13/107 Test  #13: AtomSpaceAsyncUTest ..............   Passed   25.21 sec
 14/107 Test  #14: UseCountUTest ....................   Passed   23.99 sec
 20/107 Test  #20: ParallelUTest ....................   Passed   11.78 sec

two crashes out of 13
crash: 3 12 18 29 32 34 39  -- so total of 7 out of 50

master: crash 1 12 18 22 23 30 37 41 -- so total of 8 out of 50

ERROR: smallint out of range;
Error while executing the query

[2017-01-14 20:41:39:674] [WARN]    Query was: INSERT INTO Atoms (uuid, space,
type, name, height, tv_type, stv_mean, stv_confidence, stv_count) VALUES (1,
1, 4294967295,  $ocp$AA-aa-wow fromNode$ocp$ , 0, 1,         0.11,
130, 4.4739235e+09);

type is invalid!!! wtf!!
setup_typemap



real	3m40.489s
user	4m14.860s
sys	1m8.456s

crash: MultiPersistUTest

real	3m39.075s
user	4m10.668s
sys	1m8.172s


master perf:
  4/107 Test   #4: AttentionValueUTest ..............   Passed    0.30 sec
 11/107 Test  #11: AtomSpaceUTest ...................   Passed    0.08 sec
 12/107 Test  #12: AtomSpaceImplUTest ...............   Passed    0.03 sec
 13/107 Test  #13: AtomSpaceAsyncUTest ..............   Passed   25.09 sec
 14/107 Test  #14: UseCountUTest ....................   Passed   24.24 sec
 20/107 Test  #20: ParallelUTest ....................   Passed   11.79 sec

real	3m39.967s
user	4m20.212s
sys	1m7.864s

real	3m40.762s
user	4m15.532s
sys	1m9.332s


MultiPers crashed in 1 of 16 iters in master...


t5 perf:  (custom lock, but global)
  4/107 Test   #4: AttentionValueUTest ..............   Passed    0.36 sec
  4/107 Test   #4: AttentionValueUTest ..............   Passed    1.19 sec
  4/107 Test   #4: AttentionValueUTest ..............   Passed    0.14 sec

 11/107 Test  #11: AtomSpaceUTest ...................   Passed    0.17 sec
 11/107 Test  #11: AtomSpaceUTest ...................   Passed    0.24 sec

 12/107 Test  #12: AtomSpaceImplUTest ...............   Passed    0.03 sec
 12/107 Test  #12: AtomSpaceImplUTest ...............   Passed    0.03 sec

 13/107 Test  #13: AtomSpaceAsyncUTest ..............   Passed   26.82 sec
 13/107 Test  #13: AtomSpaceAsyncUTest ..............   Passed   26.06 sec
 13/107 Test  #13: AtomSpaceAsyncUTest ..............   Passed   26.19 sec

 14/107 Test  #14: UseCountUTest ....................   Passed   16.03 sec
..... racing hung livelock! 12x threads
 14/107 Test  #14: UseCountUTest ....................   Passed   16.00 sec


 20/107 Test  #20: ParallelUTest ....................   Passed   11.77 sec

real	4m4.951s
user	4m36.060s




if h is in there ... but hr is not .. the remove h add hr for same uuid


OK, so _tlbuf.addAtom(node, p->uuid);
is not adding the AS version ... its for getNode also getLink

load_if_not_ex -- is OK bt is only in bulk.
table->add
get_recursive_if_not_exists hasn't added to atomsoace yet.
bug does later...

fetch_incoming_set_cb ??

getNode and getLink arn't putting it in.. !?

get_recursive_if_not_exists ... really gets recursive
------------------------

uuid 1 NumberNode "0.1415
2 wow fr
3 wow third
4 - wow to

5 == setlink, but bad order: 1,2,3,4 uh not that's good order. uh no OK.

link resort claims 4 then 5
so there was no sort before store!?  also no sort before the getlink query??
because the TV is already causing queryies to run in the link ctor!
and the backwards resulting atom gets poked in tlb...

select uuid, type, name, outgoing from atoms order by uuid;

ordering should give ... well, its a list link so:
ListLink
   Set      aka 2
   toNode   aka 5
and that is how its stored, and how its printed. Sooo ?

Now, its this:
SELECT * FROM Atoms WHERE type = 11 AND outgoing = '{4, 5}';
but was stored as 5,4   its printing as 4,5


argh .... need to get tv to do bulk store ...
so maybe not hook up?a don't hook up atomspace to backend prior to the store,
or temporarily unhook it...


cherry
c400c78e57e6e3f9e18d8a55cc030e355c7912e2
035260dd825d2290116e4c9e13e51a6f8ca01fdf
fd3aacfd95da8a3bb7c940fff6aa2ac3948fc0c6
803f615a752a580488b0919bf9d9b11eae62e8f9
13ab7fea910ba6e51cc7cdc4d25a87d70d3d71d1

load_count store_count 

277

Got: 277 >>>opencog> Entering scheme shell; use ^D or a single . on a line by
itself to exit.
guile> (EvaluationLink
   (PredicateNode "visible face")
   (ListLink
      (NumberNode "2.000000")
   )
)

guile> 
guile> <<<


(use-modules (opencog) (opencog persist) (opencog persist-sql))
(sql-open "opencog_test" "opencog_tester" "cheese")
(ConceptNode "AAA")

(sql-store)
(sql-close)
(sql-open "opencog_test" "opencog_tester" "cheese")
(fetch-atom (ConceptNode "AAA"))
(cog-set-tv! (ConceptNode "AAA") (stv 0.1 0.11))

(sql-store)
(sql-close)

(List (ConceptNode "AAA") (ConceptNode "BBB"))
(fetch-atom (List (ConceptNode "AAA") (ConceptNode "BBB")))

(sql-store)

bugs:? 1) sql-store clobbbers TV oh, OK...

2) ... need to pull for tlb... 

fetch-atom -> PersistSCM::fetch_atom
h = as->fetch_atom(h);  ... getLink
... oset_to_string --> _tlbuf.addAtom(h, TLB::INVALID_UUID);

is where it goes wrong. Need to fetch the uuid.

        UUID get_uuid(const Handle&);


PseudoPtr petAtom(UUID);a x no uuid not known yet.

PseudoPtr po(store->petAtom(idu));
AtomPtr ra = get_recursive_if_not_exists(po);  --> this sets the TV.

needs to place into TLB... near line 218  not its done ...
Handle TLB::getAtom(UUID uuid)


TLB.add atom: check on only use atomsapce version of atom ... 


getMaxHeight DEAD DONE
setMaxHeight DEAD DONE

get_height
max_height
getMaxObservedHeight

   execution
   ${GUILE_LIBRARIES}

who calls ~GenericShell() ?  (must drain before cancel!)
[ConsoleSocket] destructor calls

poll_output

(open-file "/tmp/lg" 'w')
scm_i_string_chars

SCM_VALIDATE_STRING (1, string);


// The hexadecimal \x4 is ctrl-D.

_write_queue

   register_proc("cog-inc-count!",        2, 0, 0, C(ss_inc_count));

the cond is notified when something is added to the queu!

so barrier stalls on an empty queue, returns when something is added.

except notify_one  might not notify the thread holding the barrier.
It might notify someone else.

// XXX DO NOT USE, NOT SAFE IN ANY WAY!

flushStoreQueue
getLink
getNode

petAtom
ODBCAtomStorage::getIncomingSet

eva
  pred   gar
  list   gdr
    lw   gadr
    rw   gddr

_write_queue.enqueu only for storeAtom

calls vdo_store_atom

do_store_single_atom ... of course stores tv
but do_store_atom recursively stores, so al TV's get updated...

so a single StoreAtom is suffieicnt to do them all.

23 January 2017
---------------

pg_ctl reload

pg_ctlcluster [options] cluster-version cluster-name action
pg_ctlcluster 9.6 main status

pg_ctlcluster 9.6 main reload


both odbc+postgres:

real	0m18.280s
user	0m9.232s
sys	0m0.640s

real	0m17.272s
user	0m9.268s
sys	0m0.668s

real	0m18.670s
user	0m9.404s
sys	0m0.692s

odbc only:

real	0m14.251s
user	0m9.324s
sys	0m0.876s

real	0m13.948s
user	0m9.060s
sys	0m0.700s

real	0m14.975s
user	0m8.960s
sys	0m0.816s

postgres only:
real	0m2.991s
user	0m0.060s
sys	0m0.060s

real	0m3.012s
user	0m0.072s
sys	0m0.056s

real	0m5.119s
user	0m0.072s
sys	0m0.036s


Wow!!!!

odbc only:
        Start  38: BasicSaveUTest
 38/109 Test  #38: BasicSaveUTest ...................   Passed   14.17 sec
        Start  39: PersistUTest
 39/109 Test  #39: PersistUTest .....................   Passed    5.54 sec
        Start  40: MultiPersistUTest
 40/109 Test  #40: MultiPersistUTest ................   Passed   16.94 sec
        Start  41: FetchUTest
 41/109 Test  #41: FetchUTest .......................   Passed    4.33 sec

postgres only:
tart  38: BasicSaveUTest
 38/109 Test  #38: BasicSaveUTest ...................   Passed    2.68 sec
        Start  39: PersistUTest
 39/109 Test  #39: PersistUTest .....................   Passed    2.09 sec
        Start  40: MultiPersistUTest
 40/109 Test  #40: MultiPersistUTest ................   Passed   10.73 sec
        Start  41: FetchUTest
 41/109 Test  #41: FetchUTest .......................   Passed    2.22 sec

Both:
        Start  38: BasicSaveUTest
 38/109 Test  #38: BasicSaveUTest ...................   Passed   16.45 sec
        Start  39: PersistUTest
 39/109 Test  #39: PersistUTest .....................   Passed    6.01 sec
        Start  40: MultiPersistUTest
 40/109 Test  #40: MultiPersistUTest ................   Passed   13.26 sec
        Start  41: FetchUTest
 41/109 Test  #41: FetchUTest .......................   Passed    1.58 sec

Both, with the new URI scheme  (wtf is this different!??!!??)


        Start  38: BasicSaveUTest
 38/109 Test  #38: BasicSaveUTest ...................   Passed    9.65 sec
        Start  39: PersistUTest
 39/109 Test  #39: PersistUTest .....................   Passed    4.02 sec
        Start  40: MultiPersistUTest
 40/109 Test  #40: MultiPersistUTest ................   Passed   11.37 sec
        Start  41: FetchUTest
 41/109 Test  #41: FetchUTest .......................   Passed    2.08 sec

_store->print_stats

async_caller<SQLAtomStorage, Handle> _write_queue;

_in_drain bool -- 
_busy_writers
_store_queue.size()
      unsigned long get_busy_writers() const { return _busy_writers; }
      unsigned long get_queue_size() const { return _store_queue.size(); }

conn_pool.pop

\conn_pool.size() -- default is 8 or hardware concurrency

conn->exec() returns an rs... 

VERS_3.52
vacuuum!!! -- DONE



ConsoleSocket.h:    GenericShell *_shell;
ConsoleSocket.cc:    bool is_shell = request->isShell();

built-in req
ConsoleSocket* con = req->get_console();

  // The total number of concurrently open sockets is managed by
        // keeping a count in ConsoleSocket, and blocking when there are
        // too many.


console has a _use_count -- volative per-inst updated byg get put in the req
_max_open_sockets -- static uint
_num_open_sockets -- static  uint


store->_tlbuf..getUUID(h)

oset_to_string

maybe_create_id

do_store_single_atom wtf uuid not checked!

maybe_create_id but assumes the UUID is already correct!

getNode

Atom::getValue(key)

ValuationTable::
std::set<Handle> getKeys(const Handle&);
    ValuationTable _value_table;

    _backing = new SQLBackingStore();

_backing->set_store(_store);
    _backing->registerWith(_as);


getNode
