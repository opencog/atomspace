
After implementing storing into an Edges table so AtomSpace could support
arbitrary sized links, I implemented a test for deep links, i.e. links
with tree-depth (or height) of 1,000 to 10,000 links. Turns out you can't
do that with out current fetching algorithm. It breaks at about 20:

algorithms:

test_deep_links:

	create node_1
	create node_2
	first_out = node_1
	second_out = node_2

	for 0 to depth:
		link = create_link(LINK, {first_out, second_out})
		second_out = first_out
		first_out = link

The unit test prints the SQL query counts. It segfaults at 20.

Depth    |	Fetch Last Queries   |  Fetch All Queries   |  Load Queries
-----:   |  ------------------:  |  -----------------:  |   ------------:
15       |                3,208  |               8,341  |             32
16       |                5,183  |              13,508  |             34
17       |                8,378  |              21,869  |             36
18       |               13,547  |              35,398  |             38
19       |               21,910  |              57,289  |             40

So the height-based loading is much much much better.
