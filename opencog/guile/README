
                        Scheme Scripting
                        ----------------
                    Linas Vepstas, May 2008


This directory contains an implementation of Scheme bindings for the
AtomSpace. It allows the contents of the Atomspace to be manipulated
directly from Scheme.

The bindings are implemented via
[http://www.gnu.org/software/guile/guile.html guile];
the [http://www.gnu.org/software/guile/manual/ guile reference manual
is here]. The best book on the Scheme programming language (never-mind
the language, it's one of the best books written on programming, no
matter what language you like to use) is
"[http://mitpress.mit.edu/sicp/full-text/book/book.html Structure and
Interpretation of Computer Programs"] by Abelson and Sussman. It is now
available online for free from MIT Press.

Documented below are the core interface functions implemented by the
guile binding -- these provide for the creation and deletion of OpenCog
Nodes, Links, Values and TruthValues, as well as ways to get
properties (such as the names of Nodes, or the outgoing sets of Links).

Atom creation can be as simple as the following example:
```
   (ReferenceLink (stv 0.987 0.234)
       (ConceptNode "dog-instance-1") (WordNode "dog"))
```
which creates a link connnecting a concept node and a word node, having
a simple truth value. Any valid node or link name can be used in this way.

A number of utilities and handy functions can be found in the directory
''opencog/scm''.  These can be loaded from the guile REPL by saying
`(use-modules (opencog))`.

An expaneded, improvied version of this README can be found on the wiki:
http://opencog.org/wiki/Scheme

== Running ==
--------------
There are multiple ways to access the scheme bindings:

* By directly running the guile REPL
* By starting the cogserver, and telneting to port 17001

== On-line documentation ==
---------------------------
Documentation for all routines and utilities can be pulled up at the
guile shell prompt, by saying <tt>,d name-of-proc</tt> or
<tt>(display (procedure-documentation name-of-proc))</tt>.


== Modules ==
-------------
There are more than a few dozen different OpenCog modules. The main ones
are `(opencog)` and `(opencog exec)`.  The contents of a module can be
as follows:
```
(module-for-each (lambda (symbol value) (display symbol) (newline))
(resolve-interface '(opencog ...module...)))
```

== Core Functions ==
--------------------
The following are the "core" functions, implemented in the guile-to-C++
interface.

=== cog-new-node node-type node-name ===
      Create a new node of the given type and name

      Optionally, a truth value can follow the node name.

      Throws errors if node-type is not a valid atom type for a node,
      and if node-name is not a string.

      Example:
          ; Create a new node, and prints its value:
          guile> (cog-new-node 'ConceptNode "some node name")
          (ConceptNode "some node name")

          ; Creates a new node, with a truth value:
          guile> (cog-new-node 'ConceptNode "another node"
                        (SimpleTruthValue 0.8 0.9))
          (ConceptNode "another node" (stv 0.8 0.9))


=== cog-node node-type node-name ===
      Returns the node of the given type and name, if it exists, else
      returns null.

      Optionally, a truth value can follow the node name. If the node
      exists, then the truth value is modified.

      Throws errors if node-type is not a valid atom type for a node,
      and if node-name is not a string.

      Example:
          ; Check to see if a node exists:
          guile> (cog-node 'ConceptNode "asdf")
          ()

          ; Verify that the return value is actually a true null:
          guile> (null? (cog-node 'ConceptNode "asdf"))
          #t

          ; Now, create the node, and see if it exists:
          guile> (cog-new-node 'ConceptNode "asdf")
          (ConceptNode "asdf")
          guile> (null? (cog-node 'ConceptNode "asdf"))
          #f

          ; Change the truth value of an existing node:
          guile> (cog-node 'ConceptNode "asdf" (SimpleTruthValue 0.8 0.9))
          (ConceptNode "asdf" (stv 0.8 0.9))


=== cog-new-link link-type atom ... atom ===
      Create a new link, with the given atoms in the link.

      Optionally, a truth value can be included
      in the list of atoms.

      Throws errors if the link type is not a valid opencog link type,
      or if any of the arguments after the link type are not atoms or
      truth values.

      Example:
          ; Creates two nodes, and a new link:
          guile> (define x (cog-new-node 'ConceptNode "abc"))
          guile> (define y (cog-new-node 'ConceptNode "def"))
          guile> (cog-new-link 'Link x y)
          (Link
             (ConceptNode "abc")
             (ConceptNode "def")
          )

          ; Create a new link with a truth value:
          guile> (cog-new-link 'Link x y (SimpleTruthValue 0.7 0.8))
          (Link (stv 0.7 0.8)
             (ConceptNode "abc")
             (ConceptNode "def")
          )


=== cog-link link-type atom ... atom ===
      Returns the link of the given type and list of atoms, if it
      exists, else returns null.

      Optionally, a truth value can be included in the list of atoms.
      If the link exists, then the truth value is modified.

      Throws errors if the link type is not a valid opencog link type,
      or if any of the arguments after the link type are not atoms or
      truth values.

      Example:
          ; Create two nodes:
          guile> (define x (cog-new-node 'ConceptNode "abc"))
          guile> (define y (cog-new-node 'ConceptNode "def"))

          ; Does a node with these two links exist?
          guile> (cog-link 'Link x y)
          ()

          ; Now, create such a link
          guile> (cog-new-link 'Link x y)
          (Link
             (ConceptNode "abc")
             (ConceptNode "def")
          )

          ; Check again for existence:
          guile> (cog-link 'Link x y)
          (Link
             (ConceptNode "abc")
             (ConceptNode "def")
          )

          ; Change the truth value of an existing node:
          guile> (cog-link 'Link x y (SimpleTruthValue 0.7 0.8))
          (Link (stv 0.7 0.8)
             (ConceptNode "abc")
             (ConceptNode "def")
          )


=== cog-extract atom ===
      Delete the indicated atom, but only if it has no incoming links.

      Returns #t if the atom was deleted, else returns #f if not deleted.

=== cog-extract-recursive atom ===
      Delete the indicated atom, and all atoms that point at it.

      Both functions return #t on success, else they return #f.
      If #f is returned, then the delete failed.

      Example:
         ; Define two nodes and a link between them:
         guile> (define x (ConceptNode "abc"))
         guile> (define y (ConceptNode "def"))
         guile> (define l (Link x y))

         ; Verify that there's an atom called x:
         guile> x
         (Link
            (ConceptNode "abc")
            (ConceptNode "def")
         )

         ; Try to delete x. This should fail, since there's a link
         ; containing x.
         guile> (cog-extract x)
         #f

         ; Delete x, and everything pointing to it. This should delete
         ; both x, and the link l.
         guile> (cog-extract-recursive x)
         #t

         ; Verify that the link l is gone:
         guile> l
         Invalid handle

         ; Verify that the node x is gone:
         guile> x
         Invalid handle

         ; Verify that the node y still exists:
         guile> y
         (ConceptNode "def")


=== cog-atom? exp ===
      Return #t if exp is an atom, else return #f

      Example:
         ; Define a node
         guile> (define x (ConceptNode "abc"))
         guile> (define y (+ 2 2))
         guile> (cog-atom? x)
         #t
         guile> (cog-atom? y)
         #f


=== cog-node? exp ===
      Return #t if exp is an node, else return #f

      See also cog-node, which will check to see if a specific node
      already exists.

      Example:
         ; Define a node and a link
         guile> (define x (ConceptNode "abc"))
         guile> (define y (ListLink x))
         guile> (cog-node? x)
         #t
         guile> (cog-node? y)
         #f


=== cog-link? exp ===
      Return #t if exp is an link, else return #f

      See also cog-link, which will check to see if a specific link
      already exists.

      Example:
         ; Define a node and a link
         guile> (define x (ConceptNode "abc"))
         guile> (define y (ListLink x))
         guile> (cog-link? x)
         #f
         guile> (cog-link? y)
         #t


=== cog-name atom ===
      Return the name of the node. If the atom is not a node,
      returns NIL.

      Example:
         ; Define a node
         guile> (define x (ConceptNode "abc"))
         guile> (cog-name x)
         "abc"


=== cog-type atom ===
      Return the type of the atom.

      Example:
         ; Define a node
         guile> (define x (ConceptNode "abc"))
         guile> (cog-type x)
         ConceptNode
         guile> (eq? 'ConceptNode (cog-type x))
         #t

=== cog-arity atom ===
      Return the arity of the atom.

      Example:
         guile> (define x (ConceptNode "abc"))
         guile> (cog-arity x)
         0
         guile> (define l (Link x x x))
         guile> (cog-arity l)
         3


=== cog-incoming-set atom ===
=== cog-outgoing-set atom ===
      Return the incoming and outgoing sets, respectively, of the atom.
      These sets are returned as ordinary scheme lists.

      Example:
         ; Define two nodes and a link between them:
         guile> (define x (ConceptNode "abc"))
         guile> (define y (ConceptNode "def"))
         guile> (define l (Link x y))

         ; Get the incoming sets of nodes x and y (which is the link l):
         guile> (cog-incoming-set x)
         ((Link
            (ConceptNode "abc")
            (ConceptNode "def")
         )
         )

         guile> (cog-incoming-set y)
         ((Link
            (ConceptNode "abc")
            (ConceptNode "def")
         )
         )

         ; Verify that the both incoming sets are really one and the
         ; same link:
         guile> (equal? (cog-incoming-set x) (cog-incoming-set y))
         #t

         ; The returned values are lists, and not singleton atoms.
         ; Thus, the incoming set of x is a list containing l:
         guile> (equal? (cog-incoming-set x) (list l))
         #t

         ; Verify that the returned value is a true list:
         guile> (list? (cog-incoming-set x))
         #t


=== cog-handle atom ===
      Return a 64-bit hash of the atom. This can be used in hashing
      functions.

      It may be useful to remember that scheme indicates hexadecimal
      numbers by preceeding them with #x, and so, for example,
      (cog-atom #x2c949b) gets the handle associated with hex 2c949b.

      Example:
         ; Create two atoms, and get thier handles:
         guile> (define x (ConceptNode "abc"))
         guile> (define y (ConceptNode "def"))
         guile> (cog-handle x)
         999732144055296198
         guile> (cog-handle y)
         7856230993510549357

=== cog-tv? exp ===
      Return #t if exp is a truth value, else return #f

      Example:
         ; Define a simple truth value
         guile> (define x (SimpleTruthValue 0.7 0.9))
         guile> (define y (+ 2 2))
         guile> (cog-tv? x)
         #t
         guile> (cog-tv? y)
         #f

=== cog-tv atom ===
      Return the truth-value of the atom.

      Example:
         ; Define a node
         guile> (define x
                   (ConceptNode "abc"
                      (SimpleTruthValue 0.2 0.5)))
         guile> (cog-tv x)
         (stv 0.2 0.5)
         guile> (cog-tv? (cog-tv x))
         #t

=== cog-set-tv! atom tv ===
      Set the truth-value of the atom.

      Example:
         ; Define a node
         guile> (define x (ConceptNode "def"))
         guile> (cog-tv x)
         (stv 0 0)
         guile> (cog-set-tv! x (SimpleTruthValue 0.9 0.8))
         (ConceptNode "def" (stv 0.9 0.8))
         guile> (cog-tv x)
         (stv 0.9 0.8)

=== cog-get-types ===
      Return a list of all of the atom types in the system.

      Example:
          guile> (cog-get-types)

=== cog-type? symbol ===
      Return #t if the symbol names an atom type, else return #f

      Example:
          guile> (cog-type? 'ConceptNode)
          #t
          guile> (cog-type? 'FlorgleBarf)
          #f

=== cog-node-type? symbol ===
      Return #t if the symbol names an node type, else return #f

      Example:
          guile> (cog-node-type? 'ConceptNode)
          #t
          guile> (cog-node-type? 'ListLink)
          #f
          guile> (cog-node-type? 'FlorgleBarf)
          #f


=== cog-link-type? ===
      Return #t if the symbol names a link type, else return #f

      Example:
          guile> (cog-link-type? 'ConceptNode)
          #f
          guile> (cog-link-type? 'ListLink)
          #t
          guile> (cog-link-type? 'FlorgleBarf)
          #f

=== cog-type->int ===
      Return the integer value corresponding to an atom type.

      Example:
          guile> (cog-type->int 'ListLink)
          8

=== cog-get-subtypes type ===
      Return a list of the subtypes of the given type.  Only the
      immediate subtypes are returned; to obtain all subtypes, this
      function should be called recursively.

      Example:
          guile> (cog-get-subtypes 'Atom)
          (Link Node)

=== cog-subtype? type subtype ===
      Return #t if 'subtype' is a subtype of 'type', else return #f.
      The check is performed recursively.

      Example:
          guile> (cog-subtype? 'Node 'Link)
          #f
          guile> (cog-subtype? 'Atom 'Link)
          #t
          guile> (cog-subtype? 'Atom 'ConceptNode)
          #t

=== cog-map-type proc type ===
      Call proceedure proc for each atom in the atomspace that is of
      type type. If proc returns any value other than #f, then the
      iteration is terminated.  Note that this iterates only over the
      given type, and not its sub-types. Thus (cog-map-type proc 'Atom)
      will never call proc, because no atoms in the atomspace can have
      the type Atom: they are all subtypes of Atom.

      Example:
         ; define a function that prints the atoms:
         guile> (define (prt-atom h) (display h) #f)
         guile> (cog-map-type prt-atom 'ConceptNode)

=== Ad Hoc commands ===
      The scheme module provides a generic mechanism to declare new
      scheme "primitive functions" ''i.e.'' functions which call methods
      on a C++ object. New primitives may be defined by  using the
      "define_scheme_primitive" function in "opencog/guile/SchemePrimitive.h".

      Some of the currently-implemented primtives are:

      Available when the PersistModule is loaded, and connected to a
      database:
      fetch-atom handle     -- fetch indicated atom from SQL/persistent
                               storage.
      fetch-incoming-set    -- fetch the incoming set of the atom from
                               SQL storage. The fetch is recursive.
      store-atom handle     -- store indicated atom to SQL/persistent
                               storage.
      load-atoms-of-type type -- fetch atoms of the given type from
                               SQL/persistent storage.
      barrier               -- block until the SQL Atom write queues
                               are empty.


=Notes, examples, utilities=
Various related notes.

====Delete a list of atoms ====
Below is a simple example of scheme code for deleting all of the atoms
in a list.

  (define (killall lst)
     (if (null? lst)
         '()
         (cons (cog-extract (car lst))
               (killall (cdr lst)))))


===Count the total number of atoms in the atomspace===
Here is a simple example showing how to count the total number of atoms
in the atomspace.

   (define (cnt-all)
      (define cnt 0)
      (define (ink a) (set! cnt (+ cnt 1)) #f)
      (define (cnt-type x) (cog-map-type ink x))
      (map cnt-type (cog-get-types))
      cnt
   )

===Calling scheme from Atomese===
The [[ExecutionOutputLink]], whem used with the
[[GroundedSchemaNode]], allows scheme code to be invoked when the
given ExecutionOutputLink is evaluated.  See that page for details.

=== Calling scheme from C++ ===
Scheme code can be called from C++. The most common case is handled
below: calling a scheme function which expects 0,1,2 or more
<tt>Handle</tt> arguments, and returns a <tt>Handle</tt>. So, for
example, assume you have a scheme function called <tt>do-stuff</tt> as
below:

  (define (do-stuff handle1 handle2) (... return some-hand ...))

Then you can call it from C++ as follows:

  // Create a LIST_LINK on stack, holding the input arguments.
  Handle arg1 = ...;
  Handle arg2 = ...;
  hlnk = getAtomSpace.addLink(LIST_LINK, arg1, arg2, ...);

  // Call the "do-stuff" function
  SchemeEval evaluator;
  Handle answer = evaluator.apply("do-stuff", hlnk);

If <tt>do-stuff</tt> doesn't take any arguments, then set <tt>hlink</tt>
to <tt>Handle::UNDEFINED</tt>, or pass an empty [[ListLink]].

The above form is used by the [[ExecutionOutputLink]] to embed scheme
callouts into hypergraphs.

=== Calling C++ from scheme ===
The C++ programmer may define new scheme primitive functions by using
the "define_scheme_primitive" function in "opencog/guile/SchemePrimitive.h".
This function expects a string that will be the scheme name, a C++ method,
and a pointer to a C++ object instance.  Unusual C++ signatures may require
extending SchemePrimitive.h, but this should not be hard.

The example program PrimitiveExample.cc shows how.
